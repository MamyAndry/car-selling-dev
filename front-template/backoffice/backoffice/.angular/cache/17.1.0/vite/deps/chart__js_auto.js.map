{
  "version": 3,
  "sources": ["../../../../../node_modules/@kurkle/color/dist/color.esm.js", "../../../../../node_modules/chart.js/dist/chunks/helpers.segment.js", "../../../../../node_modules/chart.js/dist/chart.js", "../../../../../node_modules/chart.js/auto/auto.js"],
  "sourcesContent": ["/*!\r\n * @kurkle/color v0.3.2\r\n * https://github.com/kurkle/color#readme\r\n * (c) 2023 Jukka Kurkela\r\n * Released under the MIT License\r\n */\r\nfunction round(v) {\r\n  return v + 0.5 | 0;\r\n}\r\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\r\nfunction p2b(v) {\r\n  return lim(round(v * 2.55), 0, 255);\r\n}\r\nfunction b2p(v) {\r\n  return lim(round(v / 2.55), 0, 100);\r\n}\r\nfunction n2b(v) {\r\n  return lim(round(v * 255), 0, 255);\r\n}\r\nfunction b2n(v) {\r\n  return lim(round(v / 2.55) / 100, 0, 1);\r\n}\r\nfunction n2p(v) {\r\n  return lim(round(v * 100), 0, 100);\r\n}\r\n\r\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\r\nconst hex = [...'0123456789ABCDEF'];\r\nconst h1 = b => hex[b & 0xF];\r\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\r\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\r\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\r\nfunction hexParse(str) {\r\n  var len = str.length;\r\n  var ret;\r\n  if (str[0] === '#') {\r\n    if (len === 4 || len === 5) {\r\n      ret = {\r\n        r: 255 & map$1[str[1]] * 17,\r\n        g: 255 & map$1[str[2]] * 17,\r\n        b: 255 & map$1[str[3]] * 17,\r\n        a: len === 5 ? map$1[str[4]] * 17 : 255\r\n      };\r\n    } else if (len === 7 || len === 9) {\r\n      ret = {\r\n        r: map$1[str[1]] << 4 | map$1[str[2]],\r\n        g: map$1[str[3]] << 4 | map$1[str[4]],\r\n        b: map$1[str[5]] << 4 | map$1[str[6]],\r\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\r\n      };\r\n    }\r\n  }\r\n  return ret;\r\n}\r\nconst alpha = (a, f) => a < 255 ? f(a) : '';\r\nfunction hexString(v) {\r\n  var f = isShort(v) ? h1 : h2;\r\n  return v\r\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\r\n    : undefined;\r\n}\r\n\r\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\r\nfunction hsl2rgbn(h, s, l) {\r\n  const a = s * Math.min(l, 1 - l);\r\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n  return [f(0), f(8), f(4)];\r\n}\r\nfunction hsv2rgbn(h, s, v) {\r\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\r\n  return [f(5), f(3), f(1)];\r\n}\r\nfunction hwb2rgbn(h, w, b) {\r\n  const rgb = hsl2rgbn(h, 1, 0.5);\r\n  let i;\r\n  if (w + b > 1) {\r\n    i = 1 / (w + b);\r\n    w *= i;\r\n    b *= i;\r\n  }\r\n  for (i = 0; i < 3; i++) {\r\n    rgb[i] *= 1 - w - b;\r\n    rgb[i] += w;\r\n  }\r\n  return rgb;\r\n}\r\nfunction hueValue(r, g, b, d, max) {\r\n  if (r === max) {\r\n    return ((g - b) / d) + (g < b ? 6 : 0);\r\n  }\r\n  if (g === max) {\r\n    return (b - r) / d + 2;\r\n  }\r\n  return (r - g) / d + 4;\r\n}\r\nfunction rgb2hsl(v) {\r\n  const range = 255;\r\n  const r = v.r / range;\r\n  const g = v.g / range;\r\n  const b = v.b / range;\r\n  const max = Math.max(r, g, b);\r\n  const min = Math.min(r, g, b);\r\n  const l = (max + min) / 2;\r\n  let h, s, d;\r\n  if (max !== min) {\r\n    d = max - min;\r\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n    h = hueValue(r, g, b, d, max);\r\n    h = h * 60 + 0.5;\r\n  }\r\n  return [h | 0, s || 0, l];\r\n}\r\nfunction calln(f, a, b, c) {\r\n  return (\r\n    Array.isArray(a)\r\n      ? f(a[0], a[1], a[2])\r\n      : f(a, b, c)\r\n  ).map(n2b);\r\n}\r\nfunction hsl2rgb(h, s, l) {\r\n  return calln(hsl2rgbn, h, s, l);\r\n}\r\nfunction hwb2rgb(h, w, b) {\r\n  return calln(hwb2rgbn, h, w, b);\r\n}\r\nfunction hsv2rgb(h, s, v) {\r\n  return calln(hsv2rgbn, h, s, v);\r\n}\r\nfunction hue(h) {\r\n  return (h % 360 + 360) % 360;\r\n}\r\nfunction hueParse(str) {\r\n  const m = HUE_RE.exec(str);\r\n  let a = 255;\r\n  let v;\r\n  if (!m) {\r\n    return;\r\n  }\r\n  if (m[5] !== v) {\r\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\r\n  }\r\n  const h = hue(+m[2]);\r\n  const p1 = +m[3] / 100;\r\n  const p2 = +m[4] / 100;\r\n  if (m[1] === 'hwb') {\r\n    v = hwb2rgb(h, p1, p2);\r\n  } else if (m[1] === 'hsv') {\r\n    v = hsv2rgb(h, p1, p2);\r\n  } else {\r\n    v = hsl2rgb(h, p1, p2);\r\n  }\r\n  return {\r\n    r: v[0],\r\n    g: v[1],\r\n    b: v[2],\r\n    a: a\r\n  };\r\n}\r\nfunction rotate(v, deg) {\r\n  var h = rgb2hsl(v);\r\n  h[0] = hue(h[0] + deg);\r\n  h = hsl2rgb(h);\r\n  v.r = h[0];\r\n  v.g = h[1];\r\n  v.b = h[2];\r\n}\r\nfunction hslString(v) {\r\n  if (!v) {\r\n    return;\r\n  }\r\n  const a = rgb2hsl(v);\r\n  const h = a[0];\r\n  const s = n2p(a[1]);\r\n  const l = n2p(a[2]);\r\n  return v.a < 255\r\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\r\n    : `hsl(${h}, ${s}%, ${l}%)`;\r\n}\r\n\r\nconst map = {\r\n  x: 'dark',\r\n  Z: 'light',\r\n  Y: 're',\r\n  X: 'blu',\r\n  W: 'gr',\r\n  V: 'medium',\r\n  U: 'slate',\r\n  A: 'ee',\r\n  T: 'ol',\r\n  S: 'or',\r\n  B: 'ra',\r\n  C: 'lateg',\r\n  D: 'ights',\r\n  R: 'in',\r\n  Q: 'turquois',\r\n  E: 'hi',\r\n  P: 'ro',\r\n  O: 'al',\r\n  N: 'le',\r\n  M: 'de',\r\n  L: 'yello',\r\n  F: 'en',\r\n  K: 'ch',\r\n  G: 'arks',\r\n  H: 'ea',\r\n  I: 'ightg',\r\n  J: 'wh'\r\n};\r\nconst names$1 = {\r\n  OiceXe: 'f0f8ff',\r\n  antiquewEte: 'faebd7',\r\n  aqua: 'ffff',\r\n  aquamarRe: '7fffd4',\r\n  azuY: 'f0ffff',\r\n  beige: 'f5f5dc',\r\n  bisque: 'ffe4c4',\r\n  black: '0',\r\n  blanKedOmond: 'ffebcd',\r\n  Xe: 'ff',\r\n  XeviTet: '8a2be2',\r\n  bPwn: 'a52a2a',\r\n  burlywood: 'deb887',\r\n  caMtXe: '5f9ea0',\r\n  KartYuse: '7fff00',\r\n  KocTate: 'd2691e',\r\n  cSO: 'ff7f50',\r\n  cSnflowerXe: '6495ed',\r\n  cSnsilk: 'fff8dc',\r\n  crimson: 'dc143c',\r\n  cyan: 'ffff',\r\n  xXe: '8b',\r\n  xcyan: '8b8b',\r\n  xgTMnPd: 'b8860b',\r\n  xWay: 'a9a9a9',\r\n  xgYF: '6400',\r\n  xgYy: 'a9a9a9',\r\n  xkhaki: 'bdb76b',\r\n  xmagFta: '8b008b',\r\n  xTivegYF: '556b2f',\r\n  xSange: 'ff8c00',\r\n  xScEd: '9932cc',\r\n  xYd: '8b0000',\r\n  xsOmon: 'e9967a',\r\n  xsHgYF: '8fbc8f',\r\n  xUXe: '483d8b',\r\n  xUWay: '2f4f4f',\r\n  xUgYy: '2f4f4f',\r\n  xQe: 'ced1',\r\n  xviTet: '9400d3',\r\n  dAppRk: 'ff1493',\r\n  dApskyXe: 'bfff',\r\n  dimWay: '696969',\r\n  dimgYy: '696969',\r\n  dodgerXe: '1e90ff',\r\n  fiYbrick: 'b22222',\r\n  flSOwEte: 'fffaf0',\r\n  foYstWAn: '228b22',\r\n  fuKsia: 'ff00ff',\r\n  gaRsbSo: 'dcdcdc',\r\n  ghostwEte: 'f8f8ff',\r\n  gTd: 'ffd700',\r\n  gTMnPd: 'daa520',\r\n  Way: '808080',\r\n  gYF: '8000',\r\n  gYFLw: 'adff2f',\r\n  gYy: '808080',\r\n  honeyMw: 'f0fff0',\r\n  hotpRk: 'ff69b4',\r\n  RdianYd: 'cd5c5c',\r\n  Rdigo: '4b0082',\r\n  ivSy: 'fffff0',\r\n  khaki: 'f0e68c',\r\n  lavFMr: 'e6e6fa',\r\n  lavFMrXsh: 'fff0f5',\r\n  lawngYF: '7cfc00',\r\n  NmoncEffon: 'fffacd',\r\n  ZXe: 'add8e6',\r\n  ZcSO: 'f08080',\r\n  Zcyan: 'e0ffff',\r\n  ZgTMnPdLw: 'fafad2',\r\n  ZWay: 'd3d3d3',\r\n  ZgYF: '90ee90',\r\n  ZgYy: 'd3d3d3',\r\n  ZpRk: 'ffb6c1',\r\n  ZsOmon: 'ffa07a',\r\n  ZsHgYF: '20b2aa',\r\n  ZskyXe: '87cefa',\r\n  ZUWay: '778899',\r\n  ZUgYy: '778899',\r\n  ZstAlXe: 'b0c4de',\r\n  ZLw: 'ffffe0',\r\n  lime: 'ff00',\r\n  limegYF: '32cd32',\r\n  lRF: 'faf0e6',\r\n  magFta: 'ff00ff',\r\n  maPon: '800000',\r\n  VaquamarRe: '66cdaa',\r\n  VXe: 'cd',\r\n  VScEd: 'ba55d3',\r\n  VpurpN: '9370db',\r\n  VsHgYF: '3cb371',\r\n  VUXe: '7b68ee',\r\n  VsprRggYF: 'fa9a',\r\n  VQe: '48d1cc',\r\n  VviTetYd: 'c71585',\r\n  midnightXe: '191970',\r\n  mRtcYam: 'f5fffa',\r\n  mistyPse: 'ffe4e1',\r\n  moccasR: 'ffe4b5',\r\n  navajowEte: 'ffdead',\r\n  navy: '80',\r\n  Tdlace: 'fdf5e6',\r\n  Tive: '808000',\r\n  TivedBb: '6b8e23',\r\n  Sange: 'ffa500',\r\n  SangeYd: 'ff4500',\r\n  ScEd: 'da70d6',\r\n  pOegTMnPd: 'eee8aa',\r\n  pOegYF: '98fb98',\r\n  pOeQe: 'afeeee',\r\n  pOeviTetYd: 'db7093',\r\n  papayawEp: 'ffefd5',\r\n  pHKpuff: 'ffdab9',\r\n  peru: 'cd853f',\r\n  pRk: 'ffc0cb',\r\n  plum: 'dda0dd',\r\n  powMrXe: 'b0e0e6',\r\n  purpN: '800080',\r\n  YbeccapurpN: '663399',\r\n  Yd: 'ff0000',\r\n  Psybrown: 'bc8f8f',\r\n  PyOXe: '4169e1',\r\n  saddNbPwn: '8b4513',\r\n  sOmon: 'fa8072',\r\n  sandybPwn: 'f4a460',\r\n  sHgYF: '2e8b57',\r\n  sHshell: 'fff5ee',\r\n  siFna: 'a0522d',\r\n  silver: 'c0c0c0',\r\n  skyXe: '87ceeb',\r\n  UXe: '6a5acd',\r\n  UWay: '708090',\r\n  UgYy: '708090',\r\n  snow: 'fffafa',\r\n  sprRggYF: 'ff7f',\r\n  stAlXe: '4682b4',\r\n  tan: 'd2b48c',\r\n  teO: '8080',\r\n  tEstN: 'd8bfd8',\r\n  tomato: 'ff6347',\r\n  Qe: '40e0d0',\r\n  viTet: 'ee82ee',\r\n  JHt: 'f5deb3',\r\n  wEte: 'ffffff',\r\n  wEtesmoke: 'f5f5f5',\r\n  Lw: 'ffff00',\r\n  LwgYF: '9acd32'\r\n};\r\nfunction unpack() {\r\n  const unpacked = {};\r\n  const keys = Object.keys(names$1);\r\n  const tkeys = Object.keys(map);\r\n  let i, j, k, ok, nk;\r\n  for (i = 0; i < keys.length; i++) {\r\n    ok = nk = keys[i];\r\n    for (j = 0; j < tkeys.length; j++) {\r\n      k = tkeys[j];\r\n      nk = nk.replace(k, map[k]);\r\n    }\r\n    k = parseInt(names$1[ok], 16);\r\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\r\n  }\r\n  return unpacked;\r\n}\r\n\r\nlet names;\r\nfunction nameParse(str) {\r\n  if (!names) {\r\n    names = unpack();\r\n    names.transparent = [0, 0, 0, 0];\r\n  }\r\n  const a = names[str.toLowerCase()];\r\n  return a && {\r\n    r: a[0],\r\n    g: a[1],\r\n    b: a[2],\r\n    a: a.length === 4 ? a[3] : 255\r\n  };\r\n}\r\n\r\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\r\nfunction rgbParse(str) {\r\n  const m = RGB_RE.exec(str);\r\n  let a = 255;\r\n  let r, g, b;\r\n  if (!m) {\r\n    return;\r\n  }\r\n  if (m[7] !== r) {\r\n    const v = +m[7];\r\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\r\n  }\r\n  r = +m[1];\r\n  g = +m[3];\r\n  b = +m[5];\r\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\r\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\r\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\r\n  return {\r\n    r: r,\r\n    g: g,\r\n    b: b,\r\n    a: a\r\n  };\r\n}\r\nfunction rgbString(v) {\r\n  return v && (\r\n    v.a < 255\r\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\r\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\r\n  );\r\n}\r\n\r\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\r\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\r\nfunction interpolate(rgb1, rgb2, t) {\r\n  const r = from(b2n(rgb1.r));\r\n  const g = from(b2n(rgb1.g));\r\n  const b = from(b2n(rgb1.b));\r\n  return {\r\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\r\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\r\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\r\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\r\n  };\r\n}\r\n\r\nfunction modHSL(v, i, ratio) {\r\n  if (v) {\r\n    let tmp = rgb2hsl(v);\r\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\r\n    tmp = hsl2rgb(tmp);\r\n    v.r = tmp[0];\r\n    v.g = tmp[1];\r\n    v.b = tmp[2];\r\n  }\r\n}\r\nfunction clone(v, proto) {\r\n  return v ? Object.assign(proto || {}, v) : v;\r\n}\r\nfunction fromObject(input) {\r\n  var v = {r: 0, g: 0, b: 0, a: 255};\r\n  if (Array.isArray(input)) {\r\n    if (input.length >= 3) {\r\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\r\n      if (input.length > 3) {\r\n        v.a = n2b(input[3]);\r\n      }\r\n    }\r\n  } else {\r\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\r\n    v.a = n2b(v.a);\r\n  }\r\n  return v;\r\n}\r\nfunction functionParse(str) {\r\n  if (str.charAt(0) === 'r') {\r\n    return rgbParse(str);\r\n  }\r\n  return hueParse(str);\r\n}\r\nclass Color {\r\n  constructor(input) {\r\n    if (input instanceof Color) {\r\n      return input;\r\n    }\r\n    const type = typeof input;\r\n    let v;\r\n    if (type === 'object') {\r\n      v = fromObject(input);\r\n    } else if (type === 'string') {\r\n      v = hexParse(input) || nameParse(input) || functionParse(input);\r\n    }\r\n    this._rgb = v;\r\n    this._valid = !!v;\r\n  }\r\n  get valid() {\r\n    return this._valid;\r\n  }\r\n  get rgb() {\r\n    var v = clone(this._rgb);\r\n    if (v) {\r\n      v.a = b2n(v.a);\r\n    }\r\n    return v;\r\n  }\r\n  set rgb(obj) {\r\n    this._rgb = fromObject(obj);\r\n  }\r\n  rgbString() {\r\n    return this._valid ? rgbString(this._rgb) : undefined;\r\n  }\r\n  hexString() {\r\n    return this._valid ? hexString(this._rgb) : undefined;\r\n  }\r\n  hslString() {\r\n    return this._valid ? hslString(this._rgb) : undefined;\r\n  }\r\n  mix(color, weight) {\r\n    if (color) {\r\n      const c1 = this.rgb;\r\n      const c2 = color.rgb;\r\n      let w2;\r\n      const p = weight === w2 ? 0.5 : weight;\r\n      const w = 2 * p - 1;\r\n      const a = c1.a - c2.a;\r\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\r\n      w2 = 1 - w1;\r\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\r\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\r\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\r\n      c1.a = p * c1.a + (1 - p) * c2.a;\r\n      this.rgb = c1;\r\n    }\r\n    return this;\r\n  }\r\n  interpolate(color, t) {\r\n    if (color) {\r\n      this._rgb = interpolate(this._rgb, color._rgb, t);\r\n    }\r\n    return this;\r\n  }\r\n  clone() {\r\n    return new Color(this.rgb);\r\n  }\r\n  alpha(a) {\r\n    this._rgb.a = n2b(a);\r\n    return this;\r\n  }\r\n  clearer(ratio) {\r\n    const rgb = this._rgb;\r\n    rgb.a *= 1 - ratio;\r\n    return this;\r\n  }\r\n  greyscale() {\r\n    const rgb = this._rgb;\r\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\r\n    rgb.r = rgb.g = rgb.b = val;\r\n    return this;\r\n  }\r\n  opaquer(ratio) {\r\n    const rgb = this._rgb;\r\n    rgb.a *= 1 + ratio;\r\n    return this;\r\n  }\r\n  negate() {\r\n    const v = this._rgb;\r\n    v.r = 255 - v.r;\r\n    v.g = 255 - v.g;\r\n    v.b = 255 - v.b;\r\n    return this;\r\n  }\r\n  lighten(ratio) {\r\n    modHSL(this._rgb, 2, ratio);\r\n    return this;\r\n  }\r\n  darken(ratio) {\r\n    modHSL(this._rgb, 2, -ratio);\r\n    return this;\r\n  }\r\n  saturate(ratio) {\r\n    modHSL(this._rgb, 1, ratio);\r\n    return this;\r\n  }\r\n  desaturate(ratio) {\r\n    modHSL(this._rgb, 1, -ratio);\r\n    return this;\r\n  }\r\n  rotate(deg) {\r\n    rotate(this._rgb, deg);\r\n    return this;\r\n  }\r\n}\r\n\r\nfunction index_esm(input) {\r\n  return new Color(input);\r\n}\r\n\r\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\r\n", "/*!\r\n * Chart.js v4.4.1\r\n * https://www.chartjs.org\r\n * (c) 2023 Chart.js Contributors\r\n * Released under the MIT License\r\n */\r\nimport { Color } from '@kurkle/color';\r\n\r\n/**\r\n * @namespace Chart.helpers\r\n */ /**\r\n * An empty function that can be used, for example, for optional callback.\r\n */ function noop() {\r\n/* noop */ }\r\n/**\r\n * Returns a unique id, sequentially generated from a global variable.\r\n */ const uid = (()=>{\r\n    let id = 0;\r\n    return ()=>id++;\r\n})();\r\n/**\r\n * Returns true if `value` is neither null nor undefined, else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */ function isNullOrUndef(value) {\r\n    return value === null || typeof value === 'undefined';\r\n}\r\n/**\r\n * Returns true if `value` is an array (including typed arrays), else returns false.\r\n * @param value - The value to test.\r\n * @function\r\n */ function isArray(value) {\r\n    if (Array.isArray && Array.isArray(value)) {\r\n        return true;\r\n    }\r\n    const type = Object.prototype.toString.call(value);\r\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Returns true if `value` is an object (excluding null), else returns false.\r\n * @param value - The value to test.\r\n * @since 2.7.0\r\n */ function isObject(value) {\r\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\r\n}\r\n/**\r\n * Returns true if `value` is a finite number, else returns false\r\n * @param value  - The value to test.\r\n */ function isNumberFinite(value) {\r\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\r\n}\r\n/**\r\n * Returns `value` if finite, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is not finite.\r\n */ function finiteOrDefault(value, defaultValue) {\r\n    return isNumberFinite(value) ? value : defaultValue;\r\n}\r\n/**\r\n * Returns `value` if defined, else returns `defaultValue`.\r\n * @param value - The value to return if defined.\r\n * @param defaultValue - The value to return if `value` is undefined.\r\n */ function valueOrDefault(value, defaultValue) {\r\n    return typeof value === 'undefined' ? defaultValue : value;\r\n}\r\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\r\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\r\n/**\r\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\r\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\r\n * @param fn - The function to call.\r\n * @param args - The arguments with which `fn` should be called.\r\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\r\n */ function callback(fn, args, thisArg) {\r\n    if (fn && typeof fn.call === 'function') {\r\n        return fn.apply(thisArg, args);\r\n    }\r\n}\r\nfunction each(loopable, fn, thisArg, reverse) {\r\n    let i, len, keys;\r\n    if (isArray(loopable)) {\r\n        len = loopable.length;\r\n        if (reverse) {\r\n            for(i = len - 1; i >= 0; i--){\r\n                fn.call(thisArg, loopable[i], i);\r\n            }\r\n        } else {\r\n            for(i = 0; i < len; i++){\r\n                fn.call(thisArg, loopable[i], i);\r\n            }\r\n        }\r\n    } else if (isObject(loopable)) {\r\n        keys = Object.keys(loopable);\r\n        len = keys.length;\r\n        for(i = 0; i < len; i++){\r\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\r\n * @param a0 - The array to compare\r\n * @param a1 - The array to compare\r\n * @private\r\n */ function _elementsEqual(a0, a1) {\r\n    let i, ilen, v0, v1;\r\n    if (!a0 || !a1 || a0.length !== a1.length) {\r\n        return false;\r\n    }\r\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\r\n        v0 = a0[i];\r\n        v1 = a1[i];\r\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Returns a deep copy of `source` without keeping references on objects and arrays.\r\n * @param source - The value to clone.\r\n */ function clone(source) {\r\n    if (isArray(source)) {\r\n        return source.map(clone);\r\n    }\r\n    if (isObject(source)) {\r\n        const target = Object.create(null);\r\n        const keys = Object.keys(source);\r\n        const klen = keys.length;\r\n        let k = 0;\r\n        for(; k < klen; ++k){\r\n            target[keys[k]] = clone(source[keys[k]]);\r\n        }\r\n        return target;\r\n    }\r\n    return source;\r\n}\r\nfunction isValidKey(key) {\r\n    return [\r\n        '__proto__',\r\n        'prototype',\r\n        'constructor'\r\n    ].indexOf(key) === -1;\r\n}\r\n/**\r\n * The default merger when Chart.helpers.merge is called without merger option.\r\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\r\n * @private\r\n */ function _merger(key, target, source, options) {\r\n    if (!isValidKey(key)) {\r\n        return;\r\n    }\r\n    const tval = target[key];\r\n    const sval = source[key];\r\n    if (isObject(tval) && isObject(sval)) {\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        merge(tval, sval, options);\r\n    } else {\r\n        target[key] = clone(sval);\r\n    }\r\n}\r\nfunction merge(target, source, options) {\r\n    const sources = isArray(source) ? source : [\r\n        source\r\n    ];\r\n    const ilen = sources.length;\r\n    if (!isObject(target)) {\r\n        return target;\r\n    }\r\n    options = options || {};\r\n    const merger = options.merger || _merger;\r\n    let current;\r\n    for(let i = 0; i < ilen; ++i){\r\n        current = sources[i];\r\n        if (!isObject(current)) {\r\n            continue;\r\n        }\r\n        const keys = Object.keys(current);\r\n        for(let k = 0, klen = keys.length; k < klen; ++k){\r\n            merger(keys[k], target, current, options);\r\n        }\r\n    }\r\n    return target;\r\n}\r\nfunction mergeIf(target, source) {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    return merge(target, source, {\r\n        merger: _mergerIf\r\n    });\r\n}\r\n/**\r\n * Merges source[key] in target[key] only if target[key] is undefined.\r\n * @private\r\n */ function _mergerIf(key, target, source) {\r\n    if (!isValidKey(key)) {\r\n        return;\r\n    }\r\n    const tval = target[key];\r\n    const sval = source[key];\r\n    if (isObject(tval) && isObject(sval)) {\r\n        mergeIf(tval, sval);\r\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\r\n        target[key] = clone(sval);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */ function _deprecated(scope, value, previous, current) {\r\n    if (value !== undefined) {\r\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\r\n    }\r\n}\r\n// resolveObjectKey resolver cache\r\nconst keyResolvers = {\r\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\r\n    '': (v)=>v,\r\n    // default resolvers\r\n    x: (o)=>o.x,\r\n    y: (o)=>o.y\r\n};\r\n/**\r\n * @private\r\n */ function _splitKey(key) {\r\n    const parts = key.split('.');\r\n    const keys = [];\r\n    let tmp = '';\r\n    for (const part of parts){\r\n        tmp += part;\r\n        if (tmp.endsWith('\\\\')) {\r\n            tmp = tmp.slice(0, -1) + '.';\r\n        } else {\r\n            keys.push(tmp);\r\n            tmp = '';\r\n        }\r\n    }\r\n    return keys;\r\n}\r\nfunction _getKeyResolver(key) {\r\n    const keys = _splitKey(key);\r\n    return (obj)=>{\r\n        for (const k of keys){\r\n            if (k === '') {\r\n                break;\r\n            }\r\n            obj = obj && obj[k];\r\n        }\r\n        return obj;\r\n    };\r\n}\r\nfunction resolveObjectKey(obj, key) {\r\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\r\n    return resolver(obj);\r\n}\r\n/**\r\n * @private\r\n */ function _capitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\nconst defined = (value)=>typeof value !== 'undefined';\r\nconst isFunction = (value)=>typeof value === 'function';\r\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\r\nconst setsEqual = (a, b)=>{\r\n    if (a.size !== b.size) {\r\n        return false;\r\n    }\r\n    for (const item of a){\r\n        if (!b.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n/**\r\n * @param e - The event\r\n * @private\r\n */ function _isClickEvent(e) {\r\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\r\n}\r\n\r\n/**\r\n * @alias Chart.helpers.math\r\n * @namespace\r\n */ const PI = Math.PI;\r\nconst TAU = 2 * PI;\r\nconst PITAU = TAU + PI;\r\nconst INFINITY = Number.POSITIVE_INFINITY;\r\nconst RAD_PER_DEG = PI / 180;\r\nconst HALF_PI = PI / 2;\r\nconst QUARTER_PI = PI / 4;\r\nconst TWO_THIRDS_PI = PI * 2 / 3;\r\nconst log10 = Math.log10;\r\nconst sign = Math.sign;\r\nfunction almostEquals(x, y, epsilon) {\r\n    return Math.abs(x - y) < epsilon;\r\n}\r\n/**\r\n * Implementation of the nice number algorithm used in determining where axis labels will go\r\n */ function niceNum(range) {\r\n    const roundedRange = Math.round(range);\r\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\r\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\r\n    const fraction = range / niceRange;\r\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\r\n    return niceFraction * niceRange;\r\n}\r\n/**\r\n * Returns an array of factors sorted from 1 to sqrt(value)\r\n * @private\r\n */ function _factorize(value) {\r\n    const result = [];\r\n    const sqrt = Math.sqrt(value);\r\n    let i;\r\n    for(i = 1; i < sqrt; i++){\r\n        if (value % i === 0) {\r\n            result.push(i);\r\n            result.push(value / i);\r\n        }\r\n    }\r\n    if (sqrt === (sqrt | 0)) {\r\n        result.push(sqrt);\r\n    }\r\n    result.sort((a, b)=>a - b).pop();\r\n    return result;\r\n}\r\nfunction isNumber(n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\nfunction almostWhole(x, epsilon) {\r\n    const rounded = Math.round(x);\r\n    return rounded - epsilon <= x && rounded + epsilon >= x;\r\n}\r\n/**\r\n * @private\r\n */ function _setMinAndMaxByKey(array, target, property) {\r\n    let i, ilen, value;\r\n    for(i = 0, ilen = array.length; i < ilen; i++){\r\n        value = array[i][property];\r\n        if (!isNaN(value)) {\r\n            target.min = Math.min(target.min, value);\r\n            target.max = Math.max(target.max, value);\r\n        }\r\n    }\r\n}\r\nfunction toRadians(degrees) {\r\n    return degrees * (PI / 180);\r\n}\r\nfunction toDegrees(radians) {\r\n    return radians * (180 / PI);\r\n}\r\n/**\r\n * Returns the number of decimal places\r\n * i.e. the number of digits after the decimal point, of the value of this Number.\r\n * @param x - A number.\r\n * @returns The number of decimal places.\r\n * @private\r\n */ function _decimalPlaces(x) {\r\n    if (!isNumberFinite(x)) {\r\n        return;\r\n    }\r\n    let e = 1;\r\n    let p = 0;\r\n    while(Math.round(x * e) / e !== x){\r\n        e *= 10;\r\n        p++;\r\n    }\r\n    return p;\r\n}\r\n// Gets the angle from vertical upright to the point about a centre.\r\nfunction getAngleFromPoint(centrePoint, anglePoint) {\r\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\r\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\r\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\r\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\r\n    if (angle < -0.5 * PI) {\r\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\r\n    }\r\n    return {\r\n        angle,\r\n        distance: radialDistanceFromCenter\r\n    };\r\n}\r\nfunction distanceBetweenPoints(pt1, pt2) {\r\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\r\n}\r\n/**\r\n * Shortest distance between angles, in either direction.\r\n * @private\r\n */ function _angleDiff(a, b) {\r\n    return (a - b + PITAU) % TAU - PI;\r\n}\r\n/**\r\n * Normalize angle to be between 0 and 2*PI\r\n * @private\r\n */ function _normalizeAngle(a) {\r\n    return (a % TAU + TAU) % TAU;\r\n}\r\n/**\r\n * @private\r\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\r\n    const a = _normalizeAngle(angle);\r\n    const s = _normalizeAngle(start);\r\n    const e = _normalizeAngle(end);\r\n    const angleToStart = _normalizeAngle(s - a);\r\n    const angleToEnd = _normalizeAngle(e - a);\r\n    const startToAngle = _normalizeAngle(a - s);\r\n    const endToAngle = _normalizeAngle(a - e);\r\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\r\n}\r\n/**\r\n * Limit `value` between `min` and `max`\r\n * @param value\r\n * @param min\r\n * @param max\r\n * @private\r\n */ function _limitValue(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n/**\r\n * @param {number} value\r\n * @private\r\n */ function _int16Range(value) {\r\n    return _limitValue(value, -32768, 32767);\r\n}\r\n/**\r\n * @param value\r\n * @param start\r\n * @param end\r\n * @param [epsilon]\r\n * @private\r\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\r\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\r\n}\r\n\r\nfunction _lookup(table, value, cmp) {\r\n    cmp = cmp || ((index)=>table[index] < value);\r\n    let hi = table.length - 1;\r\n    let lo = 0;\r\n    let mid;\r\n    while(hi - lo > 1){\r\n        mid = lo + hi >> 1;\r\n        if (cmp(mid)) {\r\n            lo = mid;\r\n        } else {\r\n            hi = mid;\r\n        }\r\n    }\r\n    return {\r\n        lo,\r\n        hi\r\n    };\r\n}\r\n/**\r\n * Binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @param last - lookup last index\r\n * @private\r\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\r\n        const ti = table[index][key];\r\n        return ti < value || ti === value && table[index + 1][key] === value;\r\n    } : (index)=>table[index][key] < value);\r\n/**\r\n * Reverse binary search\r\n * @param table - the table search. must be sorted!\r\n * @param key - property name for the value in each entry\r\n * @param value - value to find\r\n * @private\r\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\r\n/**\r\n * Return subset of `values` between `min` and `max` inclusive.\r\n * Values are assumed to be in sorted order.\r\n * @param values - sorted array of values\r\n * @param min - min value\r\n * @param max - max value\r\n */ function _filterBetween(values, min, max) {\r\n    let start = 0;\r\n    let end = values.length;\r\n    while(start < end && values[start] < min){\r\n        start++;\r\n    }\r\n    while(end > start && values[end - 1] > max){\r\n        end--;\r\n    }\r\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\r\n}\r\nconst arrayEvents = [\r\n    'push',\r\n    'pop',\r\n    'shift',\r\n    'splice',\r\n    'unshift'\r\n];\r\nfunction listenArrayEvents(array, listener) {\r\n    if (array._chartjs) {\r\n        array._chartjs.listeners.push(listener);\r\n        return;\r\n    }\r\n    Object.defineProperty(array, '_chartjs', {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value: {\r\n            listeners: [\r\n                listener\r\n            ]\r\n        }\r\n    });\r\n    arrayEvents.forEach((key)=>{\r\n        const method = '_onData' + _capitalize(key);\r\n        const base = array[key];\r\n        Object.defineProperty(array, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            value (...args) {\r\n                const res = base.apply(this, args);\r\n                array._chartjs.listeners.forEach((object)=>{\r\n                    if (typeof object[method] === 'function') {\r\n                        object[method](...args);\r\n                    }\r\n                });\r\n                return res;\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction unlistenArrayEvents(array, listener) {\r\n    const stub = array._chartjs;\r\n    if (!stub) {\r\n        return;\r\n    }\r\n    const listeners = stub.listeners;\r\n    const index = listeners.indexOf(listener);\r\n    if (index !== -1) {\r\n        listeners.splice(index, 1);\r\n    }\r\n    if (listeners.length > 0) {\r\n        return;\r\n    }\r\n    arrayEvents.forEach((key)=>{\r\n        delete array[key];\r\n    });\r\n    delete array._chartjs;\r\n}\r\n/**\r\n * @param items\r\n */ function _arrayUnique(items) {\r\n    const set = new Set(items);\r\n    if (set.size === items.length) {\r\n        return items;\r\n    }\r\n    return Array.from(set);\r\n}\r\n\r\nfunction fontString(pixelSize, fontStyle, fontFamily) {\r\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\r\n}\r\n/**\r\n* Request animation polyfill\r\n*/ const requestAnimFrame = function() {\r\n    if (typeof window === 'undefined') {\r\n        return function(callback) {\r\n            return callback();\r\n        };\r\n    }\r\n    return window.requestAnimationFrame;\r\n}();\r\n/**\r\n * Throttles calling `fn` once per animation frame\r\n * Latest arguments are used on the actual call\r\n */ function throttled(fn, thisArg) {\r\n    let argsToUse = [];\r\n    let ticking = false;\r\n    return function(...args) {\r\n        // Save the args for use later\r\n        argsToUse = args;\r\n        if (!ticking) {\r\n            ticking = true;\r\n            requestAnimFrame.call(window, ()=>{\r\n                ticking = false;\r\n                fn.apply(thisArg, argsToUse);\r\n            });\r\n        }\r\n    };\r\n}\r\n/**\r\n * Debounces calling `fn` for `delay` ms\r\n */ function debounce(fn, delay) {\r\n    let timeout;\r\n    return function(...args) {\r\n        if (delay) {\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(fn, delay, args);\r\n        } else {\r\n            fn.apply(this, args);\r\n        }\r\n        return delay;\r\n    };\r\n}\r\n/**\r\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\r\n * @private\r\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\r\n/**\r\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\r\n * @private\r\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\r\n/**\r\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\r\n * @private\r\n */ const _textX = (align, left, right, rtl)=>{\r\n    const check = rtl ? 'left' : 'right';\r\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\r\n};\r\n/**\r\n * Return start and count of visible points.\r\n * @private\r\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\r\n    const pointCount = points.length;\r\n    let start = 0;\r\n    let count = pointCount;\r\n    if (meta._sorted) {\r\n        const { iScale , _parsed  } = meta;\r\n        const axis = iScale.axis;\r\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\r\n        if (minDefined) {\r\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\r\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\r\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\r\n        }\r\n        if (maxDefined) {\r\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\r\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\r\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\r\n        } else {\r\n            count = pointCount - start;\r\n        }\r\n    }\r\n    return {\r\n        start,\r\n        count\r\n    };\r\n}\r\n/**\r\n * Checks if the scale ranges have changed.\r\n * @param {object} meta - dataset meta.\r\n * @returns {boolean}\r\n * @private\r\n */ function _scaleRangesChanged(meta) {\r\n    const { xScale , yScale , _scaleRanges  } = meta;\r\n    const newRanges = {\r\n        xmin: xScale.min,\r\n        xmax: xScale.max,\r\n        ymin: yScale.min,\r\n        ymax: yScale.max\r\n    };\r\n    if (!_scaleRanges) {\r\n        meta._scaleRanges = newRanges;\r\n        return true;\r\n    }\r\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\r\n    Object.assign(_scaleRanges, newRanges);\r\n    return changed;\r\n}\r\n\r\nconst atEdge = (t)=>t === 0 || t === 1;\r\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\r\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\r\n/**\r\n * Easing functions adapted from Robert Penner's easing equations.\r\n * @namespace Chart.helpers.easing.effects\r\n * @see http://www.robertpenner.com/easing/\r\n */ const effects = {\r\n    linear: (t)=>t,\r\n    easeInQuad: (t)=>t * t,\r\n    easeOutQuad: (t)=>-t * (t - 2),\r\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\r\n    easeInCubic: (t)=>t * t * t,\r\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\r\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\r\n    easeInQuart: (t)=>t * t * t * t,\r\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\r\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\r\n    easeInQuint: (t)=>t * t * t * t * t,\r\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\r\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\r\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\r\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\r\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\r\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\r\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\r\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\r\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\r\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\r\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\r\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\r\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\r\n    easeInOutElastic (t) {\r\n        const s = 0.1125;\r\n        const p = 0.45;\r\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\r\n    },\r\n    easeInBack (t) {\r\n        const s = 1.70158;\r\n        return t * t * ((s + 1) * t - s);\r\n    },\r\n    easeOutBack (t) {\r\n        const s = 1.70158;\r\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\r\n    },\r\n    easeInOutBack (t) {\r\n        let s = 1.70158;\r\n        if ((t /= 0.5) < 1) {\r\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\r\n        }\r\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\r\n    },\r\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\r\n    easeOutBounce (t) {\r\n        const m = 7.5625;\r\n        const d = 2.75;\r\n        if (t < 1 / d) {\r\n            return m * t * t;\r\n        }\r\n        if (t < 2 / d) {\r\n            return m * (t -= 1.5 / d) * t + 0.75;\r\n        }\r\n        if (t < 2.5 / d) {\r\n            return m * (t -= 2.25 / d) * t + 0.9375;\r\n        }\r\n        return m * (t -= 2.625 / d) * t + 0.984375;\r\n    },\r\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\r\n};\r\n\r\nfunction isPatternOrGradient(value) {\r\n    if (value && typeof value === 'object') {\r\n        const type = value.toString();\r\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\r\n    }\r\n    return false;\r\n}\r\nfunction color(value) {\r\n    return isPatternOrGradient(value) ? value : new Color(value);\r\n}\r\nfunction getHoverColor(value) {\r\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\r\n}\r\n\r\nconst numbers = [\r\n    'x',\r\n    'y',\r\n    'borderWidth',\r\n    'radius',\r\n    'tension'\r\n];\r\nconst colors = [\r\n    'color',\r\n    'borderColor',\r\n    'backgroundColor'\r\n];\r\nfunction applyAnimationsDefaults(defaults) {\r\n    defaults.set('animation', {\r\n        delay: undefined,\r\n        duration: 1000,\r\n        easing: 'easeOutQuart',\r\n        fn: undefined,\r\n        from: undefined,\r\n        loop: undefined,\r\n        to: undefined,\r\n        type: undefined\r\n    });\r\n    defaults.describe('animation', {\r\n        _fallback: false,\r\n        _indexable: false,\r\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\r\n    });\r\n    defaults.set('animations', {\r\n        colors: {\r\n            type: 'color',\r\n            properties: colors\r\n        },\r\n        numbers: {\r\n            type: 'number',\r\n            properties: numbers\r\n        }\r\n    });\r\n    defaults.describe('animations', {\r\n        _fallback: 'animation'\r\n    });\r\n    defaults.set('transitions', {\r\n        active: {\r\n            animation: {\r\n                duration: 400\r\n            }\r\n        },\r\n        resize: {\r\n            animation: {\r\n                duration: 0\r\n            }\r\n        },\r\n        show: {\r\n            animations: {\r\n                colors: {\r\n                    from: 'transparent'\r\n                },\r\n                visible: {\r\n                    type: 'boolean',\r\n                    duration: 0\r\n                }\r\n            }\r\n        },\r\n        hide: {\r\n            animations: {\r\n                colors: {\r\n                    to: 'transparent'\r\n                },\r\n                visible: {\r\n                    type: 'boolean',\r\n                    easing: 'linear',\r\n                    fn: (v)=>v | 0\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction applyLayoutsDefaults(defaults) {\r\n    defaults.set('layout', {\r\n        autoPadding: true,\r\n        padding: {\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            left: 0\r\n        }\r\n    });\r\n}\r\n\r\nconst intlCache = new Map();\r\nfunction getNumberFormat(locale, options) {\r\n    options = options || {};\r\n    const cacheKey = locale + JSON.stringify(options);\r\n    let formatter = intlCache.get(cacheKey);\r\n    if (!formatter) {\r\n        formatter = new Intl.NumberFormat(locale, options);\r\n        intlCache.set(cacheKey, formatter);\r\n    }\r\n    return formatter;\r\n}\r\nfunction formatNumber(num, locale, options) {\r\n    return getNumberFormat(locale, options).format(num);\r\n}\r\n\r\nconst formatters = {\r\n values (value) {\r\n        return isArray(value) ?  value : '' + value;\r\n    },\r\n numeric (tickValue, index, ticks) {\r\n        if (tickValue === 0) {\r\n            return '0';\r\n        }\r\n        const locale = this.chart.options.locale;\r\n        let notation;\r\n        let delta = tickValue;\r\n        if (ticks.length > 1) {\r\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\r\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\r\n                notation = 'scientific';\r\n            }\r\n            delta = calculateDelta(tickValue, ticks);\r\n        }\r\n        const logDelta = log10(Math.abs(delta));\r\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\r\n        const options = {\r\n            notation,\r\n            minimumFractionDigits: numDecimal,\r\n            maximumFractionDigits: numDecimal\r\n        };\r\n        Object.assign(options, this.options.ticks.format);\r\n        return formatNumber(tickValue, locale, options);\r\n    },\r\n logarithmic (tickValue, index, ticks) {\r\n        if (tickValue === 0) {\r\n            return '0';\r\n        }\r\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\r\n        if ([\r\n            1,\r\n            2,\r\n            3,\r\n            5,\r\n            10,\r\n            15\r\n        ].includes(remain) || index > 0.8 * ticks.length) {\r\n            return formatters.numeric.call(this, tickValue, index, ticks);\r\n        }\r\n        return '';\r\n    }\r\n};\r\nfunction calculateDelta(tickValue, ticks) {\r\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\r\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\r\n        delta = tickValue - Math.floor(tickValue);\r\n    }\r\n    return delta;\r\n}\r\n var Ticks = {\r\n    formatters\r\n};\r\n\r\nfunction applyScaleDefaults(defaults) {\r\n    defaults.set('scale', {\r\n        display: true,\r\n        offset: false,\r\n        reverse: false,\r\n        beginAtZero: false,\r\n bounds: 'ticks',\r\n        clip: true,\r\n grace: 0,\r\n        grid: {\r\n            display: true,\r\n            lineWidth: 1,\r\n            drawOnChartArea: true,\r\n            drawTicks: true,\r\n            tickLength: 8,\r\n            tickWidth: (_ctx, options)=>options.lineWidth,\r\n            tickColor: (_ctx, options)=>options.color,\r\n            offset: false\r\n        },\r\n        border: {\r\n            display: true,\r\n            dash: [],\r\n            dashOffset: 0.0,\r\n            width: 1\r\n        },\r\n        title: {\r\n            display: false,\r\n            text: '',\r\n            padding: {\r\n                top: 4,\r\n                bottom: 4\r\n            }\r\n        },\r\n        ticks: {\r\n            minRotation: 0,\r\n            maxRotation: 50,\r\n            mirror: false,\r\n            textStrokeWidth: 0,\r\n            textStrokeColor: '',\r\n            padding: 3,\r\n            display: true,\r\n            autoSkip: true,\r\n            autoSkipPadding: 3,\r\n            labelOffset: 0,\r\n            callback: Ticks.formatters.values,\r\n            minor: {},\r\n            major: {},\r\n            align: 'center',\r\n            crossAlign: 'near',\r\n            showLabelBackdrop: false,\r\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\r\n            backdropPadding: 2\r\n        }\r\n    });\r\n    defaults.route('scale.ticks', 'color', '', 'color');\r\n    defaults.route('scale.grid', 'color', '', 'borderColor');\r\n    defaults.route('scale.border', 'color', '', 'borderColor');\r\n    defaults.route('scale.title', 'color', '', 'color');\r\n    defaults.describe('scale', {\r\n        _fallback: false,\r\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\r\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\r\n    });\r\n    defaults.describe('scales', {\r\n        _fallback: 'scale'\r\n    });\r\n    defaults.describe('scale.ticks', {\r\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\r\n        _indexable: (name)=>name !== 'backdropPadding'\r\n    });\r\n}\r\n\r\nconst overrides = Object.create(null);\r\nconst descriptors = Object.create(null);\r\n function getScope$1(node, key) {\r\n    if (!key) {\r\n        return node;\r\n    }\r\n    const keys = key.split('.');\r\n    for(let i = 0, n = keys.length; i < n; ++i){\r\n        const k = keys[i];\r\n        node = node[k] || (node[k] = Object.create(null));\r\n    }\r\n    return node;\r\n}\r\nfunction set(root, scope, values) {\r\n    if (typeof scope === 'string') {\r\n        return merge(getScope$1(root, scope), values);\r\n    }\r\n    return merge(getScope$1(root, ''), scope);\r\n}\r\n class Defaults {\r\n    constructor(_descriptors, _appliers){\r\n        this.animation = undefined;\r\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\r\n        this.borderColor = 'rgba(0,0,0,0.1)';\r\n        this.color = '#666';\r\n        this.datasets = {};\r\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\r\n        this.elements = {};\r\n        this.events = [\r\n            'mousemove',\r\n            'mouseout',\r\n            'click',\r\n            'touchstart',\r\n            'touchmove'\r\n        ];\r\n        this.font = {\r\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\r\n            size: 12,\r\n            style: 'normal',\r\n            lineHeight: 1.2,\r\n            weight: null\r\n        };\r\n        this.hover = {};\r\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\r\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\r\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\r\n        this.indexAxis = 'x';\r\n        this.interaction = {\r\n            mode: 'nearest',\r\n            intersect: true,\r\n            includeInvisible: false\r\n        };\r\n        this.maintainAspectRatio = true;\r\n        this.onHover = null;\r\n        this.onClick = null;\r\n        this.parsing = true;\r\n        this.plugins = {};\r\n        this.responsive = true;\r\n        this.scale = undefined;\r\n        this.scales = {};\r\n        this.showLine = true;\r\n        this.drawActiveElementsOnTop = true;\r\n        this.describe(_descriptors);\r\n        this.apply(_appliers);\r\n    }\r\n set(scope, values) {\r\n        return set(this, scope, values);\r\n    }\r\n get(scope) {\r\n        return getScope$1(this, scope);\r\n    }\r\n describe(scope, values) {\r\n        return set(descriptors, scope, values);\r\n    }\r\n    override(scope, values) {\r\n        return set(overrides, scope, values);\r\n    }\r\n route(scope, name, targetScope, targetName) {\r\n        const scopeObject = getScope$1(this, scope);\r\n        const targetScopeObject = getScope$1(this, targetScope);\r\n        const privateName = '_' + name;\r\n        Object.defineProperties(scopeObject, {\r\n            [privateName]: {\r\n                value: scopeObject[name],\r\n                writable: true\r\n            },\r\n            [name]: {\r\n                enumerable: true,\r\n                get () {\r\n                    const local = this[privateName];\r\n                    const target = targetScopeObject[targetName];\r\n                    if (isObject(local)) {\r\n                        return Object.assign({}, target, local);\r\n                    }\r\n                    return valueOrDefault(local, target);\r\n                },\r\n                set (value) {\r\n                    this[privateName] = value;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    apply(appliers) {\r\n        appliers.forEach((apply)=>apply(this));\r\n    }\r\n}\r\nvar defaults = /* #__PURE__ */ new Defaults({\r\n    _scriptable: (name)=>!name.startsWith('on'),\r\n    _indexable: (name)=>name !== 'events',\r\n    hover: {\r\n        _fallback: 'interaction'\r\n    },\r\n    interaction: {\r\n        _scriptable: false,\r\n        _indexable: false\r\n    }\r\n}, [\r\n    applyAnimationsDefaults,\r\n    applyLayoutsDefaults,\r\n    applyScaleDefaults\r\n]);\r\n\r\n/**\r\n * Converts the given font object into a CSS font string.\r\n * @param font - A font object.\r\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\r\n * @private\r\n */ function toFontString(font) {\r\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\r\n        return null;\r\n    }\r\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\r\n}\r\n/**\r\n * @private\r\n */ function _measureText(ctx, data, gc, longest, string) {\r\n    let textWidth = data[string];\r\n    if (!textWidth) {\r\n        textWidth = data[string] = ctx.measureText(string).width;\r\n        gc.push(string);\r\n    }\r\n    if (textWidth > longest) {\r\n        longest = textWidth;\r\n    }\r\n    return longest;\r\n}\r\n/**\r\n * @private\r\n */ // eslint-disable-next-line complexity\r\nfunction _longestText(ctx, font, arrayOfThings, cache) {\r\n    cache = cache || {};\r\n    let data = cache.data = cache.data || {};\r\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\r\n    if (cache.font !== font) {\r\n        data = cache.data = {};\r\n        gc = cache.garbageCollect = [];\r\n        cache.font = font;\r\n    }\r\n    ctx.save();\r\n    ctx.font = font;\r\n    let longest = 0;\r\n    const ilen = arrayOfThings.length;\r\n    let i, j, jlen, thing, nestedThing;\r\n    for(i = 0; i < ilen; i++){\r\n        thing = arrayOfThings[i];\r\n        // Undefined strings and arrays should not be measured\r\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\r\n            longest = _measureText(ctx, data, gc, longest, thing);\r\n        } else if (isArray(thing)) {\r\n            // if it is an array lets measure each element\r\n            // to do maybe simplify this function a bit so we can do this more recursively?\r\n            for(j = 0, jlen = thing.length; j < jlen; j++){\r\n                nestedThing = thing[j];\r\n                // Undefined strings and arrays should not be measured\r\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\r\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ctx.restore();\r\n    const gcLen = gc.length / 2;\r\n    if (gcLen > arrayOfThings.length) {\r\n        for(i = 0; i < gcLen; i++){\r\n            delete data[gc[i]];\r\n        }\r\n        gc.splice(0, gcLen);\r\n    }\r\n    return longest;\r\n}\r\n/**\r\n * Returns the aligned pixel value to avoid anti-aliasing blur\r\n * @param chart - The chart instance.\r\n * @param pixel - A pixel value.\r\n * @param width - The width of the element.\r\n * @returns The aligned pixel value.\r\n * @private\r\n */ function _alignPixel(chart, pixel, width) {\r\n    const devicePixelRatio = chart.currentDevicePixelRatio;\r\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\r\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\r\n}\r\n/**\r\n * Clears the entire canvas.\r\n */ function clearCanvas(canvas, ctx) {\r\n    ctx = ctx || canvas.getContext('2d');\r\n    ctx.save();\r\n    // canvas.width and canvas.height do not consider the canvas transform,\r\n    // while clearRect does\r\n    ctx.resetTransform();\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.restore();\r\n}\r\nfunction drawPoint(ctx, options, x, y) {\r\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n    drawPointLegend(ctx, options, x, y, null);\r\n}\r\n// eslint-disable-next-line complexity\r\nfunction drawPointLegend(ctx, options, x, y, w) {\r\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\r\n    const style = options.pointStyle;\r\n    const rotation = options.rotation;\r\n    const radius = options.radius;\r\n    let rad = (rotation || 0) * RAD_PER_DEG;\r\n    if (style && typeof style === 'object') {\r\n        type = style.toString();\r\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\r\n            ctx.save();\r\n            ctx.translate(x, y);\r\n            ctx.rotate(rad);\r\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\r\n            ctx.restore();\r\n            return;\r\n        }\r\n    }\r\n    if (isNaN(radius) || radius <= 0) {\r\n        return;\r\n    }\r\n    ctx.beginPath();\r\n    switch(style){\r\n        // Default includes circle\r\n        default:\r\n            if (w) {\r\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\r\n            } else {\r\n                ctx.arc(x, y, radius, 0, TAU);\r\n            }\r\n            ctx.closePath();\r\n            break;\r\n        case 'triangle':\r\n            width = w ? w / 2 : radius;\r\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n            rad += TWO_THIRDS_PI;\r\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n            rad += TWO_THIRDS_PI;\r\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\r\n            ctx.closePath();\r\n            break;\r\n        case 'rectRounded':\r\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\r\n            // `quadraticCurveTo` since it generates better results when rect is\r\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\r\n            // closer proportion to the previous impl and it is inscribed in the\r\n            // circle with `radius`. For more details, see the following PRs:\r\n            // https://github.com/chartjs/Chart.js/issues/5597\r\n            // https://github.com/chartjs/Chart.js/issues/5858\r\n            cornerRadius = radius * 0.516;\r\n            size = radius - cornerRadius;\r\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\r\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\r\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\r\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\r\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\r\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\r\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\r\n            ctx.closePath();\r\n            break;\r\n        case 'rect':\r\n            if (!rotation) {\r\n                size = Math.SQRT1_2 * radius;\r\n                width = w ? w / 2 : size;\r\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\r\n                break;\r\n            }\r\n            rad += QUARTER_PI;\r\n        /* falls through */ case 'rectRot':\r\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n            xOffset = Math.cos(rad) * radius;\r\n            yOffset = Math.sin(rad) * radius;\r\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n            ctx.moveTo(x - xOffsetW, y - yOffset);\r\n            ctx.lineTo(x + yOffsetW, y - xOffset);\r\n            ctx.lineTo(x + xOffsetW, y + yOffset);\r\n            ctx.lineTo(x - yOffsetW, y + xOffset);\r\n            ctx.closePath();\r\n            break;\r\n        case 'crossRot':\r\n            rad += QUARTER_PI;\r\n        /* falls through */ case 'cross':\r\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n            xOffset = Math.cos(rad) * radius;\r\n            yOffset = Math.sin(rad) * radius;\r\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n            ctx.moveTo(x - xOffsetW, y - yOffset);\r\n            ctx.lineTo(x + xOffsetW, y + yOffset);\r\n            ctx.moveTo(x + yOffsetW, y - xOffset);\r\n            ctx.lineTo(x - yOffsetW, y + xOffset);\r\n            break;\r\n        case 'star':\r\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n            xOffset = Math.cos(rad) * radius;\r\n            yOffset = Math.sin(rad) * radius;\r\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n            ctx.moveTo(x - xOffsetW, y - yOffset);\r\n            ctx.lineTo(x + xOffsetW, y + yOffset);\r\n            ctx.moveTo(x + yOffsetW, y - xOffset);\r\n            ctx.lineTo(x - yOffsetW, y + xOffset);\r\n            rad += QUARTER_PI;\r\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\r\n            xOffset = Math.cos(rad) * radius;\r\n            yOffset = Math.sin(rad) * radius;\r\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\r\n            ctx.moveTo(x - xOffsetW, y - yOffset);\r\n            ctx.lineTo(x + xOffsetW, y + yOffset);\r\n            ctx.moveTo(x + yOffsetW, y - xOffset);\r\n            ctx.lineTo(x - yOffsetW, y + xOffset);\r\n            break;\r\n        case 'line':\r\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\r\n            yOffset = Math.sin(rad) * radius;\r\n            ctx.moveTo(x - xOffset, y - yOffset);\r\n            ctx.lineTo(x + xOffset, y + yOffset);\r\n            break;\r\n        case 'dash':\r\n            ctx.moveTo(x, y);\r\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\r\n            break;\r\n        case false:\r\n            ctx.closePath();\r\n            break;\r\n    }\r\n    ctx.fill();\r\n    if (options.borderWidth > 0) {\r\n        ctx.stroke();\r\n    }\r\n}\r\n/**\r\n * Returns true if the point is inside the rectangle\r\n * @param point - The point to test\r\n * @param area - The rectangle\r\n * @param margin - allowed margin\r\n * @private\r\n */ function _isPointInArea(point, area, margin) {\r\n    margin = margin || 0.5; // margin - default is to match rounded decimals\r\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\r\n}\r\nfunction clipArea(ctx, area) {\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\r\n    ctx.clip();\r\n}\r\nfunction unclipArea(ctx) {\r\n    ctx.restore();\r\n}\r\n/**\r\n * @private\r\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\r\n    if (!previous) {\r\n        return ctx.lineTo(target.x, target.y);\r\n    }\r\n    if (mode === 'middle') {\r\n        const midpoint = (previous.x + target.x) / 2.0;\r\n        ctx.lineTo(midpoint, previous.y);\r\n        ctx.lineTo(midpoint, target.y);\r\n    } else if (mode === 'after' !== !!flip) {\r\n        ctx.lineTo(previous.x, target.y);\r\n    } else {\r\n        ctx.lineTo(target.x, previous.y);\r\n    }\r\n    ctx.lineTo(target.x, target.y);\r\n}\r\n/**\r\n * @private\r\n */ function _bezierCurveTo(ctx, previous, target, flip) {\r\n    if (!previous) {\r\n        return ctx.lineTo(target.x, target.y);\r\n    }\r\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\r\n}\r\nfunction setRenderOpts(ctx, opts) {\r\n    if (opts.translation) {\r\n        ctx.translate(opts.translation[0], opts.translation[1]);\r\n    }\r\n    if (!isNullOrUndef(opts.rotation)) {\r\n        ctx.rotate(opts.rotation);\r\n    }\r\n    if (opts.color) {\r\n        ctx.fillStyle = opts.color;\r\n    }\r\n    if (opts.textAlign) {\r\n        ctx.textAlign = opts.textAlign;\r\n    }\r\n    if (opts.textBaseline) {\r\n        ctx.textBaseline = opts.textBaseline;\r\n    }\r\n}\r\nfunction decorateText(ctx, x, y, line, opts) {\r\n    if (opts.strikethrough || opts.underline) {\r\n        /**\r\n     * Now that IE11 support has been dropped, we can use more\r\n     * of the TextMetrics object. The actual bounding boxes\r\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\r\n     * can be safely used.\r\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\r\n     */ const metrics = ctx.measureText(line);\r\n        const left = x - metrics.actualBoundingBoxLeft;\r\n        const right = x + metrics.actualBoundingBoxRight;\r\n        const top = y - metrics.actualBoundingBoxAscent;\r\n        const bottom = y + metrics.actualBoundingBoxDescent;\r\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\r\n        ctx.strokeStyle = ctx.fillStyle;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = opts.decorationWidth || 2;\r\n        ctx.moveTo(left, yDecoration);\r\n        ctx.lineTo(right, yDecoration);\r\n        ctx.stroke();\r\n    }\r\n}\r\nfunction drawBackdrop(ctx, opts) {\r\n    const oldColor = ctx.fillStyle;\r\n    ctx.fillStyle = opts.color;\r\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\r\n    ctx.fillStyle = oldColor;\r\n}\r\n/**\r\n * Render text onto the canvas\r\n */ function renderText(ctx, text, x, y, font, opts = {}) {\r\n    const lines = isArray(text) ? text : [\r\n        text\r\n    ];\r\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\r\n    let i, line;\r\n    ctx.save();\r\n    ctx.font = font.string;\r\n    setRenderOpts(ctx, opts);\r\n    for(i = 0; i < lines.length; ++i){\r\n        line = lines[i];\r\n        if (opts.backdrop) {\r\n            drawBackdrop(ctx, opts.backdrop);\r\n        }\r\n        if (stroke) {\r\n            if (opts.strokeColor) {\r\n                ctx.strokeStyle = opts.strokeColor;\r\n            }\r\n            if (!isNullOrUndef(opts.strokeWidth)) {\r\n                ctx.lineWidth = opts.strokeWidth;\r\n            }\r\n            ctx.strokeText(line, x, y, opts.maxWidth);\r\n        }\r\n        ctx.fillText(line, x, y, opts.maxWidth);\r\n        decorateText(ctx, x, y, line, opts);\r\n        y += Number(font.lineHeight);\r\n    }\r\n    ctx.restore();\r\n}\r\n/**\r\n * Add a path of a rectangle with rounded corners to the current sub-path\r\n * @param ctx - Context\r\n * @param rect - Bounding rect\r\n */ function addRoundedRectPath(ctx, rect) {\r\n    const { x , y , w , h , radius  } = rect;\r\n    // top left arc\r\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\r\n    // line from top left to bottom left\r\n    ctx.lineTo(x, y + h - radius.bottomLeft);\r\n    // bottom left arc\r\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\r\n    // line from bottom left to bottom right\r\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\r\n    // bottom right arc\r\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\r\n    // line from bottom right to top right\r\n    ctx.lineTo(x + w, y + radius.topRight);\r\n    // top right arc\r\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\r\n    // line from top right to top left\r\n    ctx.lineTo(x + radius.topLeft, y);\r\n}\r\n\r\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\r\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\r\n/**\r\n * @alias Chart.helpers.options\r\n * @namespace\r\n */ /**\r\n * Converts the given line height `value` in pixels for a specific font `size`.\r\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\r\n * @param size - The font size (in pixels) used to resolve relative `value`.\r\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\r\n * @since 2.7.0\r\n */ function toLineHeight(value, size) {\r\n    const matches = ('' + value).match(LINE_HEIGHT);\r\n    if (!matches || matches[1] === 'normal') {\r\n        return size * 1.2;\r\n    }\r\n    value = +matches[2];\r\n    switch(matches[3]){\r\n        case 'px':\r\n            return value;\r\n        case '%':\r\n            value /= 100;\r\n            break;\r\n    }\r\n    return size * value;\r\n}\r\nconst numberOrZero = (v)=>+v || 0;\r\nfunction _readValueToProps(value, props) {\r\n    const ret = {};\r\n    const objProps = isObject(props);\r\n    const keys = objProps ? Object.keys(props) : props;\r\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\r\n    for (const prop of keys){\r\n        ret[prop] = numberOrZero(read(prop));\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * Converts the given value into a TRBL object.\r\n * @param value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns The padding values (top, right, bottom, left)\r\n * @since 3.0.0\r\n */ function toTRBL(value) {\r\n    return _readValueToProps(value, {\r\n        top: 'y',\r\n        right: 'x',\r\n        bottom: 'y',\r\n        left: 'x'\r\n    });\r\n}\r\n/**\r\n * Converts the given value into a TRBL corners object (similar with css border-radius).\r\n * @param value - If a number, set the value to all TRBL corner components,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\r\n * @since 3.0.0\r\n */ function toTRBLCorners(value) {\r\n    return _readValueToProps(value, [\r\n        'topLeft',\r\n        'topRight',\r\n        'bottomLeft',\r\n        'bottomRight'\r\n    ]);\r\n}\r\n/**\r\n * Converts the given value into a padding object with pre-computed width/height.\r\n * @param value - If a number, set the value to all TRBL component,\r\n *  else, if an object, use defined properties and sets undefined ones to 0.\r\n *  x / y are shorthands for same value for left/right and top/bottom.\r\n * @returns The padding values (top, right, bottom, left, width, height)\r\n * @since 2.7.0\r\n */ function toPadding(value) {\r\n    const obj = toTRBL(value);\r\n    obj.width = obj.left + obj.right;\r\n    obj.height = obj.top + obj.bottom;\r\n    return obj;\r\n}\r\n/**\r\n * Parses font options and returns the font object.\r\n * @param options - A object that contains font options to be parsed.\r\n * @param fallback - A object that contains fallback font options.\r\n * @return The font object.\r\n * @private\r\n */ function toFont(options, fallback) {\r\n    options = options || {};\r\n    fallback = fallback || defaults.font;\r\n    let size = valueOrDefault(options.size, fallback.size);\r\n    if (typeof size === 'string') {\r\n        size = parseInt(size, 10);\r\n    }\r\n    let style = valueOrDefault(options.style, fallback.style);\r\n    if (style && !('' + style).match(FONT_STYLE)) {\r\n        console.warn('Invalid font style specified: \"' + style + '\"');\r\n        style = undefined;\r\n    }\r\n    const font = {\r\n        family: valueOrDefault(options.family, fallback.family),\r\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\r\n        size,\r\n        style,\r\n        weight: valueOrDefault(options.weight, fallback.weight),\r\n        string: ''\r\n    };\r\n    font.string = toFontString(font);\r\n    return font;\r\n}\r\n/**\r\n * Evaluates the given `inputs` sequentially and returns the first defined value.\r\n * @param inputs - An array of values, falling back to the last value.\r\n * @param context - If defined and the current value is a function, the value\r\n * is called with `context` as first argument and the result becomes the new input.\r\n * @param index - If defined and the current value is an array, the value\r\n * at `index` become the new input.\r\n * @param info - object to return information about resolution in\r\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\r\n * @since 2.7.0\r\n */ function resolve(inputs, context, index, info) {\r\n    let cacheable = true;\r\n    let i, ilen, value;\r\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\r\n        value = inputs[i];\r\n        if (value === undefined) {\r\n            continue;\r\n        }\r\n        if (context !== undefined && typeof value === 'function') {\r\n            value = value(context);\r\n            cacheable = false;\r\n        }\r\n        if (index !== undefined && isArray(value)) {\r\n            value = value[index % value.length];\r\n            cacheable = false;\r\n        }\r\n        if (value !== undefined) {\r\n            if (info && !cacheable) {\r\n                info.cacheable = false;\r\n            }\r\n            return value;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @param minmax\r\n * @param grace\r\n * @param beginAtZero\r\n * @private\r\n */ function _addGrace(minmax, grace, beginAtZero) {\r\n    const { min , max  } = minmax;\r\n    const change = toDimension(grace, (max - min) / 2);\r\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\r\n    return {\r\n        min: keepZero(min, -Math.abs(change)),\r\n        max: keepZero(max, change)\r\n    };\r\n}\r\nfunction createContext(parentContext, context) {\r\n    return Object.assign(Object.create(parentContext), context);\r\n}\r\n\r\n/**\r\n * Creates a Proxy for resolving raw values for options.\r\n * @param scopes - The option scopes to look for values, in resolution order\r\n * @param prefixes - The prefixes for values, in resolution order.\r\n * @param rootScopes - The root option scopes\r\n * @param fallback - Parent scopes fallback\r\n * @param getTarget - callback for getting the target for changed values\r\n * @returns Proxy\r\n * @private\r\n */ function _createResolver(scopes, prefixes = [\r\n    ''\r\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\r\n    const finalRootScopes = rootScopes || scopes;\r\n    if (typeof fallback === 'undefined') {\r\n        fallback = _resolve('_fallback', scopes);\r\n    }\r\n    const cache = {\r\n        [Symbol.toStringTag]: 'Object',\r\n        _cacheable: true,\r\n        _scopes: scopes,\r\n        _rootScopes: finalRootScopes,\r\n        _fallback: fallback,\r\n        _getTarget: getTarget,\r\n        override: (scope)=>_createResolver([\r\n                scope,\r\n                ...scopes\r\n            ], prefixes, finalRootScopes, fallback)\r\n    };\r\n    return new Proxy(cache, {\r\n        /**\r\n     * A trap for the delete operator.\r\n     */ deleteProperty (target, prop) {\r\n            delete target[prop]; // remove from cache\r\n            delete target._keys; // remove cached keys\r\n            delete scopes[0][prop]; // remove from top level scope\r\n            return true;\r\n        },\r\n        /**\r\n     * A trap for getting property values.\r\n     */ get (target, prop) {\r\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\r\n        },\r\n        /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */ getOwnPropertyDescriptor (target, prop) {\r\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\r\n        },\r\n        /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */ getPrototypeOf () {\r\n            return Reflect.getPrototypeOf(scopes[0]);\r\n        },\r\n        /**\r\n     * A trap for the in operator.\r\n     */ has (target, prop) {\r\n            return getKeysFromAllScopes(target).includes(prop);\r\n        },\r\n        /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */ ownKeys (target) {\r\n            return getKeysFromAllScopes(target);\r\n        },\r\n        /**\r\n     * A trap for setting property values.\r\n     */ set (target, prop, value) {\r\n            const storage = target._storage || (target._storage = getTarget());\r\n            target[prop] = storage[prop] = value; // set to top level scope + cache\r\n            delete target._keys; // remove cached keys\r\n            return true;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Returns an Proxy for resolving option values with context.\r\n * @param proxy - The Proxy returned by `_createResolver`\r\n * @param context - Context object for scriptable/indexable options\r\n * @param subProxy - The proxy provided for scriptable options\r\n * @param descriptorDefaults - Defaults for descriptors\r\n * @private\r\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\r\n    const cache = {\r\n        _cacheable: false,\r\n        _proxy: proxy,\r\n        _context: context,\r\n        _subProxy: subProxy,\r\n        _stack: new Set(),\r\n        _descriptors: _descriptors(proxy, descriptorDefaults),\r\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\r\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\r\n    };\r\n    return new Proxy(cache, {\r\n        /**\r\n     * A trap for the delete operator.\r\n     */ deleteProperty (target, prop) {\r\n            delete target[prop]; // remove from cache\r\n            delete proxy[prop]; // remove from proxy\r\n            return true;\r\n        },\r\n        /**\r\n     * A trap for getting property values.\r\n     */ get (target, prop, receiver) {\r\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\r\n        },\r\n        /**\r\n     * A trap for Object.getOwnPropertyDescriptor.\r\n     * Also used by Object.hasOwnProperty.\r\n     */ getOwnPropertyDescriptor (target, prop) {\r\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\r\n                enumerable: true,\r\n                configurable: true\r\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\r\n        },\r\n        /**\r\n     * A trap for Object.getPrototypeOf.\r\n     */ getPrototypeOf () {\r\n            return Reflect.getPrototypeOf(proxy);\r\n        },\r\n        /**\r\n     * A trap for the in operator.\r\n     */ has (target, prop) {\r\n            return Reflect.has(proxy, prop);\r\n        },\r\n        /**\r\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\r\n     */ ownKeys () {\r\n            return Reflect.ownKeys(proxy);\r\n        },\r\n        /**\r\n     * A trap for setting property values.\r\n     */ set (target, prop, value) {\r\n            proxy[prop] = value; // set to proxy\r\n            delete target[prop]; // remove from cache\r\n            return true;\r\n        }\r\n    });\r\n}\r\n/**\r\n * @private\r\n */ function _descriptors(proxy, defaults = {\r\n    scriptable: true,\r\n    indexable: true\r\n}) {\r\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\r\n    return {\r\n        allKeys: _allKeys,\r\n        scriptable: _scriptable,\r\n        indexable: _indexable,\r\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\r\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\r\n    };\r\n}\r\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\r\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\r\nfunction _cached(target, prop, resolve) {\r\n    if (Object.prototype.hasOwnProperty.call(target, prop)) {\r\n        return target[prop];\r\n    }\r\n    const value = resolve();\r\n    // cache the resolved value\r\n    target[prop] = value;\r\n    return value;\r\n}\r\nfunction _resolveWithContext(target, prop, receiver) {\r\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\r\n    let value = _proxy[prop]; // resolve from proxy\r\n    // resolve with context\r\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\r\n        value = _resolveScriptable(prop, value, target, receiver);\r\n    }\r\n    if (isArray(value) && value.length) {\r\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\r\n    }\r\n    if (needsSubResolver(prop, value)) {\r\n        // if the resolved value is an object, create a sub resolver for it\r\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\r\n    }\r\n    return value;\r\n}\r\nfunction _resolveScriptable(prop, getValue, target, receiver) {\r\n    const { _proxy , _context , _subProxy , _stack  } = target;\r\n    if (_stack.has(prop)) {\r\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\r\n    }\r\n    _stack.add(prop);\r\n    let value = getValue(_context, _subProxy || receiver);\r\n    _stack.delete(prop);\r\n    if (needsSubResolver(prop, value)) {\r\n        // When scriptable option returns an object, create a resolver on that.\r\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\r\n    }\r\n    return value;\r\n}\r\nfunction _resolveArray(prop, value, target, isIndexable) {\r\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\r\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\r\n        return value[_context.index % value.length];\r\n    } else if (isObject(value[0])) {\r\n        // Array of objects, return array or resolvers\r\n        const arr = value;\r\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\r\n        value = [];\r\n        for (const item of arr){\r\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\r\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction resolveFallback(fallback, prop, value) {\r\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\r\n}\r\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\r\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\r\n    for (const parent of parentScopes){\r\n        const scope = getScope(key, parent);\r\n        if (scope) {\r\n            set.add(scope);\r\n            const fallback = resolveFallback(scope._fallback, key, value);\r\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\r\n                // When we reach the descriptor that defines a new _fallback, return that.\r\n                // The fallback will resume to that new scope.\r\n                return fallback;\r\n            }\r\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\r\n            // Fallback to `false` results to `false`, when falling back to different key.\r\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\r\n            return null;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction createSubResolver(parentScopes, resolver, prop, value) {\r\n    const rootScopes = resolver._rootScopes;\r\n    const fallback = resolveFallback(resolver._fallback, prop, value);\r\n    const allScopes = [\r\n        ...parentScopes,\r\n        ...rootScopes\r\n    ];\r\n    const set = new Set();\r\n    set.add(value);\r\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\r\n    if (key === null) {\r\n        return false;\r\n    }\r\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\r\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\r\n        if (key === null) {\r\n            return false;\r\n        }\r\n    }\r\n    return _createResolver(Array.from(set), [\r\n        ''\r\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\r\n}\r\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\r\n    while(key){\r\n        key = addScopes(set, allScopes, key, fallback, item);\r\n    }\r\n    return key;\r\n}\r\nfunction subGetTarget(resolver, prop, value) {\r\n    const parent = resolver._getTarget();\r\n    if (!(prop in parent)) {\r\n        parent[prop] = {};\r\n    }\r\n    const target = parent[prop];\r\n    if (isArray(target) && isObject(value)) {\r\n        // For array of objects, the object is used to store updated values\r\n        return value;\r\n    }\r\n    return target || {};\r\n}\r\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\r\n    let value;\r\n    for (const prefix of prefixes){\r\n        value = _resolve(readKey(prefix, prop), scopes);\r\n        if (typeof value !== 'undefined') {\r\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\r\n        }\r\n    }\r\n}\r\nfunction _resolve(key, scopes) {\r\n    for (const scope of scopes){\r\n        if (!scope) {\r\n            continue;\r\n        }\r\n        const value = scope[key];\r\n        if (typeof value !== 'undefined') {\r\n            return value;\r\n        }\r\n    }\r\n}\r\nfunction getKeysFromAllScopes(target) {\r\n    let keys = target._keys;\r\n    if (!keys) {\r\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\r\n    }\r\n    return keys;\r\n}\r\nfunction resolveKeysFromAllScopes(scopes) {\r\n    const set = new Set();\r\n    for (const scope of scopes){\r\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\r\n            set.add(key);\r\n        }\r\n    }\r\n    return Array.from(set);\r\n}\r\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\r\n    const { iScale  } = meta;\r\n    const { key ='r'  } = this._parsing;\r\n    const parsed = new Array(count);\r\n    let i, ilen, index, item;\r\n    for(i = 0, ilen = count; i < ilen; ++i){\r\n        index = i + start;\r\n        item = data[index];\r\n        parsed[i] = {\r\n            r: iScale.parse(resolveObjectKey(item, key), index)\r\n        };\r\n    }\r\n    return parsed;\r\n}\r\n\r\nconst EPSILON = Number.EPSILON || 1e-14;\r\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\r\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\r\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\r\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\r\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n    // This function must also respect \"skipped\" points\r\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\r\n    const current = middlePoint;\r\n    const next = afterPoint.skip ? middlePoint : afterPoint;\r\n    const d01 = distanceBetweenPoints(current, previous);\r\n    const d12 = distanceBetweenPoints(next, current);\r\n    let s01 = d01 / (d01 + d12);\r\n    let s12 = d12 / (d01 + d12);\r\n    // If all points are the same, s01 & s02 will be inf\r\n    s01 = isNaN(s01) ? 0 : s01;\r\n    s12 = isNaN(s12) ? 0 : s12;\r\n    const fa = t * s01; // scaling factor for triangle Ta\r\n    const fb = t * s12;\r\n    return {\r\n        previous: {\r\n            x: current.x - fa * (next.x - previous.x),\r\n            y: current.y - fa * (next.y - previous.y)\r\n        },\r\n        next: {\r\n            x: current.x + fb * (next.x - previous.x),\r\n            y: current.y + fb * (next.y - previous.y)\r\n        }\r\n    };\r\n}\r\n/**\r\n * Adjust tangents to ensure monotonic properties\r\n */ function monotoneAdjust(points, deltaK, mK) {\r\n    const pointsLen = points.length;\r\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\r\n    let pointAfter = getPoint(points, 0);\r\n    for(let i = 0; i < pointsLen - 1; ++i){\r\n        pointCurrent = pointAfter;\r\n        pointAfter = getPoint(points, i + 1);\r\n        if (!pointCurrent || !pointAfter) {\r\n            continue;\r\n        }\r\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\r\n            mK[i] = mK[i + 1] = 0;\r\n            continue;\r\n        }\r\n        alphaK = mK[i] / deltaK[i];\r\n        betaK = mK[i + 1] / deltaK[i];\r\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\r\n        if (squaredMagnitude <= 9) {\r\n            continue;\r\n        }\r\n        tauK = 3 / Math.sqrt(squaredMagnitude);\r\n        mK[i] = alphaK * tauK * deltaK[i];\r\n        mK[i + 1] = betaK * tauK * deltaK[i];\r\n    }\r\n}\r\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\r\n    const valueAxis = getValueAxis(indexAxis);\r\n    const pointsLen = points.length;\r\n    let delta, pointBefore, pointCurrent;\r\n    let pointAfter = getPoint(points, 0);\r\n    for(let i = 0; i < pointsLen; ++i){\r\n        pointBefore = pointCurrent;\r\n        pointCurrent = pointAfter;\r\n        pointAfter = getPoint(points, i + 1);\r\n        if (!pointCurrent) {\r\n            continue;\r\n        }\r\n        const iPixel = pointCurrent[indexAxis];\r\n        const vPixel = pointCurrent[valueAxis];\r\n        if (pointBefore) {\r\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\r\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\r\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\r\n        }\r\n        if (pointAfter) {\r\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\r\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\r\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\r\n        }\r\n    }\r\n}\r\n/**\r\n * This function calculates Bézier control points in a similar way than |splineCurve|,\r\n * but preserves monotonicity of the provided data and ensures no local extremums are added\r\n * between the dataset discrete points due to the interpolation.\r\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\r\n */ function splineCurveMonotone(points, indexAxis = 'x') {\r\n    const valueAxis = getValueAxis(indexAxis);\r\n    const pointsLen = points.length;\r\n    const deltaK = Array(pointsLen).fill(0);\r\n    const mK = Array(pointsLen);\r\n    // Calculate slopes (deltaK) and initialize tangents (mK)\r\n    let i, pointBefore, pointCurrent;\r\n    let pointAfter = getPoint(points, 0);\r\n    for(i = 0; i < pointsLen; ++i){\r\n        pointBefore = pointCurrent;\r\n        pointCurrent = pointAfter;\r\n        pointAfter = getPoint(points, i + 1);\r\n        if (!pointCurrent) {\r\n            continue;\r\n        }\r\n        if (pointAfter) {\r\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\r\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\r\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\r\n        }\r\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\r\n    }\r\n    monotoneAdjust(points, deltaK, mK);\r\n    monotoneCompute(points, mK, indexAxis);\r\n}\r\nfunction capControlPoint(pt, min, max) {\r\n    return Math.max(Math.min(pt, max), min);\r\n}\r\nfunction capBezierPoints(points, area) {\r\n    let i, ilen, point, inArea, inAreaPrev;\r\n    let inAreaNext = _isPointInArea(points[0], area);\r\n    for(i = 0, ilen = points.length; i < ilen; ++i){\r\n        inAreaPrev = inArea;\r\n        inArea = inAreaNext;\r\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\r\n        if (!inArea) {\r\n            continue;\r\n        }\r\n        point = points[i];\r\n        if (inAreaPrev) {\r\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\r\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\r\n        }\r\n        if (inAreaNext) {\r\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\r\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\r\n        }\r\n    }\r\n}\r\n/**\r\n * @private\r\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\r\n    let i, ilen, point, controlPoints;\r\n    // Only consider points that are drawn in case the spanGaps option is used\r\n    if (options.spanGaps) {\r\n        points = points.filter((pt)=>!pt.skip);\r\n    }\r\n    if (options.cubicInterpolationMode === 'monotone') {\r\n        splineCurveMonotone(points, indexAxis);\r\n    } else {\r\n        let prev = loop ? points[points.length - 1] : points[0];\r\n        for(i = 0, ilen = points.length; i < ilen; ++i){\r\n            point = points[i];\r\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\r\n            point.cp1x = controlPoints.previous.x;\r\n            point.cp1y = controlPoints.previous.y;\r\n            point.cp2x = controlPoints.next.x;\r\n            point.cp2y = controlPoints.next.y;\r\n            prev = point;\r\n        }\r\n    }\r\n    if (options.capBezierPoints) {\r\n        capBezierPoints(points, area);\r\n    }\r\n}\r\n\r\n/**\r\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\r\n * necessary to avoid duplicates with `export * from './helpers`; see\r\n * https://github.com/microsoft/TypeScript/issues/46011\r\n * @typedef { import('../core/core.controller.js').default } dom.Chart\r\n * @typedef { import('../../types').ChartEvent } ChartEvent\r\n */ /**\r\n * @private\r\n */ function _isDomSupported() {\r\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\r\n}\r\n/**\r\n * @private\r\n */ function _getParentNode(domNode) {\r\n    let parent = domNode.parentNode;\r\n    if (parent && parent.toString() === '[object ShadowRoot]') {\r\n        parent = parent.host;\r\n    }\r\n    return parent;\r\n}\r\n/**\r\n * convert max-width/max-height values that may be percentages into a number\r\n * @private\r\n */ function parseMaxStyle(styleValue, node, parentProperty) {\r\n    let valueInPixels;\r\n    if (typeof styleValue === 'string') {\r\n        valueInPixels = parseInt(styleValue, 10);\r\n        if (styleValue.indexOf('%') !== -1) {\r\n            // percentage * size in dimension\r\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\r\n        }\r\n    } else {\r\n        valueInPixels = styleValue;\r\n    }\r\n    return valueInPixels;\r\n}\r\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\r\nfunction getStyle(el, property) {\r\n    return getComputedStyle(el).getPropertyValue(property);\r\n}\r\nconst positions = [\r\n    'top',\r\n    'right',\r\n    'bottom',\r\n    'left'\r\n];\r\nfunction getPositionedStyle(styles, style, suffix) {\r\n    const result = {};\r\n    suffix = suffix ? '-' + suffix : '';\r\n    for(let i = 0; i < 4; i++){\r\n        const pos = positions[i];\r\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\r\n    }\r\n    result.width = result.left + result.right;\r\n    result.height = result.top + result.bottom;\r\n    return result;\r\n}\r\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\r\n/**\r\n * @param e\r\n * @param canvas\r\n * @returns Canvas position\r\n */ function getCanvasPosition(e, canvas) {\r\n    const touches = e.touches;\r\n    const source = touches && touches.length ? touches[0] : e;\r\n    const { offsetX , offsetY  } = source;\r\n    let box = false;\r\n    let x, y;\r\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\r\n        x = offsetX;\r\n        y = offsetY;\r\n    } else {\r\n        const rect = canvas.getBoundingClientRect();\r\n        x = source.clientX - rect.left;\r\n        y = source.clientY - rect.top;\r\n        box = true;\r\n    }\r\n    return {\r\n        x,\r\n        y,\r\n        box\r\n    };\r\n}\r\n/**\r\n * Gets an event's x, y coordinates, relative to the chart area\r\n * @param event\r\n * @param chart\r\n * @returns x and y coordinates of the event\r\n */ function getRelativePosition(event, chart) {\r\n    if ('native' in event) {\r\n        return event;\r\n    }\r\n    const { canvas , currentDevicePixelRatio  } = chart;\r\n    const style = getComputedStyle(canvas);\r\n    const borderBox = style.boxSizing === 'border-box';\r\n    const paddings = getPositionedStyle(style, 'padding');\r\n    const borders = getPositionedStyle(style, 'border', 'width');\r\n    const { x , y , box  } = getCanvasPosition(event, canvas);\r\n    const xOffset = paddings.left + (box && borders.left);\r\n    const yOffset = paddings.top + (box && borders.top);\r\n    let { width , height  } = chart;\r\n    if (borderBox) {\r\n        width -= paddings.width + borders.width;\r\n        height -= paddings.height + borders.height;\r\n    }\r\n    return {\r\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\r\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\r\n    };\r\n}\r\nfunction getContainerSize(canvas, width, height) {\r\n    let maxWidth, maxHeight;\r\n    if (width === undefined || height === undefined) {\r\n        const container = _getParentNode(canvas);\r\n        if (!container) {\r\n            width = canvas.clientWidth;\r\n            height = canvas.clientHeight;\r\n        } else {\r\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\r\n            const containerStyle = getComputedStyle(container);\r\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\r\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\r\n            width = rect.width - containerPadding.width - containerBorder.width;\r\n            height = rect.height - containerPadding.height - containerBorder.height;\r\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\r\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\r\n        }\r\n    }\r\n    return {\r\n        width,\r\n        height,\r\n        maxWidth: maxWidth || INFINITY,\r\n        maxHeight: maxHeight || INFINITY\r\n    };\r\n}\r\nconst round1 = (v)=>Math.round(v * 10) / 10;\r\n// eslint-disable-next-line complexity\r\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\r\n    const style = getComputedStyle(canvas);\r\n    const margins = getPositionedStyle(style, 'margin');\r\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\r\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\r\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\r\n    let { width , height  } = containerSize;\r\n    if (style.boxSizing === 'content-box') {\r\n        const borders = getPositionedStyle(style, 'border', 'width');\r\n        const paddings = getPositionedStyle(style, 'padding');\r\n        width -= paddings.width + borders.width;\r\n        height -= paddings.height + borders.height;\r\n    }\r\n    width = Math.max(0, width - margins.width);\r\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\r\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\r\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\r\n    if (width && !height) {\r\n        // https://github.com/chartjs/Chart.js/issues/4659\r\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\r\n        height = round1(width / 2);\r\n    }\r\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\r\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\r\n        height = containerSize.height;\r\n        width = round1(Math.floor(height * aspectRatio));\r\n    }\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n/**\r\n * @param chart\r\n * @param forceRatio\r\n * @param forceStyle\r\n * @returns True if the canvas context size or transformation has changed.\r\n */ function retinaScale(chart, forceRatio, forceStyle) {\r\n    const pixelRatio = forceRatio || 1;\r\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\r\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\r\n    chart.height = Math.floor(chart.height);\r\n    chart.width = Math.floor(chart.width);\r\n    const canvas = chart.canvas;\r\n    // If no style has been set on the canvas, the render size is used as display size,\r\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\r\n    // See https://github.com/chartjs/Chart.js/issues/3575\r\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\r\n        canvas.style.height = `${chart.height}px`;\r\n        canvas.style.width = `${chart.width}px`;\r\n    }\r\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\r\n        chart.currentDevicePixelRatio = pixelRatio;\r\n        canvas.height = deviceHeight;\r\n        canvas.width = deviceWidth;\r\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Detects support for options object argument in addEventListener.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\r\n * @private\r\n */ const supportsEventListenerOptions = function() {\r\n    let passiveSupported = false;\r\n    try {\r\n        const options = {\r\n            get passive () {\r\n                passiveSupported = true;\r\n                return false;\r\n            }\r\n        };\r\n        if (_isDomSupported()) {\r\n            window.addEventListener('test', null, options);\r\n            window.removeEventListener('test', null, options);\r\n        }\r\n    } catch (e) {\r\n    // continue regardless of error\r\n    }\r\n    return passiveSupported;\r\n}();\r\n/**\r\n * The \"used\" size is the final value of a dimension property after all calculations have\r\n * been performed. This method uses the computed style of `element` but returns undefined\r\n * if the computed style is not expressed in pixels. That can happen in some cases where\r\n * `element` has a size relative to its parent and this last one is not yet displayed,\r\n * for example because of `display: none` on a parent node.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\r\n * @returns Size in pixels or undefined if unknown.\r\n */ function readUsedSize(element, property) {\r\n    const value = getStyle(element, property);\r\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\r\n    return matches ? +matches[1] : undefined;\r\n}\r\n\r\n/**\r\n * @private\r\n */ function _pointInLine(p1, p2, t, mode) {\r\n    return {\r\n        x: p1.x + t * (p2.x - p1.x),\r\n        y: p1.y + t * (p2.y - p1.y)\r\n    };\r\n}\r\n/**\r\n * @private\r\n */ function _steppedInterpolation(p1, p2, t, mode) {\r\n    return {\r\n        x: p1.x + t * (p2.x - p1.x),\r\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\r\n    };\r\n}\r\n/**\r\n * @private\r\n */ function _bezierInterpolation(p1, p2, t, mode) {\r\n    const cp1 = {\r\n        x: p1.cp2x,\r\n        y: p1.cp2y\r\n    };\r\n    const cp2 = {\r\n        x: p2.cp1x,\r\n        y: p2.cp1y\r\n    };\r\n    const a = _pointInLine(p1, cp1, t);\r\n    const b = _pointInLine(cp1, cp2, t);\r\n    const c = _pointInLine(cp2, p2, t);\r\n    const d = _pointInLine(a, b, t);\r\n    const e = _pointInLine(b, c, t);\r\n    return _pointInLine(d, e, t);\r\n}\r\n\r\nconst getRightToLeftAdapter = function(rectX, width) {\r\n    return {\r\n        x (x) {\r\n            return rectX + rectX + width - x;\r\n        },\r\n        setWidth (w) {\r\n            width = w;\r\n        },\r\n        textAlign (align) {\r\n            if (align === 'center') {\r\n                return align;\r\n            }\r\n            return align === 'right' ? 'left' : 'right';\r\n        },\r\n        xPlus (x, value) {\r\n            return x - value;\r\n        },\r\n        leftForLtr (x, itemWidth) {\r\n            return x - itemWidth;\r\n        }\r\n    };\r\n};\r\nconst getLeftToRightAdapter = function() {\r\n    return {\r\n        x (x) {\r\n            return x;\r\n        },\r\n        setWidth (w) {},\r\n        textAlign (align) {\r\n            return align;\r\n        },\r\n        xPlus (x, value) {\r\n            return x + value;\r\n        },\r\n        leftForLtr (x, _itemWidth) {\r\n            return x;\r\n        }\r\n    };\r\n};\r\nfunction getRtlAdapter(rtl, rectX, width) {\r\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\r\n}\r\nfunction overrideTextDirection(ctx, direction) {\r\n    let style, original;\r\n    if (direction === 'ltr' || direction === 'rtl') {\r\n        style = ctx.canvas.style;\r\n        original = [\r\n            style.getPropertyValue('direction'),\r\n            style.getPropertyPriority('direction')\r\n        ];\r\n        style.setProperty('direction', direction, 'important');\r\n        ctx.prevTextDirection = original;\r\n    }\r\n}\r\nfunction restoreTextDirection(ctx, original) {\r\n    if (original !== undefined) {\r\n        delete ctx.prevTextDirection;\r\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\r\n    }\r\n}\r\n\r\nfunction propertyFn(property) {\r\n    if (property === 'angle') {\r\n        return {\r\n            between: _angleBetween,\r\n            compare: _angleDiff,\r\n            normalize: _normalizeAngle\r\n        };\r\n    }\r\n    return {\r\n        between: _isBetween,\r\n        compare: (a, b)=>a - b,\r\n        normalize: (x)=>x\r\n    };\r\n}\r\nfunction normalizeSegment({ start , end , count , loop , style  }) {\r\n    return {\r\n        start: start % count,\r\n        end: end % count,\r\n        loop: loop && (end - start + 1) % count === 0,\r\n        style\r\n    };\r\n}\r\nfunction getSegment(segment, points, bounds) {\r\n    const { property , start: startBound , end: endBound  } = bounds;\r\n    const { between , normalize  } = propertyFn(property);\r\n    const count = points.length;\r\n    let { start , end , loop  } = segment;\r\n    let i, ilen;\r\n    if (loop) {\r\n        start += count;\r\n        end += count;\r\n        for(i = 0, ilen = count; i < ilen; ++i){\r\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\r\n                break;\r\n            }\r\n            start--;\r\n            end--;\r\n        }\r\n        start %= count;\r\n        end %= count;\r\n    }\r\n    if (end < start) {\r\n        end += count;\r\n    }\r\n    return {\r\n        start,\r\n        end,\r\n        loop,\r\n        style: segment.style\r\n    };\r\n}\r\n function _boundSegment(segment, points, bounds) {\r\n    if (!bounds) {\r\n        return [\r\n            segment\r\n        ];\r\n    }\r\n    const { property , start: startBound , end: endBound  } = bounds;\r\n    const count = points.length;\r\n    const { compare , between , normalize  } = propertyFn(property);\r\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\r\n    const result = [];\r\n    let inside = false;\r\n    let subStart = null;\r\n    let value, point, prevValue;\r\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\r\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\r\n    const shouldStart = ()=>inside || startIsBefore();\r\n    const shouldStop = ()=>!inside || endIsBefore();\r\n    for(let i = start, prev = start; i <= end; ++i){\r\n        point = points[i % count];\r\n        if (point.skip) {\r\n            continue;\r\n        }\r\n        value = normalize(point[property]);\r\n        if (value === prevValue) {\r\n            continue;\r\n        }\r\n        inside = between(value, startBound, endBound);\r\n        if (subStart === null && shouldStart()) {\r\n            subStart = compare(value, startBound) === 0 ? i : prev;\r\n        }\r\n        if (subStart !== null && shouldStop()) {\r\n            result.push(normalizeSegment({\r\n                start: subStart,\r\n                end: i,\r\n                loop,\r\n                count,\r\n                style\r\n            }));\r\n            subStart = null;\r\n        }\r\n        prev = i;\r\n        prevValue = value;\r\n    }\r\n    if (subStart !== null) {\r\n        result.push(normalizeSegment({\r\n            start: subStart,\r\n            end,\r\n            loop,\r\n            count,\r\n            style\r\n        }));\r\n    }\r\n    return result;\r\n}\r\n function _boundSegments(line, bounds) {\r\n    const result = [];\r\n    const segments = line.segments;\r\n    for(let i = 0; i < segments.length; i++){\r\n        const sub = _boundSegment(segments[i], line.points, bounds);\r\n        if (sub.length) {\r\n            result.push(...sub);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n function findStartAndEnd(points, count, loop, spanGaps) {\r\n    let start = 0;\r\n    let end = count - 1;\r\n    if (loop && !spanGaps) {\r\n        while(start < count && !points[start].skip){\r\n            start++;\r\n        }\r\n    }\r\n    while(start < count && points[start].skip){\r\n        start++;\r\n    }\r\n    start %= count;\r\n    if (loop) {\r\n        end += start;\r\n    }\r\n    while(end > start && points[end % count].skip){\r\n        end--;\r\n    }\r\n    end %= count;\r\n    return {\r\n        start,\r\n        end\r\n    };\r\n}\r\n function solidSegments(points, start, max, loop) {\r\n    const count = points.length;\r\n    const result = [];\r\n    let last = start;\r\n    let prev = points[start];\r\n    let end;\r\n    for(end = start + 1; end <= max; ++end){\r\n        const cur = points[end % count];\r\n        if (cur.skip || cur.stop) {\r\n            if (!prev.skip) {\r\n                loop = false;\r\n                result.push({\r\n                    start: start % count,\r\n                    end: (end - 1) % count,\r\n                    loop\r\n                });\r\n                start = last = cur.stop ? end : null;\r\n            }\r\n        } else {\r\n            last = end;\r\n            if (prev.skip) {\r\n                start = end;\r\n            }\r\n        }\r\n        prev = cur;\r\n    }\r\n    if (last !== null) {\r\n        result.push({\r\n            start: start % count,\r\n            end: last % count,\r\n            loop\r\n        });\r\n    }\r\n    return result;\r\n}\r\n function _computeSegments(line, segmentOptions) {\r\n    const points = line.points;\r\n    const spanGaps = line.options.spanGaps;\r\n    const count = points.length;\r\n    if (!count) {\r\n        return [];\r\n    }\r\n    const loop = !!line._loop;\r\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\r\n    if (spanGaps === true) {\r\n        return splitByStyles(line, [\r\n            {\r\n                start,\r\n                end,\r\n                loop\r\n            }\r\n        ], points, segmentOptions);\r\n    }\r\n    const max = end < start ? end + count : end;\r\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\r\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\r\n}\r\n function splitByStyles(line, segments, points, segmentOptions) {\r\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\r\n        return segments;\r\n    }\r\n    return doSplitByStyles(line, segments, points, segmentOptions);\r\n}\r\n function doSplitByStyles(line, segments, points, segmentOptions) {\r\n    const chartContext = line._chart.getContext();\r\n    const baseStyle = readStyle(line.options);\r\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\r\n    const count = points.length;\r\n    const result = [];\r\n    let prevStyle = baseStyle;\r\n    let start = segments[0].start;\r\n    let i = start;\r\n    function addStyle(s, e, l, st) {\r\n        const dir = spanGaps ? -1 : 1;\r\n        if (s === e) {\r\n            return;\r\n        }\r\n        s += count;\r\n        while(points[s % count].skip){\r\n            s -= dir;\r\n        }\r\n        while(points[e % count].skip){\r\n            e += dir;\r\n        }\r\n        if (s % count !== e % count) {\r\n            result.push({\r\n                start: s % count,\r\n                end: e % count,\r\n                loop: l,\r\n                style: st\r\n            });\r\n            prevStyle = st;\r\n            start = e % count;\r\n        }\r\n    }\r\n    for (const segment of segments){\r\n        start = spanGaps ? start : segment.start;\r\n        let prev = points[start % count];\r\n        let style;\r\n        for(i = start + 1; i <= segment.end; i++){\r\n            const pt = points[i % count];\r\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\r\n                type: 'segment',\r\n                p0: prev,\r\n                p1: pt,\r\n                p0DataIndex: (i - 1) % count,\r\n                p1DataIndex: i % count,\r\n                datasetIndex\r\n            })));\r\n            if (styleChanged(style, prevStyle)) {\r\n                addStyle(start, i - 1, segment.loop, prevStyle);\r\n            }\r\n            prev = pt;\r\n            prevStyle = style;\r\n        }\r\n        if (start < i - 1) {\r\n            addStyle(start, i - 1, segment.loop, prevStyle);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction readStyle(options) {\r\n    return {\r\n        backgroundColor: options.backgroundColor,\r\n        borderCapStyle: options.borderCapStyle,\r\n        borderDash: options.borderDash,\r\n        borderDashOffset: options.borderDashOffset,\r\n        borderJoinStyle: options.borderJoinStyle,\r\n        borderWidth: options.borderWidth,\r\n        borderColor: options.borderColor\r\n    };\r\n}\r\nfunction styleChanged(style, prevStyle) {\r\n    if (!prevStyle) {\r\n        return false;\r\n    }\r\n    const cache = [];\r\n    const replacer = function(key, value) {\r\n        if (!isPatternOrGradient(value)) {\r\n            return value;\r\n        }\r\n        if (!cache.includes(value)) {\r\n            cache.push(value);\r\n        }\r\n        return cache.indexOf(value);\r\n    };\r\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\r\n}\r\n\r\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\r\n\r\n", "/*!\r\n * Chart.js v4.4.1\r\n * https://www.chartjs.org\r\n * (c) 2023 Chart.js Contributors\r\n * Released under the MIT License\r\n */\r\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\r\nimport '@kurkle/color';\r\n\r\nclass Animator {\r\n    constructor(){\r\n        this._request = null;\r\n        this._charts = new Map();\r\n        this._running = false;\r\n        this._lastDate = undefined;\r\n    }\r\n _notify(chart, anims, date, type) {\r\n        const callbacks = anims.listeners[type];\r\n        const numSteps = anims.duration;\r\n        callbacks.forEach((fn)=>fn({\r\n                chart,\r\n                initial: anims.initial,\r\n                numSteps,\r\n                currentStep: Math.min(date - anims.start, numSteps)\r\n            }));\r\n    }\r\n _refresh() {\r\n        if (this._request) {\r\n            return;\r\n        }\r\n        this._running = true;\r\n        this._request = requestAnimFrame.call(window, ()=>{\r\n            this._update();\r\n            this._request = null;\r\n            if (this._running) {\r\n                this._refresh();\r\n            }\r\n        });\r\n    }\r\n _update(date = Date.now()) {\r\n        let remaining = 0;\r\n        this._charts.forEach((anims, chart)=>{\r\n            if (!anims.running || !anims.items.length) {\r\n                return;\r\n            }\r\n            const items = anims.items;\r\n            let i = items.length - 1;\r\n            let draw = false;\r\n            let item;\r\n            for(; i >= 0; --i){\r\n                item = items[i];\r\n                if (item._active) {\r\n                    if (item._total > anims.duration) {\r\n                        anims.duration = item._total;\r\n                    }\r\n                    item.tick(date);\r\n                    draw = true;\r\n                } else {\r\n                    items[i] = items[items.length - 1];\r\n                    items.pop();\r\n                }\r\n            }\r\n            if (draw) {\r\n                chart.draw();\r\n                this._notify(chart, anims, date, 'progress');\r\n            }\r\n            if (!items.length) {\r\n                anims.running = false;\r\n                this._notify(chart, anims, date, 'complete');\r\n                anims.initial = false;\r\n            }\r\n            remaining += items.length;\r\n        });\r\n        this._lastDate = date;\r\n        if (remaining === 0) {\r\n            this._running = false;\r\n        }\r\n    }\r\n _getAnims(chart) {\r\n        const charts = this._charts;\r\n        let anims = charts.get(chart);\r\n        if (!anims) {\r\n            anims = {\r\n                running: false,\r\n                initial: true,\r\n                items: [],\r\n                listeners: {\r\n                    complete: [],\r\n                    progress: []\r\n                }\r\n            };\r\n            charts.set(chart, anims);\r\n        }\r\n        return anims;\r\n    }\r\n listen(chart, event, cb) {\r\n        this._getAnims(chart).listeners[event].push(cb);\r\n    }\r\n add(chart, items) {\r\n        if (!items || !items.length) {\r\n            return;\r\n        }\r\n        this._getAnims(chart).items.push(...items);\r\n    }\r\n has(chart) {\r\n        return this._getAnims(chart).items.length > 0;\r\n    }\r\n start(chart) {\r\n        const anims = this._charts.get(chart);\r\n        if (!anims) {\r\n            return;\r\n        }\r\n        anims.running = true;\r\n        anims.start = Date.now();\r\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\r\n        this._refresh();\r\n    }\r\n    running(chart) {\r\n        if (!this._running) {\r\n            return false;\r\n        }\r\n        const anims = this._charts.get(chart);\r\n        if (!anims || !anims.running || !anims.items.length) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n stop(chart) {\r\n        const anims = this._charts.get(chart);\r\n        if (!anims || !anims.items.length) {\r\n            return;\r\n        }\r\n        const items = anims.items;\r\n        let i = items.length - 1;\r\n        for(; i >= 0; --i){\r\n            items[i].cancel();\r\n        }\r\n        anims.items = [];\r\n        this._notify(chart, anims, Date.now(), 'complete');\r\n    }\r\n remove(chart) {\r\n        return this._charts.delete(chart);\r\n    }\r\n}\r\nvar animator = /* #__PURE__ */ new Animator();\r\n\r\nconst transparent = 'transparent';\r\nconst interpolators = {\r\n    boolean (from, to, factor) {\r\n        return factor > 0.5 ? to : from;\r\n    },\r\n color (from, to, factor) {\r\n        const c0 = color(from || transparent);\r\n        const c1 = c0.valid && color(to || transparent);\r\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\r\n    },\r\n    number (from, to, factor) {\r\n        return from + (to - from) * factor;\r\n    }\r\n};\r\nclass Animation {\r\n    constructor(cfg, target, prop, to){\r\n        const currentValue = target[prop];\r\n        to = resolve([\r\n            cfg.to,\r\n            to,\r\n            currentValue,\r\n            cfg.from\r\n        ]);\r\n        const from = resolve([\r\n            cfg.from,\r\n            currentValue,\r\n            to\r\n        ]);\r\n        this._active = true;\r\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\r\n        this._easing = effects[cfg.easing] || effects.linear;\r\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\r\n        this._duration = this._total = Math.floor(cfg.duration);\r\n        this._loop = !!cfg.loop;\r\n        this._target = target;\r\n        this._prop = prop;\r\n        this._from = from;\r\n        this._to = to;\r\n        this._promises = undefined;\r\n    }\r\n    active() {\r\n        return this._active;\r\n    }\r\n    update(cfg, to, date) {\r\n        if (this._active) {\r\n            this._notify(false);\r\n            const currentValue = this._target[this._prop];\r\n            const elapsed = date - this._start;\r\n            const remain = this._duration - elapsed;\r\n            this._start = date;\r\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\r\n            this._total += elapsed;\r\n            this._loop = !!cfg.loop;\r\n            this._to = resolve([\r\n                cfg.to,\r\n                to,\r\n                currentValue,\r\n                cfg.from\r\n            ]);\r\n            this._from = resolve([\r\n                cfg.from,\r\n                currentValue,\r\n                to\r\n            ]);\r\n        }\r\n    }\r\n    cancel() {\r\n        if (this._active) {\r\n            this.tick(Date.now());\r\n            this._active = false;\r\n            this._notify(false);\r\n        }\r\n    }\r\n    tick(date) {\r\n        const elapsed = date - this._start;\r\n        const duration = this._duration;\r\n        const prop = this._prop;\r\n        const from = this._from;\r\n        const loop = this._loop;\r\n        const to = this._to;\r\n        let factor;\r\n        this._active = from !== to && (loop || elapsed < duration);\r\n        if (!this._active) {\r\n            this._target[prop] = to;\r\n            this._notify(true);\r\n            return;\r\n        }\r\n        if (elapsed < 0) {\r\n            this._target[prop] = from;\r\n            return;\r\n        }\r\n        factor = elapsed / duration % 2;\r\n        factor = loop && factor > 1 ? 2 - factor : factor;\r\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\r\n        this._target[prop] = this._fn(from, to, factor);\r\n    }\r\n    wait() {\r\n        const promises = this._promises || (this._promises = []);\r\n        return new Promise((res, rej)=>{\r\n            promises.push({\r\n                res,\r\n                rej\r\n            });\r\n        });\r\n    }\r\n    _notify(resolved) {\r\n        const method = resolved ? 'res' : 'rej';\r\n        const promises = this._promises || [];\r\n        for(let i = 0; i < promises.length; i++){\r\n            promises[i][method]();\r\n        }\r\n    }\r\n}\r\n\r\nclass Animations {\r\n    constructor(chart, config){\r\n        this._chart = chart;\r\n        this._properties = new Map();\r\n        this.configure(config);\r\n    }\r\n    configure(config) {\r\n        if (!isObject(config)) {\r\n            return;\r\n        }\r\n        const animationOptions = Object.keys(defaults.animation);\r\n        const animatedProps = this._properties;\r\n        Object.getOwnPropertyNames(config).forEach((key)=>{\r\n            const cfg = config[key];\r\n            if (!isObject(cfg)) {\r\n                return;\r\n            }\r\n            const resolved = {};\r\n            for (const option of animationOptions){\r\n                resolved[option] = cfg[option];\r\n            }\r\n            (isArray(cfg.properties) && cfg.properties || [\r\n                key\r\n            ]).forEach((prop)=>{\r\n                if (prop === key || !animatedProps.has(prop)) {\r\n                    animatedProps.set(prop, resolved);\r\n                }\r\n            });\r\n        });\r\n    }\r\n _animateOptions(target, values) {\r\n        const newOptions = values.options;\r\n        const options = resolveTargetOptions(target, newOptions);\r\n        if (!options) {\r\n            return [];\r\n        }\r\n        const animations = this._createAnimations(options, newOptions);\r\n        if (newOptions.$shared) {\r\n            awaitAll(target.options.$animations, newOptions).then(()=>{\r\n                target.options = newOptions;\r\n            }, ()=>{\r\n            });\r\n        }\r\n        return animations;\r\n    }\r\n _createAnimations(target, values) {\r\n        const animatedProps = this._properties;\r\n        const animations = [];\r\n        const running = target.$animations || (target.$animations = {});\r\n        const props = Object.keys(values);\r\n        const date = Date.now();\r\n        let i;\r\n        for(i = props.length - 1; i >= 0; --i){\r\n            const prop = props[i];\r\n            if (prop.charAt(0) === '$') {\r\n                continue;\r\n            }\r\n            if (prop === 'options') {\r\n                animations.push(...this._animateOptions(target, values));\r\n                continue;\r\n            }\r\n            const value = values[prop];\r\n            let animation = running[prop];\r\n            const cfg = animatedProps.get(prop);\r\n            if (animation) {\r\n                if (cfg && animation.active()) {\r\n                    animation.update(cfg, value, date);\r\n                    continue;\r\n                } else {\r\n                    animation.cancel();\r\n                }\r\n            }\r\n            if (!cfg || !cfg.duration) {\r\n                target[prop] = value;\r\n                continue;\r\n            }\r\n            running[prop] = animation = new Animation(cfg, target, prop, value);\r\n            animations.push(animation);\r\n        }\r\n        return animations;\r\n    }\r\n update(target, values) {\r\n        if (this._properties.size === 0) {\r\n            Object.assign(target, values);\r\n            return;\r\n        }\r\n        const animations = this._createAnimations(target, values);\r\n        if (animations.length) {\r\n            animator.add(this._chart, animations);\r\n            return true;\r\n        }\r\n    }\r\n}\r\nfunction awaitAll(animations, properties) {\r\n    const running = [];\r\n    const keys = Object.keys(properties);\r\n    for(let i = 0; i < keys.length; i++){\r\n        const anim = animations[keys[i]];\r\n        if (anim && anim.active()) {\r\n            running.push(anim.wait());\r\n        }\r\n    }\r\n    return Promise.all(running);\r\n}\r\nfunction resolveTargetOptions(target, newOptions) {\r\n    if (!newOptions) {\r\n        return;\r\n    }\r\n    let options = target.options;\r\n    if (!options) {\r\n        target.options = newOptions;\r\n        return;\r\n    }\r\n    if (options.$shared) {\r\n        target.options = options = Object.assign({}, options, {\r\n            $shared: false,\r\n            $animations: {}\r\n        });\r\n    }\r\n    return options;\r\n}\r\n\r\nfunction scaleClip(scale, allowedOverflow) {\r\n    const opts = scale && scale.options || {};\r\n    const reverse = opts.reverse;\r\n    const min = opts.min === undefined ? allowedOverflow : 0;\r\n    const max = opts.max === undefined ? allowedOverflow : 0;\r\n    return {\r\n        start: reverse ? max : min,\r\n        end: reverse ? min : max\r\n    };\r\n}\r\nfunction defaultClip(xScale, yScale, allowedOverflow) {\r\n    if (allowedOverflow === false) {\r\n        return false;\r\n    }\r\n    const x = scaleClip(xScale, allowedOverflow);\r\n    const y = scaleClip(yScale, allowedOverflow);\r\n    return {\r\n        top: y.end,\r\n        right: x.end,\r\n        bottom: y.start,\r\n        left: x.start\r\n    };\r\n}\r\nfunction toClip(value) {\r\n    let t, r, b, l;\r\n    if (isObject(value)) {\r\n        t = value.top;\r\n        r = value.right;\r\n        b = value.bottom;\r\n        l = value.left;\r\n    } else {\r\n        t = r = b = l = value;\r\n    }\r\n    return {\r\n        top: t,\r\n        right: r,\r\n        bottom: b,\r\n        left: l,\r\n        disabled: value === false\r\n    };\r\n}\r\nfunction getSortedDatasetIndices(chart, filterVisible) {\r\n    const keys = [];\r\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\r\n    let i, ilen;\r\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\r\n        keys.push(metasets[i].index);\r\n    }\r\n    return keys;\r\n}\r\nfunction applyStack(stack, value, dsIndex, options = {}) {\r\n    const keys = stack.keys;\r\n    const singleMode = options.mode === 'single';\r\n    let i, ilen, datasetIndex, otherValue;\r\n    if (value === null) {\r\n        return;\r\n    }\r\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\r\n        datasetIndex = +keys[i];\r\n        if (datasetIndex === dsIndex) {\r\n            if (options.all) {\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        otherValue = stack.values[datasetIndex];\r\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\r\n            value += otherValue;\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction convertObjectDataToArray(data) {\r\n    const keys = Object.keys(data);\r\n    const adata = new Array(keys.length);\r\n    let i, ilen, key;\r\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\r\n        key = keys[i];\r\n        adata[i] = {\r\n            x: key,\r\n            y: data[key]\r\n        };\r\n    }\r\n    return adata;\r\n}\r\nfunction isStacked(scale, meta) {\r\n    const stacked = scale && scale.options.stacked;\r\n    return stacked || stacked === undefined && meta.stack !== undefined;\r\n}\r\nfunction getStackKey(indexScale, valueScale, meta) {\r\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\r\n}\r\nfunction getUserBounds(scale) {\r\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\r\n    return {\r\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\r\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\r\n    };\r\n}\r\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\r\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\r\n    return subStack[indexValue] || (subStack[indexValue] = {});\r\n}\r\nfunction getLastIndexInStack(stack, vScale, positive, type) {\r\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\r\n        const value = stack[meta.index];\r\n        if (positive && value > 0 || !positive && value < 0) {\r\n            return meta.index;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction updateStacks(controller, parsed) {\r\n    const { chart , _cachedMeta: meta  } = controller;\r\n    const stacks = chart._stacks || (chart._stacks = {});\r\n    const { iScale , vScale , index: datasetIndex  } = meta;\r\n    const iAxis = iScale.axis;\r\n    const vAxis = vScale.axis;\r\n    const key = getStackKey(iScale, vScale, meta);\r\n    const ilen = parsed.length;\r\n    let stack;\r\n    for(let i = 0; i < ilen; ++i){\r\n        const item = parsed[i];\r\n        const { [iAxis]: index , [vAxis]: value  } = item;\r\n        const itemStacks = item._stacks || (item._stacks = {});\r\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\r\n        stack[datasetIndex] = value;\r\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\r\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\r\n        const visualValues = stack._visualValues || (stack._visualValues = {});\r\n        visualValues[datasetIndex] = value;\r\n    }\r\n}\r\nfunction getFirstScaleId(chart, axis) {\r\n    const scales = chart.scales;\r\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\r\n}\r\nfunction createDatasetContext(parent, index) {\r\n    return createContext(parent, {\r\n        active: false,\r\n        dataset: undefined,\r\n        datasetIndex: index,\r\n        index,\r\n        mode: 'default',\r\n        type: 'dataset'\r\n    });\r\n}\r\nfunction createDataContext(parent, index, element) {\r\n    return createContext(parent, {\r\n        active: false,\r\n        dataIndex: index,\r\n        parsed: undefined,\r\n        raw: undefined,\r\n        element,\r\n        index,\r\n        mode: 'default',\r\n        type: 'data'\r\n    });\r\n}\r\nfunction clearStacks(meta, items) {\r\n    const datasetIndex = meta.controller.index;\r\n    const axis = meta.vScale && meta.vScale.axis;\r\n    if (!axis) {\r\n        return;\r\n    }\r\n    items = items || meta._parsed;\r\n    for (const parsed of items){\r\n        const stacks = parsed._stacks;\r\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\r\n            return;\r\n        }\r\n        delete stacks[axis][datasetIndex];\r\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\r\n            delete stacks[axis]._visualValues[datasetIndex];\r\n        }\r\n    }\r\n}\r\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\r\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\r\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\r\n        keys: getSortedDatasetIndices(chart, true),\r\n        values: null\r\n    };\r\nclass DatasetController {\r\n static defaults = {};\r\n static datasetElementType = null;\r\n static dataElementType = null;\r\n constructor(chart, datasetIndex){\r\n        this.chart = chart;\r\n        this._ctx = chart.ctx;\r\n        this.index = datasetIndex;\r\n        this._cachedDataOpts = {};\r\n        this._cachedMeta = this.getMeta();\r\n        this._type = this._cachedMeta.type;\r\n        this.options = undefined;\r\n         this._parsing = false;\r\n        this._data = undefined;\r\n        this._objectData = undefined;\r\n        this._sharedOptions = undefined;\r\n        this._drawStart = undefined;\r\n        this._drawCount = undefined;\r\n        this.enableOptionSharing = false;\r\n        this.supportsDecimation = false;\r\n        this.$context = undefined;\r\n        this._syncList = [];\r\n        this.datasetElementType = new.target.datasetElementType;\r\n        this.dataElementType = new.target.dataElementType;\r\n        this.initialize();\r\n    }\r\n    initialize() {\r\n        const meta = this._cachedMeta;\r\n        this.configure();\r\n        this.linkScales();\r\n        meta._stacked = isStacked(meta.vScale, meta);\r\n        this.addElements();\r\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\r\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\r\n        }\r\n    }\r\n    updateIndex(datasetIndex) {\r\n        if (this.index !== datasetIndex) {\r\n            clearStacks(this._cachedMeta);\r\n        }\r\n        this.index = datasetIndex;\r\n    }\r\n    linkScales() {\r\n        const chart = this.chart;\r\n        const meta = this._cachedMeta;\r\n        const dataset = this.getDataset();\r\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\r\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\r\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\r\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\r\n        const indexAxis = meta.indexAxis;\r\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\r\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\r\n        meta.xScale = this.getScaleForId(xid);\r\n        meta.yScale = this.getScaleForId(yid);\r\n        meta.rScale = this.getScaleForId(rid);\r\n        meta.iScale = this.getScaleForId(iid);\r\n        meta.vScale = this.getScaleForId(vid);\r\n    }\r\n    getDataset() {\r\n        return this.chart.data.datasets[this.index];\r\n    }\r\n    getMeta() {\r\n        return this.chart.getDatasetMeta(this.index);\r\n    }\r\n getScaleForId(scaleID) {\r\n        return this.chart.scales[scaleID];\r\n    }\r\n _getOtherScale(scale) {\r\n        const meta = this._cachedMeta;\r\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\r\n    }\r\n    reset() {\r\n        this._update('reset');\r\n    }\r\n _destroy() {\r\n        const meta = this._cachedMeta;\r\n        if (this._data) {\r\n            unlistenArrayEvents(this._data, this);\r\n        }\r\n        if (meta._stacked) {\r\n            clearStacks(meta);\r\n        }\r\n    }\r\n _dataCheck() {\r\n        const dataset = this.getDataset();\r\n        const data = dataset.data || (dataset.data = []);\r\n        const _data = this._data;\r\n        if (isObject(data)) {\r\n            this._data = convertObjectDataToArray(data);\r\n        } else if (_data !== data) {\r\n            if (_data) {\r\n                unlistenArrayEvents(_data, this);\r\n                const meta = this._cachedMeta;\r\n                clearStacks(meta);\r\n                meta._parsed = [];\r\n            }\r\n            if (data && Object.isExtensible(data)) {\r\n                listenArrayEvents(data, this);\r\n            }\r\n            this._syncList = [];\r\n            this._data = data;\r\n        }\r\n    }\r\n    addElements() {\r\n        const meta = this._cachedMeta;\r\n        this._dataCheck();\r\n        if (this.datasetElementType) {\r\n            meta.dataset = new this.datasetElementType();\r\n        }\r\n    }\r\n    buildOrUpdateElements(resetNewElements) {\r\n        const meta = this._cachedMeta;\r\n        const dataset = this.getDataset();\r\n        let stackChanged = false;\r\n        this._dataCheck();\r\n        const oldStacked = meta._stacked;\r\n        meta._stacked = isStacked(meta.vScale, meta);\r\n        if (meta.stack !== dataset.stack) {\r\n            stackChanged = true;\r\n            clearStacks(meta);\r\n            meta.stack = dataset.stack;\r\n        }\r\n        this._resyncElements(resetNewElements);\r\n        if (stackChanged || oldStacked !== meta._stacked) {\r\n            updateStacks(this, meta._parsed);\r\n        }\r\n    }\r\n configure() {\r\n        const config = this.chart.config;\r\n        const scopeKeys = config.datasetScopeKeys(this._type);\r\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\r\n        this.options = config.createResolver(scopes, this.getContext());\r\n        this._parsing = this.options.parsing;\r\n        this._cachedDataOpts = {};\r\n    }\r\n parse(start, count) {\r\n        const { _cachedMeta: meta , _data: data  } = this;\r\n        const { iScale , _stacked  } = meta;\r\n        const iAxis = iScale.axis;\r\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\r\n        let prev = start > 0 && meta._parsed[start - 1];\r\n        let i, cur, parsed;\r\n        if (this._parsing === false) {\r\n            meta._parsed = data;\r\n            meta._sorted = true;\r\n            parsed = data;\r\n        } else {\r\n            if (isArray(data[start])) {\r\n                parsed = this.parseArrayData(meta, data, start, count);\r\n            } else if (isObject(data[start])) {\r\n                parsed = this.parseObjectData(meta, data, start, count);\r\n            } else {\r\n                parsed = this.parsePrimitiveData(meta, data, start, count);\r\n            }\r\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\r\n            for(i = 0; i < count; ++i){\r\n                meta._parsed[i + start] = cur = parsed[i];\r\n                if (sorted) {\r\n                    if (isNotInOrderComparedToPrev()) {\r\n                        sorted = false;\r\n                    }\r\n                    prev = cur;\r\n                }\r\n            }\r\n            meta._sorted = sorted;\r\n        }\r\n        if (_stacked) {\r\n            updateStacks(this, parsed);\r\n        }\r\n    }\r\n parsePrimitiveData(meta, data, start, count) {\r\n        const { iScale , vScale  } = meta;\r\n        const iAxis = iScale.axis;\r\n        const vAxis = vScale.axis;\r\n        const labels = iScale.getLabels();\r\n        const singleScale = iScale === vScale;\r\n        const parsed = new Array(count);\r\n        let i, ilen, index;\r\n        for(i = 0, ilen = count; i < ilen; ++i){\r\n            index = i + start;\r\n            parsed[i] = {\r\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\r\n                [vAxis]: vScale.parse(data[index], index)\r\n            };\r\n        }\r\n        return parsed;\r\n    }\r\n parseArrayData(meta, data, start, count) {\r\n        const { xScale , yScale  } = meta;\r\n        const parsed = new Array(count);\r\n        let i, ilen, index, item;\r\n        for(i = 0, ilen = count; i < ilen; ++i){\r\n            index = i + start;\r\n            item = data[index];\r\n            parsed[i] = {\r\n                x: xScale.parse(item[0], index),\r\n                y: yScale.parse(item[1], index)\r\n            };\r\n        }\r\n        return parsed;\r\n    }\r\n parseObjectData(meta, data, start, count) {\r\n        const { xScale , yScale  } = meta;\r\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\r\n        const parsed = new Array(count);\r\n        let i, ilen, index, item;\r\n        for(i = 0, ilen = count; i < ilen; ++i){\r\n            index = i + start;\r\n            item = data[index];\r\n            parsed[i] = {\r\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\r\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\r\n            };\r\n        }\r\n        return parsed;\r\n    }\r\n getParsed(index) {\r\n        return this._cachedMeta._parsed[index];\r\n    }\r\n getDataElement(index) {\r\n        return this._cachedMeta.data[index];\r\n    }\r\n applyStack(scale, parsed, mode) {\r\n        const chart = this.chart;\r\n        const meta = this._cachedMeta;\r\n        const value = parsed[scale.axis];\r\n        const stack = {\r\n            keys: getSortedDatasetIndices(chart, true),\r\n            values: parsed._stacks[scale.axis]._visualValues\r\n        };\r\n        return applyStack(stack, value, meta.index, {\r\n            mode\r\n        });\r\n    }\r\n updateRangeFromParsed(range, scale, parsed, stack) {\r\n        const parsedValue = parsed[scale.axis];\r\n        let value = parsedValue === null ? NaN : parsedValue;\r\n        const values = stack && parsed._stacks[scale.axis];\r\n        if (stack && values) {\r\n            stack.values = values;\r\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\r\n        }\r\n        range.min = Math.min(range.min, value);\r\n        range.max = Math.max(range.max, value);\r\n    }\r\n getMinMax(scale, canStack) {\r\n        const meta = this._cachedMeta;\r\n        const _parsed = meta._parsed;\r\n        const sorted = meta._sorted && scale === meta.iScale;\r\n        const ilen = _parsed.length;\r\n        const otherScale = this._getOtherScale(scale);\r\n        const stack = createStack(canStack, meta, this.chart);\r\n        const range = {\r\n            min: Number.POSITIVE_INFINITY,\r\n            max: Number.NEGATIVE_INFINITY\r\n        };\r\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\r\n        let i, parsed;\r\n        function _skip() {\r\n            parsed = _parsed[i];\r\n            const otherValue = parsed[otherScale.axis];\r\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\r\n        }\r\n        for(i = 0; i < ilen; ++i){\r\n            if (_skip()) {\r\n                continue;\r\n            }\r\n            this.updateRangeFromParsed(range, scale, parsed, stack);\r\n            if (sorted) {\r\n                break;\r\n            }\r\n        }\r\n        if (sorted) {\r\n            for(i = ilen - 1; i >= 0; --i){\r\n                if (_skip()) {\r\n                    continue;\r\n                }\r\n                this.updateRangeFromParsed(range, scale, parsed, stack);\r\n                break;\r\n            }\r\n        }\r\n        return range;\r\n    }\r\n    getAllParsedValues(scale) {\r\n        const parsed = this._cachedMeta._parsed;\r\n        const values = [];\r\n        let i, ilen, value;\r\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\r\n            value = parsed[i][scale.axis];\r\n            if (isNumberFinite(value)) {\r\n                values.push(value);\r\n            }\r\n        }\r\n        return values;\r\n    }\r\n getMaxOverflow() {\r\n        return false;\r\n    }\r\n getLabelAndValue(index) {\r\n        const meta = this._cachedMeta;\r\n        const iScale = meta.iScale;\r\n        const vScale = meta.vScale;\r\n        const parsed = this.getParsed(index);\r\n        return {\r\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\r\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\r\n        };\r\n    }\r\n _update(mode) {\r\n        const meta = this._cachedMeta;\r\n        this.update(mode || 'default');\r\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\r\n    }\r\n update(mode) {}\r\n    draw() {\r\n        const ctx = this._ctx;\r\n        const chart = this.chart;\r\n        const meta = this._cachedMeta;\r\n        const elements = meta.data || [];\r\n        const area = chart.chartArea;\r\n        const active = [];\r\n        const start = this._drawStart || 0;\r\n        const count = this._drawCount || elements.length - start;\r\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\r\n        let i;\r\n        if (meta.dataset) {\r\n            meta.dataset.draw(ctx, area, start, count);\r\n        }\r\n        for(i = start; i < start + count; ++i){\r\n            const element = elements[i];\r\n            if (element.hidden) {\r\n                continue;\r\n            }\r\n            if (element.active && drawActiveElementsOnTop) {\r\n                active.push(element);\r\n            } else {\r\n                element.draw(ctx, area);\r\n            }\r\n        }\r\n        for(i = 0; i < active.length; ++i){\r\n            active[i].draw(ctx, area);\r\n        }\r\n    }\r\n getStyle(index, active) {\r\n        const mode = active ? 'active' : 'default';\r\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\r\n    }\r\n getContext(index, active, mode) {\r\n        const dataset = this.getDataset();\r\n        let context;\r\n        if (index >= 0 && index < this._cachedMeta.data.length) {\r\n            const element = this._cachedMeta.data[index];\r\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\r\n            context.parsed = this.getParsed(index);\r\n            context.raw = dataset.data[index];\r\n            context.index = context.dataIndex = index;\r\n        } else {\r\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\r\n            context.dataset = dataset;\r\n            context.index = context.datasetIndex = this.index;\r\n        }\r\n        context.active = !!active;\r\n        context.mode = mode;\r\n        return context;\r\n    }\r\n resolveDatasetElementOptions(mode) {\r\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\r\n    }\r\n resolveDataElementOptions(index, mode) {\r\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\r\n    }\r\n _resolveElementOptions(elementType, mode = 'default', index) {\r\n        const active = mode === 'active';\r\n        const cache = this._cachedDataOpts;\r\n        const cacheKey = elementType + '-' + mode;\r\n        const cached = cache[cacheKey];\r\n        const sharing = this.enableOptionSharing && defined(index);\r\n        if (cached) {\r\n            return cloneIfNotShared(cached, sharing);\r\n        }\r\n        const config = this.chart.config;\r\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\r\n        const prefixes = active ? [\r\n            `${elementType}Hover`,\r\n            'hover',\r\n            elementType,\r\n            ''\r\n        ] : [\r\n            elementType,\r\n            ''\r\n        ];\r\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n        const names = Object.keys(defaults.elements[elementType]);\r\n        const context = ()=>this.getContext(index, active, mode);\r\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\r\n        if (values.$shared) {\r\n            values.$shared = sharing;\r\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\r\n        }\r\n        return values;\r\n    }\r\n _resolveAnimations(index, transition, active) {\r\n        const chart = this.chart;\r\n        const cache = this._cachedDataOpts;\r\n        const cacheKey = `animation-${transition}`;\r\n        const cached = cache[cacheKey];\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        let options;\r\n        if (chart.options.animation !== false) {\r\n            const config = this.chart.config;\r\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\r\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\r\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\r\n        }\r\n        const animations = new Animations(chart, options && options.animations);\r\n        if (options && options._cacheable) {\r\n            cache[cacheKey] = Object.freeze(animations);\r\n        }\r\n        return animations;\r\n    }\r\n getSharedOptions(options) {\r\n        if (!options.$shared) {\r\n            return;\r\n        }\r\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\r\n    }\r\n includeOptions(mode, sharedOptions) {\r\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\r\n    }\r\n _getSharedOptions(start, mode) {\r\n        const firstOpts = this.resolveDataElementOptions(start, mode);\r\n        const previouslySharedOptions = this._sharedOptions;\r\n        const sharedOptions = this.getSharedOptions(firstOpts);\r\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\r\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n        return {\r\n            sharedOptions,\r\n            includeOptions\r\n        };\r\n    }\r\n updateElement(element, index, properties, mode) {\r\n        if (isDirectUpdateMode(mode)) {\r\n            Object.assign(element, properties);\r\n        } else {\r\n            this._resolveAnimations(index, mode).update(element, properties);\r\n        }\r\n    }\r\n updateSharedOptions(sharedOptions, mode, newOptions) {\r\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\r\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\r\n        }\r\n    }\r\n _setStyle(element, index, mode, active) {\r\n        element.active = active;\r\n        const options = this.getStyle(index, active);\r\n        this._resolveAnimations(index, mode, active).update(element, {\r\n            options: !active && this.getSharedOptions(options) || options\r\n        });\r\n    }\r\n    removeHoverStyle(element, datasetIndex, index) {\r\n        this._setStyle(element, index, 'active', false);\r\n    }\r\n    setHoverStyle(element, datasetIndex, index) {\r\n        this._setStyle(element, index, 'active', true);\r\n    }\r\n _removeDatasetHoverStyle() {\r\n        const element = this._cachedMeta.dataset;\r\n        if (element) {\r\n            this._setStyle(element, undefined, 'active', false);\r\n        }\r\n    }\r\n _setDatasetHoverStyle() {\r\n        const element = this._cachedMeta.dataset;\r\n        if (element) {\r\n            this._setStyle(element, undefined, 'active', true);\r\n        }\r\n    }\r\n _resyncElements(resetNewElements) {\r\n        const data = this._data;\r\n        const elements = this._cachedMeta.data;\r\n        for (const [method, arg1, arg2] of this._syncList){\r\n            this[method](arg1, arg2);\r\n        }\r\n        this._syncList = [];\r\n        const numMeta = elements.length;\r\n        const numData = data.length;\r\n        const count = Math.min(numData, numMeta);\r\n        if (count) {\r\n            this.parse(0, count);\r\n        }\r\n        if (numData > numMeta) {\r\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\r\n        } else if (numData < numMeta) {\r\n            this._removeElements(numData, numMeta - numData);\r\n        }\r\n    }\r\n _insertElements(start, count, resetNewElements = true) {\r\n        const meta = this._cachedMeta;\r\n        const data = meta.data;\r\n        const end = start + count;\r\n        let i;\r\n        const move = (arr)=>{\r\n            arr.length += count;\r\n            for(i = arr.length - 1; i >= end; i--){\r\n                arr[i] = arr[i - count];\r\n            }\r\n        };\r\n        move(data);\r\n        for(i = start; i < end; ++i){\r\n            data[i] = new this.dataElementType();\r\n        }\r\n        if (this._parsing) {\r\n            move(meta._parsed);\r\n        }\r\n        this.parse(start, count);\r\n        if (resetNewElements) {\r\n            this.updateElements(data, start, count, 'reset');\r\n        }\r\n    }\r\n    updateElements(element, start, count, mode) {}\r\n _removeElements(start, count) {\r\n        const meta = this._cachedMeta;\r\n        if (this._parsing) {\r\n            const removed = meta._parsed.splice(start, count);\r\n            if (meta._stacked) {\r\n                clearStacks(meta, removed);\r\n            }\r\n        }\r\n        meta.data.splice(start, count);\r\n    }\r\n _sync(args) {\r\n        if (this._parsing) {\r\n            this._syncList.push(args);\r\n        } else {\r\n            const [method, arg1, arg2] = args;\r\n            this[method](arg1, arg2);\r\n        }\r\n        this.chart._dataChanges.push([\r\n            this.index,\r\n            ...args\r\n        ]);\r\n    }\r\n    _onDataPush() {\r\n        const count = arguments.length;\r\n        this._sync([\r\n            '_insertElements',\r\n            this.getDataset().data.length - count,\r\n            count\r\n        ]);\r\n    }\r\n    _onDataPop() {\r\n        this._sync([\r\n            '_removeElements',\r\n            this._cachedMeta.data.length - 1,\r\n            1\r\n        ]);\r\n    }\r\n    _onDataShift() {\r\n        this._sync([\r\n            '_removeElements',\r\n            0,\r\n            1\r\n        ]);\r\n    }\r\n    _onDataSplice(start, count) {\r\n        if (count) {\r\n            this._sync([\r\n                '_removeElements',\r\n                start,\r\n                count\r\n            ]);\r\n        }\r\n        const newCount = arguments.length - 2;\r\n        if (newCount) {\r\n            this._sync([\r\n                '_insertElements',\r\n                start,\r\n                newCount\r\n            ]);\r\n        }\r\n    }\r\n    _onDataUnshift() {\r\n        this._sync([\r\n            '_insertElements',\r\n            0,\r\n            arguments.length\r\n        ]);\r\n    }\r\n}\r\n\r\nfunction getAllScaleValues(scale, type) {\r\n    if (!scale._cache.$bar) {\r\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\r\n        let values = [];\r\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\r\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\r\n        }\r\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\r\n    }\r\n    return scale._cache.$bar;\r\n}\r\n function computeMinSampleSize(meta) {\r\n    const scale = meta.iScale;\r\n    const values = getAllScaleValues(scale, meta.type);\r\n    let min = scale._length;\r\n    let i, ilen, curr, prev;\r\n    const updateMinAndPrev = ()=>{\r\n        if (curr === 32767 || curr === -32768) {\r\n            return;\r\n        }\r\n        if (defined(prev)) {\r\n            min = Math.min(min, Math.abs(curr - prev) || min);\r\n        }\r\n        prev = curr;\r\n    };\r\n    for(i = 0, ilen = values.length; i < ilen; ++i){\r\n        curr = scale.getPixelForValue(values[i]);\r\n        updateMinAndPrev();\r\n    }\r\n    prev = undefined;\r\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\r\n        curr = scale.getPixelForTick(i);\r\n        updateMinAndPrev();\r\n    }\r\n    return min;\r\n}\r\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\r\n    const thickness = options.barThickness;\r\n    let size, ratio;\r\n    if (isNullOrUndef(thickness)) {\r\n        size = ruler.min * options.categoryPercentage;\r\n        ratio = options.barPercentage;\r\n    } else {\r\n        size = thickness * stackCount;\r\n        ratio = 1;\r\n    }\r\n    return {\r\n        chunk: size / stackCount,\r\n        ratio,\r\n        start: ruler.pixels[index] - size / 2\r\n    };\r\n}\r\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\r\n    const pixels = ruler.pixels;\r\n    const curr = pixels[index];\r\n    let prev = index > 0 ? pixels[index - 1] : null;\r\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\r\n    const percent = options.categoryPercentage;\r\n    if (prev === null) {\r\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\r\n    }\r\n    if (next === null) {\r\n        next = curr + curr - prev;\r\n    }\r\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\r\n    const size = Math.abs(next - prev) / 2 * percent;\r\n    return {\r\n        chunk: size / stackCount,\r\n        ratio: options.barPercentage,\r\n        start\r\n    };\r\n}\r\nfunction parseFloatBar(entry, item, vScale, i) {\r\n    const startValue = vScale.parse(entry[0], i);\r\n    const endValue = vScale.parse(entry[1], i);\r\n    const min = Math.min(startValue, endValue);\r\n    const max = Math.max(startValue, endValue);\r\n    let barStart = min;\r\n    let barEnd = max;\r\n    if (Math.abs(min) > Math.abs(max)) {\r\n        barStart = max;\r\n        barEnd = min;\r\n    }\r\n    item[vScale.axis] = barEnd;\r\n    item._custom = {\r\n        barStart,\r\n        barEnd,\r\n        start: startValue,\r\n        end: endValue,\r\n        min,\r\n        max\r\n    };\r\n}\r\nfunction parseValue(entry, item, vScale, i) {\r\n    if (isArray(entry)) {\r\n        parseFloatBar(entry, item, vScale, i);\r\n    } else {\r\n        item[vScale.axis] = vScale.parse(entry, i);\r\n    }\r\n    return item;\r\n}\r\nfunction parseArrayOrPrimitive(meta, data, start, count) {\r\n    const iScale = meta.iScale;\r\n    const vScale = meta.vScale;\r\n    const labels = iScale.getLabels();\r\n    const singleScale = iScale === vScale;\r\n    const parsed = [];\r\n    let i, ilen, item, entry;\r\n    for(i = start, ilen = start + count; i < ilen; ++i){\r\n        entry = data[i];\r\n        item = {};\r\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\r\n        parsed.push(parseValue(entry, item, vScale, i));\r\n    }\r\n    return parsed;\r\n}\r\nfunction isFloatBar(custom) {\r\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\r\n}\r\nfunction barSign(size, vScale, actualBase) {\r\n    if (size !== 0) {\r\n        return sign(size);\r\n    }\r\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\r\n}\r\nfunction borderProps(properties) {\r\n    let reverse, start, end, top, bottom;\r\n    if (properties.horizontal) {\r\n        reverse = properties.base > properties.x;\r\n        start = 'left';\r\n        end = 'right';\r\n    } else {\r\n        reverse = properties.base < properties.y;\r\n        start = 'bottom';\r\n        end = 'top';\r\n    }\r\n    if (reverse) {\r\n        top = 'end';\r\n        bottom = 'start';\r\n    } else {\r\n        top = 'start';\r\n        bottom = 'end';\r\n    }\r\n    return {\r\n        start,\r\n        end,\r\n        reverse,\r\n        top,\r\n        bottom\r\n    };\r\n}\r\nfunction setBorderSkipped(properties, options, stack, index) {\r\n    let edge = options.borderSkipped;\r\n    const res = {};\r\n    if (!edge) {\r\n        properties.borderSkipped = res;\r\n        return;\r\n    }\r\n    if (edge === true) {\r\n        properties.borderSkipped = {\r\n            top: true,\r\n            right: true,\r\n            bottom: true,\r\n            left: true\r\n        };\r\n        return;\r\n    }\r\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\r\n    if (edge === 'middle' && stack) {\r\n        properties.enableBorderRadius = true;\r\n        if ((stack._top || 0) === index) {\r\n            edge = top;\r\n        } else if ((stack._bottom || 0) === index) {\r\n            edge = bottom;\r\n        } else {\r\n            res[parseEdge(bottom, start, end, reverse)] = true;\r\n            edge = top;\r\n        }\r\n    }\r\n    res[parseEdge(edge, start, end, reverse)] = true;\r\n    properties.borderSkipped = res;\r\n}\r\nfunction parseEdge(edge, a, b, reverse) {\r\n    if (reverse) {\r\n        edge = swap(edge, a, b);\r\n        edge = startEnd(edge, b, a);\r\n    } else {\r\n        edge = startEnd(edge, a, b);\r\n    }\r\n    return edge;\r\n}\r\nfunction swap(orig, v1, v2) {\r\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\r\n}\r\nfunction startEnd(v, start, end) {\r\n    return v === 'start' ? start : v === 'end' ? end : v;\r\n}\r\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\r\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\r\n}\r\nclass BarController extends DatasetController {\r\n    static id = 'bar';\r\n static defaults = {\r\n        datasetElementType: false,\r\n        dataElementType: 'bar',\r\n        categoryPercentage: 0.8,\r\n        barPercentage: 0.9,\r\n        grouped: true,\r\n        animations: {\r\n            numbers: {\r\n                type: 'number',\r\n                properties: [\r\n                    'x',\r\n                    'y',\r\n                    'base',\r\n                    'width',\r\n                    'height'\r\n                ]\r\n            }\r\n        }\r\n    };\r\n static overrides = {\r\n        scales: {\r\n            _index_: {\r\n                type: 'category',\r\n                offset: true,\r\n                grid: {\r\n                    offset: true\r\n                }\r\n            },\r\n            _value_: {\r\n                type: 'linear',\r\n                beginAtZero: true\r\n            }\r\n        }\r\n    };\r\n parsePrimitiveData(meta, data, start, count) {\r\n        return parseArrayOrPrimitive(meta, data, start, count);\r\n    }\r\n parseArrayData(meta, data, start, count) {\r\n        return parseArrayOrPrimitive(meta, data, start, count);\r\n    }\r\n parseObjectData(meta, data, start, count) {\r\n        const { iScale , vScale  } = meta;\r\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\r\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\r\n        const parsed = [];\r\n        let i, ilen, item, obj;\r\n        for(i = start, ilen = start + count; i < ilen; ++i){\r\n            obj = data[i];\r\n            item = {};\r\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\r\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\r\n        }\r\n        return parsed;\r\n    }\r\n updateRangeFromParsed(range, scale, parsed, stack) {\r\n        super.updateRangeFromParsed(range, scale, parsed, stack);\r\n        const custom = parsed._custom;\r\n        if (custom && scale === this._cachedMeta.vScale) {\r\n            range.min = Math.min(range.min, custom.min);\r\n            range.max = Math.max(range.max, custom.max);\r\n        }\r\n    }\r\n getMaxOverflow() {\r\n        return 0;\r\n    }\r\n getLabelAndValue(index) {\r\n        const meta = this._cachedMeta;\r\n        const { iScale , vScale  } = meta;\r\n        const parsed = this.getParsed(index);\r\n        const custom = parsed._custom;\r\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\r\n        return {\r\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\r\n            value\r\n        };\r\n    }\r\n    initialize() {\r\n        this.enableOptionSharing = true;\r\n        super.initialize();\r\n        const meta = this._cachedMeta;\r\n        meta.stack = this.getDataset().stack;\r\n    }\r\n    update(mode) {\r\n        const meta = this._cachedMeta;\r\n        this.updateElements(meta.data, 0, meta.data.length, mode);\r\n    }\r\n    updateElements(bars, start, count, mode) {\r\n        const reset = mode === 'reset';\r\n        const { index , _cachedMeta: { vScale  }  } = this;\r\n        const base = vScale.getBasePixel();\r\n        const horizontal = vScale.isHorizontal();\r\n        const ruler = this._getRuler();\r\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\r\n        for(let i = start; i < start + count; i++){\r\n            const parsed = this.getParsed(i);\r\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\r\n                base,\r\n                head: base\r\n            } : this._calculateBarValuePixels(i);\r\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\r\n            const stack = (parsed._stacks || {})[vScale.axis];\r\n            const properties = {\r\n                horizontal,\r\n                base: vpixels.base,\r\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\r\n                x: horizontal ? vpixels.head : ipixels.center,\r\n                y: horizontal ? ipixels.center : vpixels.head,\r\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\r\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\r\n            };\r\n            if (includeOptions) {\r\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\r\n            }\r\n            const options = properties.options || bars[i].options;\r\n            setBorderSkipped(properties, options, stack, index);\r\n            setInflateAmount(properties, options, ruler.ratio);\r\n            this.updateElement(bars[i], i, properties, mode);\r\n        }\r\n    }\r\n _getStacks(last, dataIndex) {\r\n        const { iScale  } = this._cachedMeta;\r\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\r\n        const stacked = iScale.options.stacked;\r\n        const stacks = [];\r\n        const skipNull = (meta)=>{\r\n            const parsed = meta.controller.getParsed(dataIndex);\r\n            const val = parsed && parsed[meta.vScale.axis];\r\n            if (isNullOrUndef(val) || isNaN(val)) {\r\n                return true;\r\n            }\r\n        };\r\n        for (const meta of metasets){\r\n            if (dataIndex !== undefined && skipNull(meta)) {\r\n                continue;\r\n            }\r\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\r\n                stacks.push(meta.stack);\r\n            }\r\n            if (meta.index === last) {\r\n                break;\r\n            }\r\n        }\r\n        if (!stacks.length) {\r\n            stacks.push(undefined);\r\n        }\r\n        return stacks;\r\n    }\r\n _getStackCount(index) {\r\n        return this._getStacks(undefined, index).length;\r\n    }\r\n _getStackIndex(datasetIndex, name, dataIndex) {\r\n        const stacks = this._getStacks(datasetIndex, dataIndex);\r\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\r\n        return index === -1 ? stacks.length - 1 : index;\r\n    }\r\n _getRuler() {\r\n        const opts = this.options;\r\n        const meta = this._cachedMeta;\r\n        const iScale = meta.iScale;\r\n        const pixels = [];\r\n        let i, ilen;\r\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\r\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\r\n        }\r\n        const barThickness = opts.barThickness;\r\n        const min = barThickness || computeMinSampleSize(meta);\r\n        return {\r\n            min,\r\n            pixels,\r\n            start: iScale._startPixel,\r\n            end: iScale._endPixel,\r\n            stackCount: this._getStackCount(),\r\n            scale: iScale,\r\n            grouped: opts.grouped,\r\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\r\n        };\r\n    }\r\n _calculateBarValuePixels(index) {\r\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\r\n        const actualBase = baseValue || 0;\r\n        const parsed = this.getParsed(index);\r\n        const custom = parsed._custom;\r\n        const floating = isFloatBar(custom);\r\n        let value = parsed[vScale.axis];\r\n        let start = 0;\r\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\r\n        let head, size;\r\n        if (length !== value) {\r\n            start = length - value;\r\n            length = value;\r\n        }\r\n        if (floating) {\r\n            value = custom.barStart;\r\n            length = custom.barEnd - custom.barStart;\r\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\r\n                start = 0;\r\n            }\r\n            start += value;\r\n        }\r\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\r\n        let base = vScale.getPixelForValue(startValue);\r\n        if (this.chart.getDataVisibility(index)) {\r\n            head = vScale.getPixelForValue(start + length);\r\n        } else {\r\n            head = base;\r\n        }\r\n        size = head - base;\r\n        if (Math.abs(size) < minBarLength) {\r\n            size = barSign(size, vScale, actualBase) * minBarLength;\r\n            if (value === actualBase) {\r\n                base -= size / 2;\r\n            }\r\n            const startPixel = vScale.getPixelForDecimal(0);\r\n            const endPixel = vScale.getPixelForDecimal(1);\r\n            const min = Math.min(startPixel, endPixel);\r\n            const max = Math.max(startPixel, endPixel);\r\n            base = Math.max(Math.min(base, max), min);\r\n            head = base + size;\r\n            if (_stacked && !floating) {\r\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\r\n            }\r\n        }\r\n        if (base === vScale.getPixelForValue(actualBase)) {\r\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\r\n            base += halfGrid;\r\n            size -= halfGrid;\r\n        }\r\n        return {\r\n            size,\r\n            base,\r\n            head,\r\n            center: head + size / 2\r\n        };\r\n    }\r\n _calculateBarIndexPixels(index, ruler) {\r\n        const scale = ruler.scale;\r\n        const options = this.options;\r\n        const skipNull = options.skipNull;\r\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\r\n        let center, size;\r\n        if (ruler.grouped) {\r\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\r\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\r\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\r\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\r\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\r\n        } else {\r\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\r\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\r\n        }\r\n        return {\r\n            base: center - size / 2,\r\n            head: center + size / 2,\r\n            center,\r\n            size\r\n        };\r\n    }\r\n    draw() {\r\n        const meta = this._cachedMeta;\r\n        const vScale = meta.vScale;\r\n        const rects = meta.data;\r\n        const ilen = rects.length;\r\n        let i = 0;\r\n        for(; i < ilen; ++i){\r\n            if (this.getParsed(i)[vScale.axis] !== null) {\r\n                rects[i].draw(this._ctx);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass BubbleController extends DatasetController {\r\n    static id = 'bubble';\r\n static defaults = {\r\n        datasetElementType: false,\r\n        dataElementType: 'point',\r\n        animations: {\r\n            numbers: {\r\n                type: 'number',\r\n                properties: [\r\n                    'x',\r\n                    'y',\r\n                    'borderWidth',\r\n                    'radius'\r\n                ]\r\n            }\r\n        }\r\n    };\r\n static overrides = {\r\n        scales: {\r\n            x: {\r\n                type: 'linear'\r\n            },\r\n            y: {\r\n                type: 'linear'\r\n            }\r\n        }\r\n    };\r\n    initialize() {\r\n        this.enableOptionSharing = true;\r\n        super.initialize();\r\n    }\r\n parsePrimitiveData(meta, data, start, count) {\r\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\r\n        for(let i = 0; i < parsed.length; i++){\r\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\r\n        }\r\n        return parsed;\r\n    }\r\n parseArrayData(meta, data, start, count) {\r\n        const parsed = super.parseArrayData(meta, data, start, count);\r\n        for(let i = 0; i < parsed.length; i++){\r\n            const item = data[start + i];\r\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\r\n        }\r\n        return parsed;\r\n    }\r\n parseObjectData(meta, data, start, count) {\r\n        const parsed = super.parseObjectData(meta, data, start, count);\r\n        for(let i = 0; i < parsed.length; i++){\r\n            const item = data[start + i];\r\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\r\n        }\r\n        return parsed;\r\n    }\r\n getMaxOverflow() {\r\n        const data = this._cachedMeta.data;\r\n        let max = 0;\r\n        for(let i = data.length - 1; i >= 0; --i){\r\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n        }\r\n        return max > 0 && max;\r\n    }\r\n getLabelAndValue(index) {\r\n        const meta = this._cachedMeta;\r\n        const labels = this.chart.data.labels || [];\r\n        const { xScale , yScale  } = meta;\r\n        const parsed = this.getParsed(index);\r\n        const x = xScale.getLabelForValue(parsed.x);\r\n        const y = yScale.getLabelForValue(parsed.y);\r\n        const r = parsed._custom;\r\n        return {\r\n            label: labels[index] || '',\r\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\r\n        };\r\n    }\r\n    update(mode) {\r\n        const points = this._cachedMeta.data;\r\n        this.updateElements(points, 0, points.length, mode);\r\n    }\r\n    updateElements(points, start, count, mode) {\r\n        const reset = mode === 'reset';\r\n        const { iScale , vScale  } = this._cachedMeta;\r\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\r\n        const iAxis = iScale.axis;\r\n        const vAxis = vScale.axis;\r\n        for(let i = start; i < start + count; i++){\r\n            const point = points[i];\r\n            const parsed = !reset && this.getParsed(i);\r\n            const properties = {};\r\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\r\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\r\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\r\n            if (includeOptions) {\r\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n                if (reset) {\r\n                    properties.options.radius = 0;\r\n                }\r\n            }\r\n            this.updateElement(point, i, properties, mode);\r\n        }\r\n    }\r\n resolveDataElementOptions(index, mode) {\r\n        const parsed = this.getParsed(index);\r\n        let values = super.resolveDataElementOptions(index, mode);\r\n        if (values.$shared) {\r\n            values = Object.assign({}, values, {\r\n                $shared: false\r\n            });\r\n        }\r\n        const radius = values.radius;\r\n        if (mode !== 'active') {\r\n            values.radius = 0;\r\n        }\r\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\r\n        return values;\r\n    }\r\n}\r\n\r\nfunction getRatioAndOffset(rotation, circumference, cutout) {\r\n    let ratioX = 1;\r\n    let ratioY = 1;\r\n    let offsetX = 0;\r\n    let offsetY = 0;\r\n    if (circumference < TAU) {\r\n        const startAngle = rotation;\r\n        const endAngle = startAngle + circumference;\r\n        const startX = Math.cos(startAngle);\r\n        const startY = Math.sin(startAngle);\r\n        const endX = Math.cos(endAngle);\r\n        const endY = Math.sin(endAngle);\r\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\r\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\r\n        const maxX = calcMax(0, startX, endX);\r\n        const maxY = calcMax(HALF_PI, startY, endY);\r\n        const minX = calcMin(PI, startX, endX);\r\n        const minY = calcMin(PI + HALF_PI, startY, endY);\r\n        ratioX = (maxX - minX) / 2;\r\n        ratioY = (maxY - minY) / 2;\r\n        offsetX = -(maxX + minX) / 2;\r\n        offsetY = -(maxY + minY) / 2;\r\n    }\r\n    return {\r\n        ratioX,\r\n        ratioY,\r\n        offsetX,\r\n        offsetY\r\n    };\r\n}\r\nclass DoughnutController extends DatasetController {\r\n    static id = 'doughnut';\r\n static defaults = {\r\n        datasetElementType: false,\r\n        dataElementType: 'arc',\r\n        animation: {\r\n            animateRotate: true,\r\n            animateScale: false\r\n        },\r\n        animations: {\r\n            numbers: {\r\n                type: 'number',\r\n                properties: [\r\n                    'circumference',\r\n                    'endAngle',\r\n                    'innerRadius',\r\n                    'outerRadius',\r\n                    'startAngle',\r\n                    'x',\r\n                    'y',\r\n                    'offset',\r\n                    'borderWidth',\r\n                    'spacing'\r\n                ]\r\n            }\r\n        },\r\n        cutout: '50%',\r\n        rotation: 0,\r\n        circumference: 360,\r\n        radius: '100%',\r\n        spacing: 0,\r\n        indexAxis: 'r'\r\n    };\r\n    static descriptors = {\r\n        _scriptable: (name)=>name !== 'spacing',\r\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\r\n    };\r\n static overrides = {\r\n        aspectRatio: 1,\r\n        plugins: {\r\n            legend: {\r\n                labels: {\r\n                    generateLabels (chart) {\r\n                        const data = chart.data;\r\n                        if (data.labels.length && data.datasets.length) {\r\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\r\n                            return data.labels.map((label, i)=>{\r\n                                const meta = chart.getDatasetMeta(0);\r\n                                const style = meta.controller.getStyle(i);\r\n                                return {\r\n                                    text: label,\r\n                                    fillStyle: style.backgroundColor,\r\n                                    strokeStyle: style.borderColor,\r\n                                    fontColor: color,\r\n                                    lineWidth: style.borderWidth,\r\n                                    pointStyle: pointStyle,\r\n                                    hidden: !chart.getDataVisibility(i),\r\n                                    index: i\r\n                                };\r\n                            });\r\n                        }\r\n                        return [];\r\n                    }\r\n                },\r\n                onClick (e, legendItem, legend) {\r\n                    legend.chart.toggleDataVisibility(legendItem.index);\r\n                    legend.chart.update();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    constructor(chart, datasetIndex){\r\n        super(chart, datasetIndex);\r\n        this.enableOptionSharing = true;\r\n        this.innerRadius = undefined;\r\n        this.outerRadius = undefined;\r\n        this.offsetX = undefined;\r\n        this.offsetY = undefined;\r\n    }\r\n    linkScales() {}\r\n parse(start, count) {\r\n        const data = this.getDataset().data;\r\n        const meta = this._cachedMeta;\r\n        if (this._parsing === false) {\r\n            meta._parsed = data;\r\n        } else {\r\n            let getter = (i)=>+data[i];\r\n            if (isObject(data[start])) {\r\n                const { key ='value'  } = this._parsing;\r\n                getter = (i)=>+resolveObjectKey(data[i], key);\r\n            }\r\n            let i, ilen;\r\n            for(i = start, ilen = start + count; i < ilen; ++i){\r\n                meta._parsed[i] = getter(i);\r\n            }\r\n        }\r\n    }\r\n _getRotation() {\r\n        return toRadians(this.options.rotation - 90);\r\n    }\r\n _getCircumference() {\r\n        return toRadians(this.options.circumference);\r\n    }\r\n _getRotationExtents() {\r\n        let min = TAU;\r\n        let max = -TAU;\r\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\r\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\r\n                const controller = this.chart.getDatasetMeta(i).controller;\r\n                const rotation = controller._getRotation();\r\n                const circumference = controller._getCircumference();\r\n                min = Math.min(min, rotation);\r\n                max = Math.max(max, rotation + circumference);\r\n            }\r\n        }\r\n        return {\r\n            rotation: min,\r\n            circumference: max - min\r\n        };\r\n    }\r\n update(mode) {\r\n        const chart = this.chart;\r\n        const { chartArea  } = chart;\r\n        const meta = this._cachedMeta;\r\n        const arcs = meta.data;\r\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\r\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\r\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\r\n        const chartWeight = this._getRingWeight(this.index);\r\n        const { circumference , rotation  } = this._getRotationExtents();\r\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\r\n        const maxWidth = (chartArea.width - spacing) / ratioX;\r\n        const maxHeight = (chartArea.height - spacing) / ratioY;\r\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\r\n        const outerRadius = toDimension(this.options.radius, maxRadius);\r\n        const innerRadius = Math.max(outerRadius * cutout, 0);\r\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\r\n        this.offsetX = offsetX * outerRadius;\r\n        this.offsetY = offsetY * outerRadius;\r\n        meta.total = this.calculateTotal();\r\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\r\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\r\n        this.updateElements(arcs, 0, arcs.length, mode);\r\n    }\r\n _circumference(i, reset) {\r\n        const opts = this.options;\r\n        const meta = this._cachedMeta;\r\n        const circumference = this._getCircumference();\r\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\r\n            return 0;\r\n        }\r\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\r\n    }\r\n    updateElements(arcs, start, count, mode) {\r\n        const reset = mode === 'reset';\r\n        const chart = this.chart;\r\n        const chartArea = chart.chartArea;\r\n        const opts = chart.options;\r\n        const animationOpts = opts.animation;\r\n        const centerX = (chartArea.left + chartArea.right) / 2;\r\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\r\n        const animateScale = reset && animationOpts.animateScale;\r\n        const innerRadius = animateScale ? 0 : this.innerRadius;\r\n        const outerRadius = animateScale ? 0 : this.outerRadius;\r\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\r\n        let startAngle = this._getRotation();\r\n        let i;\r\n        for(i = 0; i < start; ++i){\r\n            startAngle += this._circumference(i, reset);\r\n        }\r\n        for(i = start; i < start + count; ++i){\r\n            const circumference = this._circumference(i, reset);\r\n            const arc = arcs[i];\r\n            const properties = {\r\n                x: centerX + this.offsetX,\r\n                y: centerY + this.offsetY,\r\n                startAngle,\r\n                endAngle: startAngle + circumference,\r\n                circumference,\r\n                outerRadius,\r\n                innerRadius\r\n            };\r\n            if (includeOptions) {\r\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\r\n            }\r\n            startAngle += circumference;\r\n            this.updateElement(arc, i, properties, mode);\r\n        }\r\n    }\r\n    calculateTotal() {\r\n        const meta = this._cachedMeta;\r\n        const metaData = meta.data;\r\n        let total = 0;\r\n        let i;\r\n        for(i = 0; i < metaData.length; i++){\r\n            const value = meta._parsed[i];\r\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\r\n                total += Math.abs(value);\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n    calculateCircumference(value) {\r\n        const total = this._cachedMeta.total;\r\n        if (total > 0 && !isNaN(value)) {\r\n            return TAU * (Math.abs(value) / total);\r\n        }\r\n        return 0;\r\n    }\r\n    getLabelAndValue(index) {\r\n        const meta = this._cachedMeta;\r\n        const chart = this.chart;\r\n        const labels = chart.data.labels || [];\r\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\r\n        return {\r\n            label: labels[index] || '',\r\n            value\r\n        };\r\n    }\r\n    getMaxBorderWidth(arcs) {\r\n        let max = 0;\r\n        const chart = this.chart;\r\n        let i, ilen, meta, controller, options;\r\n        if (!arcs) {\r\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\r\n                if (chart.isDatasetVisible(i)) {\r\n                    meta = chart.getDatasetMeta(i);\r\n                    arcs = meta.data;\r\n                    controller = meta.controller;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!arcs) {\r\n            return 0;\r\n        }\r\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\r\n            options = controller.resolveDataElementOptions(i);\r\n            if (options.borderAlign !== 'inner') {\r\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n    getMaxOffset(arcs) {\r\n        let max = 0;\r\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\r\n            const options = this.resolveDataElementOptions(i);\r\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\r\n        }\r\n        return max;\r\n    }\r\n _getRingWeightOffset(datasetIndex) {\r\n        let ringWeightOffset = 0;\r\n        for(let i = 0; i < datasetIndex; ++i){\r\n            if (this.chart.isDatasetVisible(i)) {\r\n                ringWeightOffset += this._getRingWeight(i);\r\n            }\r\n        }\r\n        return ringWeightOffset;\r\n    }\r\n _getRingWeight(datasetIndex) {\r\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\r\n    }\r\n _getVisibleDatasetWeightTotal() {\r\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\r\n    }\r\n}\r\n\r\nclass LineController extends DatasetController {\r\n    static id = 'line';\r\n static defaults = {\r\n        datasetElementType: 'line',\r\n        dataElementType: 'point',\r\n        showLine: true,\r\n        spanGaps: false\r\n    };\r\n static overrides = {\r\n        scales: {\r\n            _index_: {\r\n                type: 'category'\r\n            },\r\n            _value_: {\r\n                type: 'linear'\r\n            }\r\n        }\r\n    };\r\n    initialize() {\r\n        this.enableOptionSharing = true;\r\n        this.supportsDecimation = true;\r\n        super.initialize();\r\n    }\r\n    update(mode) {\r\n        const meta = this._cachedMeta;\r\n        const { dataset: line , data: points = [] , _dataset  } = meta;\r\n        const animationsDisabled = this.chart._animationsDisabled;\r\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n        this._drawStart = start;\r\n        this._drawCount = count;\r\n        if (_scaleRangesChanged(meta)) {\r\n            start = 0;\r\n            count = points.length;\r\n        }\r\n        line._chart = this.chart;\r\n        line._datasetIndex = this.index;\r\n        line._decimated = !!_dataset._decimated;\r\n        line.points = points;\r\n        const options = this.resolveDatasetElementOptions(mode);\r\n        if (!this.options.showLine) {\r\n            options.borderWidth = 0;\r\n        }\r\n        options.segment = this.options.segment;\r\n        this.updateElement(line, undefined, {\r\n            animated: !animationsDisabled,\r\n            options\r\n        }, mode);\r\n        this.updateElements(points, start, count, mode);\r\n    }\r\n    updateElements(points, start, count, mode) {\r\n        const reset = mode === 'reset';\r\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\r\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\r\n        const iAxis = iScale.axis;\r\n        const vAxis = vScale.axis;\r\n        const { spanGaps , segment  } = this.options;\r\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n        const end = start + count;\r\n        const pointsCount = points.length;\r\n        let prevParsed = start > 0 && this.getParsed(start - 1);\r\n        for(let i = 0; i < pointsCount; ++i){\r\n            const point = points[i];\r\n            const properties = directUpdate ? point : {};\r\n            if (i < start || i >= end) {\r\n                properties.skip = true;\r\n                continue;\r\n            }\r\n            const parsed = this.getParsed(i);\r\n            const nullData = isNullOrUndef(parsed[vAxis]);\r\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\r\n            if (segment) {\r\n                properties.parsed = parsed;\r\n                properties.raw = _dataset.data[i];\r\n            }\r\n            if (includeOptions) {\r\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n            }\r\n            if (!directUpdate) {\r\n                this.updateElement(point, i, properties, mode);\r\n            }\r\n            prevParsed = parsed;\r\n        }\r\n    }\r\n getMaxOverflow() {\r\n        const meta = this._cachedMeta;\r\n        const dataset = meta.dataset;\r\n        const border = dataset.options && dataset.options.borderWidth || 0;\r\n        const data = meta.data || [];\r\n        if (!data.length) {\r\n            return border;\r\n        }\r\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n        return Math.max(border, firstPoint, lastPoint) / 2;\r\n    }\r\n    draw() {\r\n        const meta = this._cachedMeta;\r\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\r\n        super.draw();\r\n    }\r\n}\r\n\r\nclass PolarAreaController extends DatasetController {\r\n    static id = 'polarArea';\r\n static defaults = {\r\n        dataElementType: 'arc',\r\n        animation: {\r\n            animateRotate: true,\r\n            animateScale: true\r\n        },\r\n        animations: {\r\n            numbers: {\r\n                type: 'number',\r\n                properties: [\r\n                    'x',\r\n                    'y',\r\n                    'startAngle',\r\n                    'endAngle',\r\n                    'innerRadius',\r\n                    'outerRadius'\r\n                ]\r\n            }\r\n        },\r\n        indexAxis: 'r',\r\n        startAngle: 0\r\n    };\r\n static overrides = {\r\n        aspectRatio: 1,\r\n        plugins: {\r\n            legend: {\r\n                labels: {\r\n                    generateLabels (chart) {\r\n                        const data = chart.data;\r\n                        if (data.labels.length && data.datasets.length) {\r\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\r\n                            return data.labels.map((label, i)=>{\r\n                                const meta = chart.getDatasetMeta(0);\r\n                                const style = meta.controller.getStyle(i);\r\n                                return {\r\n                                    text: label,\r\n                                    fillStyle: style.backgroundColor,\r\n                                    strokeStyle: style.borderColor,\r\n                                    fontColor: color,\r\n                                    lineWidth: style.borderWidth,\r\n                                    pointStyle: pointStyle,\r\n                                    hidden: !chart.getDataVisibility(i),\r\n                                    index: i\r\n                                };\r\n                            });\r\n                        }\r\n                        return [];\r\n                    }\r\n                },\r\n                onClick (e, legendItem, legend) {\r\n                    legend.chart.toggleDataVisibility(legendItem.index);\r\n                    legend.chart.update();\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            r: {\r\n                type: 'radialLinear',\r\n                angleLines: {\r\n                    display: false\r\n                },\r\n                beginAtZero: true,\r\n                grid: {\r\n                    circular: true\r\n                },\r\n                pointLabels: {\r\n                    display: false\r\n                },\r\n                startAngle: 0\r\n            }\r\n        }\r\n    };\r\n    constructor(chart, datasetIndex){\r\n        super(chart, datasetIndex);\r\n        this.innerRadius = undefined;\r\n        this.outerRadius = undefined;\r\n    }\r\n    getLabelAndValue(index) {\r\n        const meta = this._cachedMeta;\r\n        const chart = this.chart;\r\n        const labels = chart.data.labels || [];\r\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\r\n        return {\r\n            label: labels[index] || '',\r\n            value\r\n        };\r\n    }\r\n    parseObjectData(meta, data, start, count) {\r\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n    }\r\n    update(mode) {\r\n        const arcs = this._cachedMeta.data;\r\n        this._updateRadius();\r\n        this.updateElements(arcs, 0, arcs.length, mode);\r\n    }\r\n getMinMax() {\r\n        const meta = this._cachedMeta;\r\n        const range = {\r\n            min: Number.POSITIVE_INFINITY,\r\n            max: Number.NEGATIVE_INFINITY\r\n        };\r\n        meta.data.forEach((element, index)=>{\r\n            const parsed = this.getParsed(index).r;\r\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\r\n                if (parsed < range.min) {\r\n                    range.min = parsed;\r\n                }\r\n                if (parsed > range.max) {\r\n                    range.max = parsed;\r\n                }\r\n            }\r\n        });\r\n        return range;\r\n    }\r\n _updateRadius() {\r\n        const chart = this.chart;\r\n        const chartArea = chart.chartArea;\r\n        const opts = chart.options;\r\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\r\n        const outerRadius = Math.max(minSize / 2, 0);\r\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\r\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\r\n        this.outerRadius = outerRadius - radiusLength * this.index;\r\n        this.innerRadius = this.outerRadius - radiusLength;\r\n    }\r\n    updateElements(arcs, start, count, mode) {\r\n        const reset = mode === 'reset';\r\n        const chart = this.chart;\r\n        const opts = chart.options;\r\n        const animationOpts = opts.animation;\r\n        const scale = this._cachedMeta.rScale;\r\n        const centerX = scale.xCenter;\r\n        const centerY = scale.yCenter;\r\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\r\n        let angle = datasetStartAngle;\r\n        let i;\r\n        const defaultAngle = 360 / this.countVisibleElements();\r\n        for(i = 0; i < start; ++i){\r\n            angle += this._computeAngle(i, mode, defaultAngle);\r\n        }\r\n        for(i = start; i < start + count; i++){\r\n            const arc = arcs[i];\r\n            let startAngle = angle;\r\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\r\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\r\n            angle = endAngle;\r\n            if (reset) {\r\n                if (animationOpts.animateScale) {\r\n                    outerRadius = 0;\r\n                }\r\n                if (animationOpts.animateRotate) {\r\n                    startAngle = endAngle = datasetStartAngle;\r\n                }\r\n            }\r\n            const properties = {\r\n                x: centerX,\r\n                y: centerY,\r\n                innerRadius: 0,\r\n                outerRadius,\r\n                startAngle,\r\n                endAngle,\r\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\r\n            };\r\n            this.updateElement(arc, i, properties, mode);\r\n        }\r\n    }\r\n    countVisibleElements() {\r\n        const meta = this._cachedMeta;\r\n        let count = 0;\r\n        meta.data.forEach((element, index)=>{\r\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\r\n                count++;\r\n            }\r\n        });\r\n        return count;\r\n    }\r\n _computeAngle(index, mode, defaultAngle) {\r\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\r\n    }\r\n}\r\n\r\nclass PieController extends DoughnutController {\r\n    static id = 'pie';\r\n static defaults = {\r\n        cutout: 0,\r\n        rotation: 0,\r\n        circumference: 360,\r\n        radius: '100%'\r\n    };\r\n}\r\n\r\nclass RadarController extends DatasetController {\r\n    static id = 'radar';\r\n static defaults = {\r\n        datasetElementType: 'line',\r\n        dataElementType: 'point',\r\n        indexAxis: 'r',\r\n        showLine: true,\r\n        elements: {\r\n            line: {\r\n                fill: 'start'\r\n            }\r\n        }\r\n    };\r\n static overrides = {\r\n        aspectRatio: 1,\r\n        scales: {\r\n            r: {\r\n                type: 'radialLinear'\r\n            }\r\n        }\r\n    };\r\n getLabelAndValue(index) {\r\n        const vScale = this._cachedMeta.vScale;\r\n        const parsed = this.getParsed(index);\r\n        return {\r\n            label: vScale.getLabels()[index],\r\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\r\n        };\r\n    }\r\n    parseObjectData(meta, data, start, count) {\r\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\r\n    }\r\n    update(mode) {\r\n        const meta = this._cachedMeta;\r\n        const line = meta.dataset;\r\n        const points = meta.data || [];\r\n        const labels = meta.iScale.getLabels();\r\n        line.points = points;\r\n        if (mode !== 'resize') {\r\n            const options = this.resolveDatasetElementOptions(mode);\r\n            if (!this.options.showLine) {\r\n                options.borderWidth = 0;\r\n            }\r\n            const properties = {\r\n                _loop: true,\r\n                _fullLoop: labels.length === points.length,\r\n                options\r\n            };\r\n            this.updateElement(line, undefined, properties, mode);\r\n        }\r\n        this.updateElements(points, 0, points.length, mode);\r\n    }\r\n    updateElements(points, start, count, mode) {\r\n        const scale = this._cachedMeta.rScale;\r\n        const reset = mode === 'reset';\r\n        for(let i = start; i < start + count; i++){\r\n            const point = points[i];\r\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\r\n            const x = reset ? scale.xCenter : pointPosition.x;\r\n            const y = reset ? scale.yCenter : pointPosition.y;\r\n            const properties = {\r\n                x,\r\n                y,\r\n                angle: pointPosition.angle,\r\n                skip: isNaN(x) || isNaN(y),\r\n                options\r\n            };\r\n            this.updateElement(point, i, properties, mode);\r\n        }\r\n    }\r\n}\r\n\r\nclass ScatterController extends DatasetController {\r\n    static id = 'scatter';\r\n static defaults = {\r\n        datasetElementType: false,\r\n        dataElementType: 'point',\r\n        showLine: false,\r\n        fill: false\r\n    };\r\n static overrides = {\r\n        interaction: {\r\n            mode: 'point'\r\n        },\r\n        scales: {\r\n            x: {\r\n                type: 'linear'\r\n            },\r\n            y: {\r\n                type: 'linear'\r\n            }\r\n        }\r\n    };\r\n getLabelAndValue(index) {\r\n        const meta = this._cachedMeta;\r\n        const labels = this.chart.data.labels || [];\r\n        const { xScale , yScale  } = meta;\r\n        const parsed = this.getParsed(index);\r\n        const x = xScale.getLabelForValue(parsed.x);\r\n        const y = yScale.getLabelForValue(parsed.y);\r\n        return {\r\n            label: labels[index] || '',\r\n            value: '(' + x + ', ' + y + ')'\r\n        };\r\n    }\r\n    update(mode) {\r\n        const meta = this._cachedMeta;\r\n        const { data: points = []  } = meta;\r\n        const animationsDisabled = this.chart._animationsDisabled;\r\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\r\n        this._drawStart = start;\r\n        this._drawCount = count;\r\n        if (_scaleRangesChanged(meta)) {\r\n            start = 0;\r\n            count = points.length;\r\n        }\r\n        if (this.options.showLine) {\r\n            if (!this.datasetElementType) {\r\n                this.addElements();\r\n            }\r\n            const { dataset: line , _dataset  } = meta;\r\n            line._chart = this.chart;\r\n            line._datasetIndex = this.index;\r\n            line._decimated = !!_dataset._decimated;\r\n            line.points = points;\r\n            const options = this.resolveDatasetElementOptions(mode);\r\n            options.segment = this.options.segment;\r\n            this.updateElement(line, undefined, {\r\n                animated: !animationsDisabled,\r\n                options\r\n            }, mode);\r\n        } else if (this.datasetElementType) {\r\n            delete meta.dataset;\r\n            this.datasetElementType = false;\r\n        }\r\n        this.updateElements(points, start, count, mode);\r\n    }\r\n    addElements() {\r\n        const { showLine  } = this.options;\r\n        if (!this.datasetElementType && showLine) {\r\n            this.datasetElementType = this.chart.registry.getElement('line');\r\n        }\r\n        super.addElements();\r\n    }\r\n    updateElements(points, start, count, mode) {\r\n        const reset = mode === 'reset';\r\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\r\n        const firstOpts = this.resolveDataElementOptions(start, mode);\r\n        const sharedOptions = this.getSharedOptions(firstOpts);\r\n        const includeOptions = this.includeOptions(mode, sharedOptions);\r\n        const iAxis = iScale.axis;\r\n        const vAxis = vScale.axis;\r\n        const { spanGaps , segment  } = this.options;\r\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\r\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\r\n        let prevParsed = start > 0 && this.getParsed(start - 1);\r\n        for(let i = start; i < start + count; ++i){\r\n            const point = points[i];\r\n            const parsed = this.getParsed(i);\r\n            const properties = directUpdate ? point : {};\r\n            const nullData = isNullOrUndef(parsed[vAxis]);\r\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\r\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\r\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\r\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\r\n            if (segment) {\r\n                properties.parsed = parsed;\r\n                properties.raw = _dataset.data[i];\r\n            }\r\n            if (includeOptions) {\r\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\r\n            }\r\n            if (!directUpdate) {\r\n                this.updateElement(point, i, properties, mode);\r\n            }\r\n            prevParsed = parsed;\r\n        }\r\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\r\n    }\r\n getMaxOverflow() {\r\n        const meta = this._cachedMeta;\r\n        const data = meta.data || [];\r\n        if (!this.options.showLine) {\r\n            let max = 0;\r\n            for(let i = data.length - 1; i >= 0; --i){\r\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\r\n            }\r\n            return max > 0 && max;\r\n        }\r\n        const dataset = meta.dataset;\r\n        const border = dataset.options && dataset.options.borderWidth || 0;\r\n        if (!data.length) {\r\n            return border;\r\n        }\r\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\r\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\r\n        return Math.max(border, firstPoint, lastPoint) / 2;\r\n    }\r\n}\r\n\r\nvar controllers = /*#__PURE__*/Object.freeze({\r\n__proto__: null,\r\nBarController: BarController,\r\nBubbleController: BubbleController,\r\nDoughnutController: DoughnutController,\r\nLineController: LineController,\r\nPieController: PieController,\r\nPolarAreaController: PolarAreaController,\r\nRadarController: RadarController,\r\nScatterController: ScatterController\r\n});\r\n\r\n/**\r\n * @namespace Chart._adapters\r\n * @since 2.8.0\r\n * @private\r\n */ function abstract() {\r\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\r\n}\r\n/**\r\n * Date adapter (current used by the time scale)\r\n * @namespace Chart._adapters._date\r\n * @memberof Chart._adapters\r\n * @private\r\n */ class DateAdapterBase {\r\n    /**\r\n   * Override default date adapter methods.\r\n   * Accepts type parameter to define options type.\r\n   * @example\r\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\r\n   *   init() {\r\n   *     console.log(this.options.myAdapterOption);\r\n   *   }\r\n   * })\r\n   */ static override(members) {\r\n        Object.assign(DateAdapterBase.prototype, members);\r\n    }\r\n    options;\r\n    constructor(options){\r\n        this.options = options || {};\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    init() {}\r\n    formats() {\r\n        return abstract();\r\n    }\r\n    parse() {\r\n        return abstract();\r\n    }\r\n    format() {\r\n        return abstract();\r\n    }\r\n    add() {\r\n        return abstract();\r\n    }\r\n    diff() {\r\n        return abstract();\r\n    }\r\n    startOf() {\r\n        return abstract();\r\n    }\r\n    endOf() {\r\n        return abstract();\r\n    }\r\n}\r\nvar adapters = {\r\n    _date: DateAdapterBase\r\n};\r\n\r\nfunction binarySearch(metaset, axis, value, intersect) {\r\n    const { controller , data , _sorted  } = metaset;\r\n    const iScale = controller._cachedMeta.iScale;\r\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\r\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\r\n        if (!intersect) {\r\n            return lookupMethod(data, axis, value);\r\n        } else if (controller._sharedOptions) {\r\n            const el = data[0];\r\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\r\n            if (range) {\r\n                const start = lookupMethod(data, axis, value - range);\r\n                const end = lookupMethod(data, axis, value + range);\r\n                return {\r\n                    lo: start.lo,\r\n                    hi: end.hi\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        lo: 0,\r\n        hi: data.length - 1\r\n    };\r\n}\r\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\r\n    const metasets = chart.getSortedVisibleDatasetMetas();\r\n    const value = position[axis];\r\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\r\n        const { index , data  } = metasets[i];\r\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\r\n        for(let j = lo; j <= hi; ++j){\r\n            const element = data[j];\r\n            if (!element.skip) {\r\n                handler(element, index, j);\r\n            }\r\n        }\r\n    }\r\n}\r\n function getDistanceMetricForAxis(axis) {\r\n    const useX = axis.indexOf('x') !== -1;\r\n    const useY = axis.indexOf('y') !== -1;\r\n    return function(pt1, pt2) {\r\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\r\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\r\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\r\n    };\r\n}\r\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\r\n    const items = [];\r\n    if (!includeInvisible && !chart.isPointInArea(position)) {\r\n        return items;\r\n    }\r\n    const evaluationFunc = function(element, datasetIndex, index) {\r\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\r\n            return;\r\n        }\r\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\r\n            items.push({\r\n                element,\r\n                datasetIndex,\r\n                index\r\n            });\r\n        }\r\n    };\r\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\r\n    return items;\r\n}\r\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\r\n    let items = [];\r\n    function evaluationFunc(element, datasetIndex, index) {\r\n        const { startAngle , endAngle  } = element.getProps([\r\n            'startAngle',\r\n            'endAngle'\r\n        ], useFinalPosition);\r\n        const { angle  } = getAngleFromPoint(element, {\r\n            x: position.x,\r\n            y: position.y\r\n        });\r\n        if (_angleBetween(angle, startAngle, endAngle)) {\r\n            items.push({\r\n                element,\r\n                datasetIndex,\r\n                index\r\n            });\r\n        }\r\n    }\r\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n    return items;\r\n}\r\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n    let items = [];\r\n    const distanceMetric = getDistanceMetricForAxis(axis);\r\n    let minDistance = Number.POSITIVE_INFINITY;\r\n    function evaluationFunc(element, datasetIndex, index) {\r\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\r\n        if (intersect && !inRange) {\r\n            return;\r\n        }\r\n        const center = element.getCenterPoint(useFinalPosition);\r\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\r\n        if (!pointInArea && !inRange) {\r\n            return;\r\n        }\r\n        const distance = distanceMetric(position, center);\r\n        if (distance < minDistance) {\r\n            items = [\r\n                {\r\n                    element,\r\n                    datasetIndex,\r\n                    index\r\n                }\r\n            ];\r\n            minDistance = distance;\r\n        } else if (distance === minDistance) {\r\n            items.push({\r\n                element,\r\n                datasetIndex,\r\n                index\r\n            });\r\n        }\r\n    }\r\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\r\n    return items;\r\n}\r\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\r\n    if (!includeInvisible && !chart.isPointInArea(position)) {\r\n        return [];\r\n    }\r\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\r\n}\r\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\r\n    const items = [];\r\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\r\n    let intersectsItem = false;\r\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\r\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\r\n            items.push({\r\n                element,\r\n                datasetIndex,\r\n                index\r\n            });\r\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\r\n        }\r\n    });\r\n    if (intersect && !intersectsItem) {\r\n        return [];\r\n    }\r\n    return items;\r\n}\r\n var Interaction = {\r\n    evaluateInteractionItems,\r\n    modes: {\r\n index (chart, e, options, useFinalPosition) {\r\n            const position = getRelativePosition(e, chart);\r\n            const axis = options.axis || 'x';\r\n            const includeInvisible = options.includeInvisible || false;\r\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n            const elements = [];\r\n            if (!items.length) {\r\n                return [];\r\n            }\r\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\r\n                const index = items[0].index;\r\n                const element = meta.data[index];\r\n                if (element && !element.skip) {\r\n                    elements.push({\r\n                        element,\r\n                        datasetIndex: meta.index,\r\n                        index\r\n                    });\r\n                }\r\n            });\r\n            return elements;\r\n        },\r\n dataset (chart, e, options, useFinalPosition) {\r\n            const position = getRelativePosition(e, chart);\r\n            const axis = options.axis || 'xy';\r\n            const includeInvisible = options.includeInvisible || false;\r\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\r\n            if (items.length > 0) {\r\n                const datasetIndex = items[0].datasetIndex;\r\n                const data = chart.getDatasetMeta(datasetIndex).data;\r\n                items = [];\r\n                for(let i = 0; i < data.length; ++i){\r\n                    items.push({\r\n                        element: data[i],\r\n                        datasetIndex,\r\n                        index: i\r\n                    });\r\n                }\r\n            }\r\n            return items;\r\n        },\r\n point (chart, e, options, useFinalPosition) {\r\n            const position = getRelativePosition(e, chart);\r\n            const axis = options.axis || 'xy';\r\n            const includeInvisible = options.includeInvisible || false;\r\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\r\n        },\r\n nearest (chart, e, options, useFinalPosition) {\r\n            const position = getRelativePosition(e, chart);\r\n            const axis = options.axis || 'xy';\r\n            const includeInvisible = options.includeInvisible || false;\r\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\r\n        },\r\n x (chart, e, options, useFinalPosition) {\r\n            const position = getRelativePosition(e, chart);\r\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\r\n        },\r\n y (chart, e, options, useFinalPosition) {\r\n            const position = getRelativePosition(e, chart);\r\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\r\n        }\r\n    }\r\n};\r\n\r\nconst STATIC_POSITIONS = [\r\n    'left',\r\n    'top',\r\n    'right',\r\n    'bottom'\r\n];\r\nfunction filterByPosition(array, position) {\r\n    return array.filter((v)=>v.pos === position);\r\n}\r\nfunction filterDynamicPositionByAxis(array, axis) {\r\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\r\n}\r\nfunction sortByWeight(array, reverse) {\r\n    return array.sort((a, b)=>{\r\n        const v0 = reverse ? b : a;\r\n        const v1 = reverse ? a : b;\r\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\r\n    });\r\n}\r\nfunction wrapBoxes(boxes) {\r\n    const layoutBoxes = [];\r\n    let i, ilen, box, pos, stack, stackWeight;\r\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\r\n        box = boxes[i];\r\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\r\n        layoutBoxes.push({\r\n            index: i,\r\n            box,\r\n            pos,\r\n            horizontal: box.isHorizontal(),\r\n            weight: box.weight,\r\n            stack: stack && pos + stack,\r\n            stackWeight\r\n        });\r\n    }\r\n    return layoutBoxes;\r\n}\r\nfunction buildStacks(layouts) {\r\n    const stacks = {};\r\n    for (const wrap of layouts){\r\n        const { stack , pos , stackWeight  } = wrap;\r\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\r\n            continue;\r\n        }\r\n        const _stack = stacks[stack] || (stacks[stack] = {\r\n            count: 0,\r\n            placed: 0,\r\n            weight: 0,\r\n            size: 0\r\n        });\r\n        _stack.count++;\r\n        _stack.weight += stackWeight;\r\n    }\r\n    return stacks;\r\n}\r\n function setLayoutDims(layouts, params) {\r\n    const stacks = buildStacks(layouts);\r\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\r\n    let i, ilen, layout;\r\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\r\n        layout = layouts[i];\r\n        const { fullSize  } = layout.box;\r\n        const stack = stacks[layout.stack];\r\n        const factor = stack && layout.stackWeight / stack.weight;\r\n        if (layout.horizontal) {\r\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\r\n            layout.height = hBoxMaxHeight;\r\n        } else {\r\n            layout.width = vBoxMaxWidth;\r\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\r\n        }\r\n    }\r\n    return stacks;\r\n}\r\nfunction buildLayoutBoxes(boxes) {\r\n    const layoutBoxes = wrapBoxes(boxes);\r\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\r\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\r\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\r\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\r\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\r\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\r\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\r\n    return {\r\n        fullSize,\r\n        leftAndTop: left.concat(top),\r\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\r\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\r\n        vertical: left.concat(right).concat(centerVertical),\r\n        horizontal: top.concat(bottom).concat(centerHorizontal)\r\n    };\r\n}\r\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\r\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\r\n}\r\nfunction updateMaxPadding(maxPadding, boxPadding) {\r\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\r\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\r\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\r\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\r\n}\r\nfunction updateDims(chartArea, params, layout, stacks) {\r\n    const { pos , box  } = layout;\r\n    const maxPadding = chartArea.maxPadding;\r\n    if (!isObject(pos)) {\r\n        if (layout.size) {\r\n            chartArea[pos] -= layout.size;\r\n        }\r\n        const stack = stacks[layout.stack] || {\r\n            size: 0,\r\n            count: 1\r\n        };\r\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\r\n        layout.size = stack.size / stack.count;\r\n        chartArea[pos] += layout.size;\r\n    }\r\n    if (box.getPadding) {\r\n        updateMaxPadding(maxPadding, box.getPadding());\r\n    }\r\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\r\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\r\n    const widthChanged = newWidth !== chartArea.w;\r\n    const heightChanged = newHeight !== chartArea.h;\r\n    chartArea.w = newWidth;\r\n    chartArea.h = newHeight;\r\n    return layout.horizontal ? {\r\n        same: widthChanged,\r\n        other: heightChanged\r\n    } : {\r\n        same: heightChanged,\r\n        other: widthChanged\r\n    };\r\n}\r\nfunction handleMaxPadding(chartArea) {\r\n    const maxPadding = chartArea.maxPadding;\r\n    function updatePos(pos) {\r\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\r\n        chartArea[pos] += change;\r\n        return change;\r\n    }\r\n    chartArea.y += updatePos('top');\r\n    chartArea.x += updatePos('left');\r\n    updatePos('right');\r\n    updatePos('bottom');\r\n}\r\nfunction getMargins(horizontal, chartArea) {\r\n    const maxPadding = chartArea.maxPadding;\r\n    function marginForPositions(positions) {\r\n        const margin = {\r\n            left: 0,\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 0\r\n        };\r\n        positions.forEach((pos)=>{\r\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\r\n        });\r\n        return margin;\r\n    }\r\n    return horizontal ? marginForPositions([\r\n        'left',\r\n        'right'\r\n    ]) : marginForPositions([\r\n        'top',\r\n        'bottom'\r\n    ]);\r\n}\r\nfunction fitBoxes(boxes, chartArea, params, stacks) {\r\n    const refitBoxes = [];\r\n    let i, ilen, layout, box, refit, changed;\r\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\r\n        layout = boxes[i];\r\n        box = layout.box;\r\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\r\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\r\n        refit |= same && refitBoxes.length;\r\n        changed = changed || other;\r\n        if (!box.fullSize) {\r\n            refitBoxes.push(layout);\r\n        }\r\n    }\r\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\r\n}\r\nfunction setBoxDims(box, left, top, width, height) {\r\n    box.top = top;\r\n    box.left = left;\r\n    box.right = left + width;\r\n    box.bottom = top + height;\r\n    box.width = width;\r\n    box.height = height;\r\n}\r\nfunction placeBoxes(boxes, chartArea, params, stacks) {\r\n    const userPadding = params.padding;\r\n    let { x , y  } = chartArea;\r\n    for (const layout of boxes){\r\n        const box = layout.box;\r\n        const stack = stacks[layout.stack] || {\r\n            count: 1,\r\n            placed: 0,\r\n            weight: 1\r\n        };\r\n        const weight = layout.stackWeight / stack.weight || 1;\r\n        if (layout.horizontal) {\r\n            const width = chartArea.w * weight;\r\n            const height = stack.size || box.height;\r\n            if (defined(stack.start)) {\r\n                y = stack.start;\r\n            }\r\n            if (box.fullSize) {\r\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\r\n            } else {\r\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\r\n            }\r\n            stack.start = y;\r\n            stack.placed += width;\r\n            y = box.bottom;\r\n        } else {\r\n            const height = chartArea.h * weight;\r\n            const width = stack.size || box.width;\r\n            if (defined(stack.start)) {\r\n                x = stack.start;\r\n            }\r\n            if (box.fullSize) {\r\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\r\n            } else {\r\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\r\n            }\r\n            stack.start = x;\r\n            stack.placed += height;\r\n            x = box.right;\r\n        }\r\n    }\r\n    chartArea.x = x;\r\n    chartArea.y = y;\r\n}\r\nvar layouts = {\r\n addBox (chart, item) {\r\n        if (!chart.boxes) {\r\n            chart.boxes = [];\r\n        }\r\n        item.fullSize = item.fullSize || false;\r\n        item.position = item.position || 'top';\r\n        item.weight = item.weight || 0;\r\n        item._layers = item._layers || function() {\r\n            return [\r\n                {\r\n                    z: 0,\r\n                    draw (chartArea) {\r\n                        item.draw(chartArea);\r\n                    }\r\n                }\r\n            ];\r\n        };\r\n        chart.boxes.push(item);\r\n    },\r\n removeBox (chart, layoutItem) {\r\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\r\n        if (index !== -1) {\r\n            chart.boxes.splice(index, 1);\r\n        }\r\n    },\r\n configure (chart, item, options) {\r\n        item.fullSize = options.fullSize;\r\n        item.position = options.position;\r\n        item.weight = options.weight;\r\n    },\r\n update (chart, width, height, minPadding) {\r\n        if (!chart) {\r\n            return;\r\n        }\r\n        const padding = toPadding(chart.options.layout.padding);\r\n        const availableWidth = Math.max(width - padding.width, 0);\r\n        const availableHeight = Math.max(height - padding.height, 0);\r\n        const boxes = buildLayoutBoxes(chart.boxes);\r\n        const verticalBoxes = boxes.vertical;\r\n        const horizontalBoxes = boxes.horizontal;\r\n        each(chart.boxes, (box)=>{\r\n            if (typeof box.beforeLayout === 'function') {\r\n                box.beforeLayout();\r\n            }\r\n        });\r\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\r\n        const params = Object.freeze({\r\n            outerWidth: width,\r\n            outerHeight: height,\r\n            padding,\r\n            availableWidth,\r\n            availableHeight,\r\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\r\n            hBoxMaxHeight: availableHeight / 2\r\n        });\r\n        const maxPadding = Object.assign({}, padding);\r\n        updateMaxPadding(maxPadding, toPadding(minPadding));\r\n        const chartArea = Object.assign({\r\n            maxPadding,\r\n            w: availableWidth,\r\n            h: availableHeight,\r\n            x: padding.left,\r\n            y: padding.top\r\n        }, padding);\r\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\r\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\r\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\r\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\r\n        }\r\n        handleMaxPadding(chartArea);\r\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\r\n        chartArea.x += chartArea.w;\r\n        chartArea.y += chartArea.h;\r\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\r\n        chart.chartArea = {\r\n            left: chartArea.left,\r\n            top: chartArea.top,\r\n            right: chartArea.left + chartArea.w,\r\n            bottom: chartArea.top + chartArea.h,\r\n            height: chartArea.h,\r\n            width: chartArea.w\r\n        };\r\n        each(boxes.chartArea, (layout)=>{\r\n            const box = layout.box;\r\n            Object.assign(box, chart.chartArea);\r\n            box.update(chartArea.w, chartArea.h, {\r\n                left: 0,\r\n                top: 0,\r\n                right: 0,\r\n                bottom: 0\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nclass BasePlatform {\r\n acquireContext(canvas, aspectRatio) {}\r\n releaseContext(context) {\r\n        return false;\r\n    }\r\n addEventListener(chart, type, listener) {}\r\n removeEventListener(chart, type, listener) {}\r\n getDevicePixelRatio() {\r\n        return 1;\r\n    }\r\n getMaximumSize(element, width, height, aspectRatio) {\r\n        width = Math.max(0, width || element.width);\r\n        height = height || element.height;\r\n        return {\r\n            width,\r\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\r\n        };\r\n    }\r\n isAttached(canvas) {\r\n        return true;\r\n    }\r\n updateConfig(config) {\r\n    }\r\n}\r\n\r\nclass BasicPlatform extends BasePlatform {\r\n    acquireContext(item) {\r\n        return item && item.getContext && item.getContext('2d') || null;\r\n    }\r\n    updateConfig(config) {\r\n        config.options.animation = false;\r\n    }\r\n}\r\n\r\nconst EXPANDO_KEY = '$chartjs';\r\n const EVENT_TYPES = {\r\n    touchstart: 'mousedown',\r\n    touchmove: 'mousemove',\r\n    touchend: 'mouseup',\r\n    pointerenter: 'mouseenter',\r\n    pointerdown: 'mousedown',\r\n    pointermove: 'mousemove',\r\n    pointerup: 'mouseup',\r\n    pointerleave: 'mouseout',\r\n    pointerout: 'mouseout'\r\n};\r\nconst isNullOrEmpty = (value)=>value === null || value === '';\r\n function initCanvas(canvas, aspectRatio) {\r\n    const style = canvas.style;\r\n    const renderHeight = canvas.getAttribute('height');\r\n    const renderWidth = canvas.getAttribute('width');\r\n    canvas[EXPANDO_KEY] = {\r\n        initial: {\r\n            height: renderHeight,\r\n            width: renderWidth,\r\n            style: {\r\n                display: style.display,\r\n                height: style.height,\r\n                width: style.width\r\n            }\r\n        }\r\n    };\r\n    style.display = style.display || 'block';\r\n    style.boxSizing = style.boxSizing || 'border-box';\r\n    if (isNullOrEmpty(renderWidth)) {\r\n        const displayWidth = readUsedSize(canvas, 'width');\r\n        if (displayWidth !== undefined) {\r\n            canvas.width = displayWidth;\r\n        }\r\n    }\r\n    if (isNullOrEmpty(renderHeight)) {\r\n        if (canvas.style.height === '') {\r\n            canvas.height = canvas.width / (aspectRatio || 2);\r\n        } else {\r\n            const displayHeight = readUsedSize(canvas, 'height');\r\n            if (displayHeight !== undefined) {\r\n                canvas.height = displayHeight;\r\n            }\r\n        }\r\n    }\r\n    return canvas;\r\n}\r\nconst eventListenerOptions = supportsEventListenerOptions ? {\r\n    passive: true\r\n} : false;\r\nfunction addListener(node, type, listener) {\r\n    node.addEventListener(type, listener, eventListenerOptions);\r\n}\r\nfunction removeListener(chart, type, listener) {\r\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\r\n}\r\nfunction fromNativeEvent(event, chart) {\r\n    const type = EVENT_TYPES[event.type] || event.type;\r\n    const { x , y  } = getRelativePosition(event, chart);\r\n    return {\r\n        type,\r\n        chart,\r\n        native: event,\r\n        x: x !== undefined ? x : null,\r\n        y: y !== undefined ? y : null\r\n    };\r\n}\r\nfunction nodeListContains(nodeList, canvas) {\r\n    for (const node of nodeList){\r\n        if (node === canvas || node.contains(canvas)) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\nfunction createAttachObserver(chart, type, listener) {\r\n    const canvas = chart.canvas;\r\n    const observer = new MutationObserver((entries)=>{\r\n        let trigger = false;\r\n        for (const entry of entries){\r\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\r\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\r\n        }\r\n        if (trigger) {\r\n            listener();\r\n        }\r\n    });\r\n    observer.observe(document, {\r\n        childList: true,\r\n        subtree: true\r\n    });\r\n    return observer;\r\n}\r\nfunction createDetachObserver(chart, type, listener) {\r\n    const canvas = chart.canvas;\r\n    const observer = new MutationObserver((entries)=>{\r\n        let trigger = false;\r\n        for (const entry of entries){\r\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\r\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\r\n        }\r\n        if (trigger) {\r\n            listener();\r\n        }\r\n    });\r\n    observer.observe(document, {\r\n        childList: true,\r\n        subtree: true\r\n    });\r\n    return observer;\r\n}\r\nconst drpListeningCharts = new Map();\r\nlet oldDevicePixelRatio = 0;\r\nfunction onWindowResize() {\r\n    const dpr = window.devicePixelRatio;\r\n    if (dpr === oldDevicePixelRatio) {\r\n        return;\r\n    }\r\n    oldDevicePixelRatio = dpr;\r\n    drpListeningCharts.forEach((resize, chart)=>{\r\n        if (chart.currentDevicePixelRatio !== dpr) {\r\n            resize();\r\n        }\r\n    });\r\n}\r\nfunction listenDevicePixelRatioChanges(chart, resize) {\r\n    if (!drpListeningCharts.size) {\r\n        window.addEventListener('resize', onWindowResize);\r\n    }\r\n    drpListeningCharts.set(chart, resize);\r\n}\r\nfunction unlistenDevicePixelRatioChanges(chart) {\r\n    drpListeningCharts.delete(chart);\r\n    if (!drpListeningCharts.size) {\r\n        window.removeEventListener('resize', onWindowResize);\r\n    }\r\n}\r\nfunction createResizeObserver(chart, type, listener) {\r\n    const canvas = chart.canvas;\r\n    const container = canvas && _getParentNode(canvas);\r\n    if (!container) {\r\n        return;\r\n    }\r\n    const resize = throttled((width, height)=>{\r\n        const w = container.clientWidth;\r\n        listener(width, height);\r\n        if (w < container.clientWidth) {\r\n            listener();\r\n        }\r\n    }, window);\r\n    const observer = new ResizeObserver((entries)=>{\r\n        const entry = entries[0];\r\n        const width = entry.contentRect.width;\r\n        const height = entry.contentRect.height;\r\n        if (width === 0 && height === 0) {\r\n            return;\r\n        }\r\n        resize(width, height);\r\n    });\r\n    observer.observe(container);\r\n    listenDevicePixelRatioChanges(chart, resize);\r\n    return observer;\r\n}\r\nfunction releaseObserver(chart, type, observer) {\r\n    if (observer) {\r\n        observer.disconnect();\r\n    }\r\n    if (type === 'resize') {\r\n        unlistenDevicePixelRatioChanges(chart);\r\n    }\r\n}\r\nfunction createProxyAndListen(chart, type, listener) {\r\n    const canvas = chart.canvas;\r\n    const proxy = throttled((event)=>{\r\n        if (chart.ctx !== null) {\r\n            listener(fromNativeEvent(event, chart));\r\n        }\r\n    }, chart);\r\n    addListener(canvas, type, proxy);\r\n    return proxy;\r\n}\r\n class DomPlatform extends BasePlatform {\r\n acquireContext(canvas, aspectRatio) {\r\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\r\n        if (context && context.canvas === canvas) {\r\n            initCanvas(canvas, aspectRatio);\r\n            return context;\r\n        }\r\n        return null;\r\n    }\r\n releaseContext(context) {\r\n        const canvas = context.canvas;\r\n        if (!canvas[EXPANDO_KEY]) {\r\n            return false;\r\n        }\r\n        const initial = canvas[EXPANDO_KEY].initial;\r\n        [\r\n            'height',\r\n            'width'\r\n        ].forEach((prop)=>{\r\n            const value = initial[prop];\r\n            if (isNullOrUndef(value)) {\r\n                canvas.removeAttribute(prop);\r\n            } else {\r\n                canvas.setAttribute(prop, value);\r\n            }\r\n        });\r\n        const style = initial.style || {};\r\n        Object.keys(style).forEach((key)=>{\r\n            canvas.style[key] = style[key];\r\n        });\r\n        canvas.width = canvas.width;\r\n        delete canvas[EXPANDO_KEY];\r\n        return true;\r\n    }\r\n addEventListener(chart, type, listener) {\r\n        this.removeEventListener(chart, type);\r\n        const proxies = chart.$proxies || (chart.$proxies = {});\r\n        const handlers = {\r\n            attach: createAttachObserver,\r\n            detach: createDetachObserver,\r\n            resize: createResizeObserver\r\n        };\r\n        const handler = handlers[type] || createProxyAndListen;\r\n        proxies[type] = handler(chart, type, listener);\r\n    }\r\n removeEventListener(chart, type) {\r\n        const proxies = chart.$proxies || (chart.$proxies = {});\r\n        const proxy = proxies[type];\r\n        if (!proxy) {\r\n            return;\r\n        }\r\n        const handlers = {\r\n            attach: releaseObserver,\r\n            detach: releaseObserver,\r\n            resize: releaseObserver\r\n        };\r\n        const handler = handlers[type] || removeListener;\r\n        handler(chart, type, proxy);\r\n        proxies[type] = undefined;\r\n    }\r\n    getDevicePixelRatio() {\r\n        return window.devicePixelRatio;\r\n    }\r\n getMaximumSize(canvas, width, height, aspectRatio) {\r\n        return getMaximumSize(canvas, width, height, aspectRatio);\r\n    }\r\n isAttached(canvas) {\r\n        const container = _getParentNode(canvas);\r\n        return !!(container && container.isConnected);\r\n    }\r\n}\r\n\r\nfunction _detectPlatform(canvas) {\r\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\r\n        return BasicPlatform;\r\n    }\r\n    return DomPlatform;\r\n}\r\n\r\nclass Element {\r\n    static defaults = {};\r\n    static defaultRoutes = undefined;\r\n    x;\r\n    y;\r\n    active = false;\r\n    options;\r\n    $animations;\r\n    tooltipPosition(useFinalPosition) {\r\n        const { x , y  } = this.getProps([\r\n            'x',\r\n            'y'\r\n        ], useFinalPosition);\r\n        return {\r\n            x,\r\n            y\r\n        };\r\n    }\r\n    hasValue() {\r\n        return isNumber(this.x) && isNumber(this.y);\r\n    }\r\n    getProps(props, final) {\r\n        const anims = this.$animations;\r\n        if (!final || !anims) {\r\n            // let's not create an object, if not needed\r\n            return this;\r\n        }\r\n        const ret = {};\r\n        props.forEach((prop)=>{\r\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\r\n        });\r\n        return ret;\r\n    }\r\n}\r\n\r\nfunction autoSkip(scale, ticks) {\r\n    const tickOpts = scale.options.ticks;\r\n    const determinedMaxTicks = determineMaxTicks(scale);\r\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\r\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\r\n    const numMajorIndices = majorIndices.length;\r\n    const first = majorIndices[0];\r\n    const last = majorIndices[numMajorIndices - 1];\r\n    const newTicks = [];\r\n    if (numMajorIndices > ticksLimit) {\r\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\r\n        return newTicks;\r\n    }\r\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\r\n    if (numMajorIndices > 0) {\r\n        let i, ilen;\r\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\r\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\r\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\r\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\r\n        }\r\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\r\n        return newTicks;\r\n    }\r\n    skip(ticks, newTicks, spacing);\r\n    return newTicks;\r\n}\r\nfunction determineMaxTicks(scale) {\r\n    const offset = scale.options.offset;\r\n    const tickLength = scale._tickSize();\r\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\r\n    const maxChart = scale._maxLength / tickLength;\r\n    return Math.floor(Math.min(maxScale, maxChart));\r\n}\r\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\r\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\r\n    const spacing = ticks.length / ticksLimit;\r\n    if (!evenMajorSpacing) {\r\n        return Math.max(spacing, 1);\r\n    }\r\n    const factors = _factorize(evenMajorSpacing);\r\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\r\n        const factor = factors[i];\r\n        if (factor > spacing) {\r\n            return factor;\r\n        }\r\n    }\r\n    return Math.max(spacing, 1);\r\n}\r\n function getMajorIndices(ticks) {\r\n    const result = [];\r\n    let i, ilen;\r\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\r\n        if (ticks[i].major) {\r\n            result.push(i);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\r\n    let count = 0;\r\n    let next = majorIndices[0];\r\n    let i;\r\n    spacing = Math.ceil(spacing);\r\n    for(i = 0; i < ticks.length; i++){\r\n        if (i === next) {\r\n            newTicks.push(ticks[i]);\r\n            count++;\r\n            next = majorIndices[count * spacing];\r\n        }\r\n    }\r\n}\r\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\r\n    const start = valueOrDefault(majorStart, 0);\r\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\r\n    let count = 0;\r\n    let length, i, next;\r\n    spacing = Math.ceil(spacing);\r\n    if (majorEnd) {\r\n        length = majorEnd - majorStart;\r\n        spacing = length / Math.floor(length / spacing);\r\n    }\r\n    next = start;\r\n    while(next < 0){\r\n        count++;\r\n        next = Math.round(start + count * spacing);\r\n    }\r\n    for(i = Math.max(start, 0); i < end; i++){\r\n        if (i === next) {\r\n            newTicks.push(ticks[i]);\r\n            count++;\r\n            next = Math.round(start + count * spacing);\r\n        }\r\n    }\r\n}\r\n function getEvenSpacing(arr) {\r\n    const len = arr.length;\r\n    let i, diff;\r\n    if (len < 2) {\r\n        return false;\r\n    }\r\n    for(diff = arr[0], i = 1; i < len; ++i){\r\n        if (arr[i] - arr[i - 1] !== diff) {\r\n            return false;\r\n        }\r\n    }\r\n    return diff;\r\n}\r\n\r\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\r\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\r\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\r\n function sample(arr, numItems) {\r\n    const result = [];\r\n    const increment = arr.length / numItems;\r\n    const len = arr.length;\r\n    let i = 0;\r\n    for(; i < len; i += increment){\r\n        result.push(arr[Math.floor(i)]);\r\n    }\r\n    return result;\r\n}\r\n function getPixelForGridLine(scale, index, offsetGridLines) {\r\n    const length = scale.ticks.length;\r\n    const validIndex = Math.min(index, length - 1);\r\n    const start = scale._startPixel;\r\n    const end = scale._endPixel;\r\n    const epsilon = 1e-6;\r\n    let lineValue = scale.getPixelForTick(validIndex);\r\n    let offset;\r\n    if (offsetGridLines) {\r\n        if (length === 1) {\r\n            offset = Math.max(lineValue - start, end - lineValue);\r\n        } else if (index === 0) {\r\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\r\n        } else {\r\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\r\n        }\r\n        lineValue += validIndex < index ? offset : -offset;\r\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\r\n            return;\r\n        }\r\n    }\r\n    return lineValue;\r\n}\r\n function garbageCollect(caches, length) {\r\n    each(caches, (cache)=>{\r\n        const gc = cache.gc;\r\n        const gcLen = gc.length / 2;\r\n        let i;\r\n        if (gcLen > length) {\r\n            for(i = 0; i < gcLen; ++i){\r\n                delete cache.data[gc[i]];\r\n            }\r\n            gc.splice(0, gcLen);\r\n        }\r\n    });\r\n}\r\n function getTickMarkLength(options) {\r\n    return options.drawTicks ? options.tickLength : 0;\r\n}\r\n function getTitleHeight(options, fallback) {\r\n    if (!options.display) {\r\n        return 0;\r\n    }\r\n    const font = toFont(options.font, fallback);\r\n    const padding = toPadding(options.padding);\r\n    const lines = isArray(options.text) ? options.text.length : 1;\r\n    return lines * font.lineHeight + padding.height;\r\n}\r\nfunction createScaleContext(parent, scale) {\r\n    return createContext(parent, {\r\n        scale,\r\n        type: 'scale'\r\n    });\r\n}\r\nfunction createTickContext(parent, index, tick) {\r\n    return createContext(parent, {\r\n        tick,\r\n        index,\r\n        type: 'tick'\r\n    });\r\n}\r\nfunction titleAlign(align, position, reverse) {\r\n     let ret = _toLeftRightCenter(align);\r\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\r\n        ret = reverseAlign(ret);\r\n    }\r\n    return ret;\r\n}\r\nfunction titleArgs(scale, offset, position, align) {\r\n    const { top , left , bottom , right , chart  } = scale;\r\n    const { chartArea , scales  } = chart;\r\n    let rotation = 0;\r\n    let maxWidth, titleX, titleY;\r\n    const height = bottom - top;\r\n    const width = right - left;\r\n    if (scale.isHorizontal()) {\r\n        titleX = _alignStartEnd(align, left, right);\r\n        if (isObject(position)) {\r\n            const positionAxisID = Object.keys(position)[0];\r\n            const value = position[positionAxisID];\r\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\r\n        } else if (position === 'center') {\r\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\r\n        } else {\r\n            titleY = offsetFromEdge(scale, position, offset);\r\n        }\r\n        maxWidth = right - left;\r\n    } else {\r\n        if (isObject(position)) {\r\n            const positionAxisID = Object.keys(position)[0];\r\n            const value = position[positionAxisID];\r\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\r\n        } else if (position === 'center') {\r\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\r\n        } else {\r\n            titleX = offsetFromEdge(scale, position, offset);\r\n        }\r\n        titleY = _alignStartEnd(align, bottom, top);\r\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\r\n    }\r\n    return {\r\n        titleX,\r\n        titleY,\r\n        maxWidth,\r\n        rotation\r\n    };\r\n}\r\nclass Scale extends Element {\r\n    constructor(cfg){\r\n        super();\r\n         this.id = cfg.id;\r\n         this.type = cfg.type;\r\n         this.options = undefined;\r\n         this.ctx = cfg.ctx;\r\n         this.chart = cfg.chart;\r\n         this.top = undefined;\r\n         this.bottom = undefined;\r\n         this.left = undefined;\r\n         this.right = undefined;\r\n         this.width = undefined;\r\n         this.height = undefined;\r\n        this._margins = {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        };\r\n         this.maxWidth = undefined;\r\n         this.maxHeight = undefined;\r\n         this.paddingTop = undefined;\r\n         this.paddingBottom = undefined;\r\n         this.paddingLeft = undefined;\r\n         this.paddingRight = undefined;\r\n         this.axis = undefined;\r\n         this.labelRotation = undefined;\r\n        this.min = undefined;\r\n        this.max = undefined;\r\n        this._range = undefined;\r\n         this.ticks = [];\r\n         this._gridLineItems = null;\r\n         this._labelItems = null;\r\n         this._labelSizes = null;\r\n        this._length = 0;\r\n        this._maxLength = 0;\r\n        this._longestTextCache = {};\r\n         this._startPixel = undefined;\r\n         this._endPixel = undefined;\r\n        this._reversePixels = false;\r\n        this._userMax = undefined;\r\n        this._userMin = undefined;\r\n        this._suggestedMax = undefined;\r\n        this._suggestedMin = undefined;\r\n        this._ticksLength = 0;\r\n        this._borderValue = 0;\r\n        this._cache = {};\r\n        this._dataLimitsCached = false;\r\n        this.$context = undefined;\r\n    }\r\n init(options) {\r\n        this.options = options.setContext(this.getContext());\r\n        this.axis = options.axis;\r\n        this._userMin = this.parse(options.min);\r\n        this._userMax = this.parse(options.max);\r\n        this._suggestedMin = this.parse(options.suggestedMin);\r\n        this._suggestedMax = this.parse(options.suggestedMax);\r\n    }\r\n parse(raw, index) {\r\n        return raw;\r\n    }\r\n getUserBounds() {\r\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\r\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\r\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\r\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\r\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\r\n        return {\r\n            min: finiteOrDefault(_userMin, _suggestedMin),\r\n            max: finiteOrDefault(_userMax, _suggestedMax),\r\n            minDefined: isNumberFinite(_userMin),\r\n            maxDefined: isNumberFinite(_userMax)\r\n        };\r\n    }\r\n getMinMax(canStack) {\r\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\r\n        let range;\r\n        if (minDefined && maxDefined) {\r\n            return {\r\n                min,\r\n                max\r\n            };\r\n        }\r\n        const metas = this.getMatchingVisibleMetas();\r\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\r\n            range = metas[i].controller.getMinMax(this, canStack);\r\n            if (!minDefined) {\r\n                min = Math.min(min, range.min);\r\n            }\r\n            if (!maxDefined) {\r\n                max = Math.max(max, range.max);\r\n            }\r\n        }\r\n        min = maxDefined && min > max ? max : min;\r\n        max = minDefined && min > max ? min : max;\r\n        return {\r\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\r\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\r\n        };\r\n    }\r\n getPadding() {\r\n        return {\r\n            left: this.paddingLeft || 0,\r\n            top: this.paddingTop || 0,\r\n            right: this.paddingRight || 0,\r\n            bottom: this.paddingBottom || 0\r\n        };\r\n    }\r\n getTicks() {\r\n        return this.ticks;\r\n    }\r\n getLabels() {\r\n        const data = this.chart.data;\r\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\r\n    }\r\n getLabelItems(chartArea = this.chart.chartArea) {\r\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\r\n        return items;\r\n    }\r\n    beforeLayout() {\r\n        this._cache = {};\r\n        this._dataLimitsCached = false;\r\n    }\r\n    beforeUpdate() {\r\n        callback(this.options.beforeUpdate, [\r\n            this\r\n        ]);\r\n    }\r\n update(maxWidth, maxHeight, margins) {\r\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\r\n        const sampleSize = tickOpts.sampleSize;\r\n        this.beforeUpdate();\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n        this._margins = margins = Object.assign({\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }, margins);\r\n        this.ticks = null;\r\n        this._labelSizes = null;\r\n        this._gridLineItems = null;\r\n        this._labelItems = null;\r\n        this.beforeSetDimensions();\r\n        this.setDimensions();\r\n        this.afterSetDimensions();\r\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\r\n        if (!this._dataLimitsCached) {\r\n            this.beforeDataLimits();\r\n            this.determineDataLimits();\r\n            this.afterDataLimits();\r\n            this._range = _addGrace(this, grace, beginAtZero);\r\n            this._dataLimitsCached = true;\r\n        }\r\n        this.beforeBuildTicks();\r\n        this.ticks = this.buildTicks() || [];\r\n        this.afterBuildTicks();\r\n        const samplingEnabled = sampleSize < this.ticks.length;\r\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\r\n        this.configure();\r\n        this.beforeCalculateLabelRotation();\r\n        this.calculateLabelRotation();\r\n        this.afterCalculateLabelRotation();\r\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\r\n            this.ticks = autoSkip(this, this.ticks);\r\n            this._labelSizes = null;\r\n            this.afterAutoSkip();\r\n        }\r\n        if (samplingEnabled) {\r\n            this._convertTicksToLabels(this.ticks);\r\n        }\r\n        this.beforeFit();\r\n        this.fit();\r\n        this.afterFit();\r\n        this.afterUpdate();\r\n    }\r\n configure() {\r\n        let reversePixels = this.options.reverse;\r\n        let startPixel, endPixel;\r\n        if (this.isHorizontal()) {\r\n            startPixel = this.left;\r\n            endPixel = this.right;\r\n        } else {\r\n            startPixel = this.top;\r\n            endPixel = this.bottom;\r\n            reversePixels = !reversePixels;\r\n        }\r\n        this._startPixel = startPixel;\r\n        this._endPixel = endPixel;\r\n        this._reversePixels = reversePixels;\r\n        this._length = endPixel - startPixel;\r\n        this._alignToPixels = this.options.alignToPixels;\r\n    }\r\n    afterUpdate() {\r\n        callback(this.options.afterUpdate, [\r\n            this\r\n        ]);\r\n    }\r\n    beforeSetDimensions() {\r\n        callback(this.options.beforeSetDimensions, [\r\n            this\r\n        ]);\r\n    }\r\n    setDimensions() {\r\n        if (this.isHorizontal()) {\r\n            this.width = this.maxWidth;\r\n            this.left = 0;\r\n            this.right = this.width;\r\n        } else {\r\n            this.height = this.maxHeight;\r\n            this.top = 0;\r\n            this.bottom = this.height;\r\n        }\r\n        this.paddingLeft = 0;\r\n        this.paddingTop = 0;\r\n        this.paddingRight = 0;\r\n        this.paddingBottom = 0;\r\n    }\r\n    afterSetDimensions() {\r\n        callback(this.options.afterSetDimensions, [\r\n            this\r\n        ]);\r\n    }\r\n    _callHooks(name) {\r\n        this.chart.notifyPlugins(name, this.getContext());\r\n        callback(this.options[name], [\r\n            this\r\n        ]);\r\n    }\r\n    beforeDataLimits() {\r\n        this._callHooks('beforeDataLimits');\r\n    }\r\n    determineDataLimits() {}\r\n    afterDataLimits() {\r\n        this._callHooks('afterDataLimits');\r\n    }\r\n    beforeBuildTicks() {\r\n        this._callHooks('beforeBuildTicks');\r\n    }\r\n buildTicks() {\r\n        return [];\r\n    }\r\n    afterBuildTicks() {\r\n        this._callHooks('afterBuildTicks');\r\n    }\r\n    beforeTickToLabelConversion() {\r\n        callback(this.options.beforeTickToLabelConversion, [\r\n            this\r\n        ]);\r\n    }\r\n generateTickLabels(ticks) {\r\n        const tickOpts = this.options.ticks;\r\n        let i, ilen, tick;\r\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\r\n            tick = ticks[i];\r\n            tick.label = callback(tickOpts.callback, [\r\n                tick.value,\r\n                i,\r\n                ticks\r\n            ], this);\r\n        }\r\n    }\r\n    afterTickToLabelConversion() {\r\n        callback(this.options.afterTickToLabelConversion, [\r\n            this\r\n        ]);\r\n    }\r\n    beforeCalculateLabelRotation() {\r\n        callback(this.options.beforeCalculateLabelRotation, [\r\n            this\r\n        ]);\r\n    }\r\n    calculateLabelRotation() {\r\n        const options = this.options;\r\n        const tickOpts = options.ticks;\r\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\r\n        const minRotation = tickOpts.minRotation || 0;\r\n        const maxRotation = tickOpts.maxRotation;\r\n        let labelRotation = minRotation;\r\n        let tickWidth, maxHeight, maxLabelDiagonal;\r\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\r\n            this.labelRotation = minRotation;\r\n            return;\r\n        }\r\n        const labelSizes = this._getLabelSizes();\r\n        const maxLabelWidth = labelSizes.widest.width;\r\n        const maxLabelHeight = labelSizes.highest.height;\r\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\r\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\r\n        if (maxLabelWidth + 6 > tickWidth) {\r\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\r\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\r\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\r\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\r\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\r\n        }\r\n        this.labelRotation = labelRotation;\r\n    }\r\n    afterCalculateLabelRotation() {\r\n        callback(this.options.afterCalculateLabelRotation, [\r\n            this\r\n        ]);\r\n    }\r\n    afterAutoSkip() {}\r\n    beforeFit() {\r\n        callback(this.options.beforeFit, [\r\n            this\r\n        ]);\r\n    }\r\n    fit() {\r\n        const minSize = {\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\r\n        const display = this._isVisible();\r\n        const isHorizontal = this.isHorizontal();\r\n        if (display) {\r\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\r\n            if (isHorizontal) {\r\n                minSize.width = this.maxWidth;\r\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\r\n            } else {\r\n                minSize.height = this.maxHeight;\r\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\r\n            }\r\n            if (tickOpts.display && this.ticks.length) {\r\n                const { first , last , widest , highest  } = this._getLabelSizes();\r\n                const tickPadding = tickOpts.padding * 2;\r\n                const angleRadians = toRadians(this.labelRotation);\r\n                const cos = Math.cos(angleRadians);\r\n                const sin = Math.sin(angleRadians);\r\n                if (isHorizontal) {\r\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\r\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\r\n                } else {\r\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\r\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\r\n                }\r\n                this._calculatePadding(first, last, sin, cos);\r\n            }\r\n        }\r\n        this._handleMargins();\r\n        if (isHorizontal) {\r\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\r\n            this.height = minSize.height;\r\n        } else {\r\n            this.width = minSize.width;\r\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\r\n        }\r\n    }\r\n    _calculatePadding(first, last, sin, cos) {\r\n        const { ticks: { align , padding  } , position  } = this.options;\r\n        const isRotated = this.labelRotation !== 0;\r\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\r\n        if (this.isHorizontal()) {\r\n            const offsetLeft = this.getPixelForTick(0) - this.left;\r\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\r\n            let paddingLeft = 0;\r\n            let paddingRight = 0;\r\n            if (isRotated) {\r\n                if (labelsBelowTicks) {\r\n                    paddingLeft = cos * first.width;\r\n                    paddingRight = sin * last.height;\r\n                } else {\r\n                    paddingLeft = sin * first.height;\r\n                    paddingRight = cos * last.width;\r\n                }\r\n            } else if (align === 'start') {\r\n                paddingRight = last.width;\r\n            } else if (align === 'end') {\r\n                paddingLeft = first.width;\r\n            } else if (align !== 'inner') {\r\n                paddingLeft = first.width / 2;\r\n                paddingRight = last.width / 2;\r\n            }\r\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\r\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\r\n        } else {\r\n            let paddingTop = last.height / 2;\r\n            let paddingBottom = first.height / 2;\r\n            if (align === 'start') {\r\n                paddingTop = 0;\r\n                paddingBottom = first.height;\r\n            } else if (align === 'end') {\r\n                paddingTop = last.height;\r\n                paddingBottom = 0;\r\n            }\r\n            this.paddingTop = paddingTop + padding;\r\n            this.paddingBottom = paddingBottom + padding;\r\n        }\r\n    }\r\n _handleMargins() {\r\n        if (this._margins) {\r\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\r\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\r\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\r\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\r\n        }\r\n    }\r\n    afterFit() {\r\n        callback(this.options.afterFit, [\r\n            this\r\n        ]);\r\n    }\r\n isHorizontal() {\r\n        const { axis , position  } = this.options;\r\n        return position === 'top' || position === 'bottom' || axis === 'x';\r\n    }\r\n isFullSize() {\r\n        return this.options.fullSize;\r\n    }\r\n _convertTicksToLabels(ticks) {\r\n        this.beforeTickToLabelConversion();\r\n        this.generateTickLabels(ticks);\r\n        let i, ilen;\r\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\r\n            if (isNullOrUndef(ticks[i].label)) {\r\n                ticks.splice(i, 1);\r\n                ilen--;\r\n                i--;\r\n            }\r\n        }\r\n        this.afterTickToLabelConversion();\r\n    }\r\n _getLabelSizes() {\r\n        let labelSizes = this._labelSizes;\r\n        if (!labelSizes) {\r\n            const sampleSize = this.options.ticks.sampleSize;\r\n            let ticks = this.ticks;\r\n            if (sampleSize < ticks.length) {\r\n                ticks = sample(ticks, sampleSize);\r\n            }\r\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\r\n        }\r\n        return labelSizes;\r\n    }\r\n _computeLabelSizes(ticks, length, maxTicksLimit) {\r\n        const { ctx , _longestTextCache: caches  } = this;\r\n        const widths = [];\r\n        const heights = [];\r\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\r\n        let widestLabelSize = 0;\r\n        let highestLabelSize = 0;\r\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\r\n        for(i = 0; i < length; i += increment){\r\n            label = ticks[i].label;\r\n            tickFont = this._resolveTickFontOptions(i);\r\n            ctx.font = fontString = tickFont.string;\r\n            cache = caches[fontString] = caches[fontString] || {\r\n                data: {},\r\n                gc: []\r\n            };\r\n            lineHeight = tickFont.lineHeight;\r\n            width = height = 0;\r\n            if (!isNullOrUndef(label) && !isArray(label)) {\r\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\r\n                height = lineHeight;\r\n            } else if (isArray(label)) {\r\n                for(j = 0, jlen = label.length; j < jlen; ++j){\r\n                    nestedLabel =  label[j];\r\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\r\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\r\n                        height += lineHeight;\r\n                    }\r\n                }\r\n            }\r\n            widths.push(width);\r\n            heights.push(height);\r\n            widestLabelSize = Math.max(width, widestLabelSize);\r\n            highestLabelSize = Math.max(height, highestLabelSize);\r\n        }\r\n        garbageCollect(caches, length);\r\n        const widest = widths.indexOf(widestLabelSize);\r\n        const highest = heights.indexOf(highestLabelSize);\r\n        const valueAt = (idx)=>({\r\n                width: widths[idx] || 0,\r\n                height: heights[idx] || 0\r\n            });\r\n        return {\r\n            first: valueAt(0),\r\n            last: valueAt(length - 1),\r\n            widest: valueAt(widest),\r\n            highest: valueAt(highest),\r\n            widths,\r\n            heights\r\n        };\r\n    }\r\n getLabelForValue(value) {\r\n        return value;\r\n    }\r\n getPixelForValue(value, index) {\r\n        return NaN;\r\n    }\r\n getValueForPixel(pixel) {}\r\n getPixelForTick(index) {\r\n        const ticks = this.ticks;\r\n        if (index < 0 || index > ticks.length - 1) {\r\n            return null;\r\n        }\r\n        return this.getPixelForValue(ticks[index].value);\r\n    }\r\n getPixelForDecimal(decimal) {\r\n        if (this._reversePixels) {\r\n            decimal = 1 - decimal;\r\n        }\r\n        const pixel = this._startPixel + decimal * this._length;\r\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\r\n    }\r\n getDecimalForPixel(pixel) {\r\n        const decimal = (pixel - this._startPixel) / this._length;\r\n        return this._reversePixels ? 1 - decimal : decimal;\r\n    }\r\n getBasePixel() {\r\n        return this.getPixelForValue(this.getBaseValue());\r\n    }\r\n getBaseValue() {\r\n        const { min , max  } = this;\r\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\r\n    }\r\n getContext(index) {\r\n        const ticks = this.ticks || [];\r\n        if (index >= 0 && index < ticks.length) {\r\n            const tick = ticks[index];\r\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\r\n        }\r\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\r\n    }\r\n _tickSize() {\r\n        const optionTicks = this.options.ticks;\r\n        const rot = toRadians(this.labelRotation);\r\n        const cos = Math.abs(Math.cos(rot));\r\n        const sin = Math.abs(Math.sin(rot));\r\n        const labelSizes = this._getLabelSizes();\r\n        const padding = optionTicks.autoSkipPadding || 0;\r\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\r\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\r\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\r\n    }\r\n _isVisible() {\r\n        const display = this.options.display;\r\n        if (display !== 'auto') {\r\n            return !!display;\r\n        }\r\n        return this.getMatchingVisibleMetas().length > 0;\r\n    }\r\n _computeGridLineItems(chartArea) {\r\n        const axis = this.axis;\r\n        const chart = this.chart;\r\n        const options = this.options;\r\n        const { grid , position , border  } = options;\r\n        const offset = grid.offset;\r\n        const isHorizontal = this.isHorizontal();\r\n        const ticks = this.ticks;\r\n        const ticksLength = ticks.length + (offset ? 1 : 0);\r\n        const tl = getTickMarkLength(grid);\r\n        const items = [];\r\n        const borderOpts = border.setContext(this.getContext());\r\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\r\n        const axisHalfWidth = axisWidth / 2;\r\n        const alignBorderValue = function(pixel) {\r\n            return _alignPixel(chart, pixel, axisWidth);\r\n        };\r\n        let borderValue, i, lineValue, alignedLineValue;\r\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\r\n        if (position === 'top') {\r\n            borderValue = alignBorderValue(this.bottom);\r\n            ty1 = this.bottom - tl;\r\n            ty2 = borderValue - axisHalfWidth;\r\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\r\n            y2 = chartArea.bottom;\r\n        } else if (position === 'bottom') {\r\n            borderValue = alignBorderValue(this.top);\r\n            y1 = chartArea.top;\r\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\r\n            ty1 = borderValue + axisHalfWidth;\r\n            ty2 = this.top + tl;\r\n        } else if (position === 'left') {\r\n            borderValue = alignBorderValue(this.right);\r\n            tx1 = this.right - tl;\r\n            tx2 = borderValue - axisHalfWidth;\r\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\r\n            x2 = chartArea.right;\r\n        } else if (position === 'right') {\r\n            borderValue = alignBorderValue(this.left);\r\n            x1 = chartArea.left;\r\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\r\n            tx1 = borderValue + axisHalfWidth;\r\n            tx2 = this.left + tl;\r\n        } else if (axis === 'x') {\r\n            if (position === 'center') {\r\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\r\n            } else if (isObject(position)) {\r\n                const positionAxisID = Object.keys(position)[0];\r\n                const value = position[positionAxisID];\r\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n            }\r\n            y1 = chartArea.top;\r\n            y2 = chartArea.bottom;\r\n            ty1 = borderValue + axisHalfWidth;\r\n            ty2 = ty1 + tl;\r\n        } else if (axis === 'y') {\r\n            if (position === 'center') {\r\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\r\n            } else if (isObject(position)) {\r\n                const positionAxisID = Object.keys(position)[0];\r\n                const value = position[positionAxisID];\r\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\r\n            }\r\n            tx1 = borderValue - axisHalfWidth;\r\n            tx2 = tx1 - tl;\r\n            x1 = chartArea.left;\r\n            x2 = chartArea.right;\r\n        }\r\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\r\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\r\n        for(i = 0; i < ticksLength; i += step){\r\n            const context = this.getContext(i);\r\n            const optsAtIndex = grid.setContext(context);\r\n            const optsAtIndexBorder = border.setContext(context);\r\n            const lineWidth = optsAtIndex.lineWidth;\r\n            const lineColor = optsAtIndex.color;\r\n            const borderDash = optsAtIndexBorder.dash || [];\r\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\r\n            const tickWidth = optsAtIndex.tickWidth;\r\n            const tickColor = optsAtIndex.tickColor;\r\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\r\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\r\n            lineValue = getPixelForGridLine(this, i, offset);\r\n            if (lineValue === undefined) {\r\n                continue;\r\n            }\r\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\r\n            if (isHorizontal) {\r\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\r\n            } else {\r\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\r\n            }\r\n            items.push({\r\n                tx1,\r\n                ty1,\r\n                tx2,\r\n                ty2,\r\n                x1,\r\n                y1,\r\n                x2,\r\n                y2,\r\n                width: lineWidth,\r\n                color: lineColor,\r\n                borderDash,\r\n                borderDashOffset,\r\n                tickWidth,\r\n                tickColor,\r\n                tickBorderDash,\r\n                tickBorderDashOffset\r\n            });\r\n        }\r\n        this._ticksLength = ticksLength;\r\n        this._borderValue = borderValue;\r\n        return items;\r\n    }\r\n _computeLabelItems(chartArea) {\r\n        const axis = this.axis;\r\n        const options = this.options;\r\n        const { position , ticks: optionTicks  } = options;\r\n        const isHorizontal = this.isHorizontal();\r\n        const ticks = this.ticks;\r\n        const { align , crossAlign , padding , mirror  } = optionTicks;\r\n        const tl = getTickMarkLength(options.grid);\r\n        const tickAndPadding = tl + padding;\r\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\r\n        const rotation = -toRadians(this.labelRotation);\r\n        const items = [];\r\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\r\n        let textBaseline = 'middle';\r\n        if (position === 'top') {\r\n            y = this.bottom - hTickAndPadding;\r\n            textAlign = this._getXAxisLabelAlignment();\r\n        } else if (position === 'bottom') {\r\n            y = this.top + hTickAndPadding;\r\n            textAlign = this._getXAxisLabelAlignment();\r\n        } else if (position === 'left') {\r\n            const ret = this._getYAxisLabelAlignment(tl);\r\n            textAlign = ret.textAlign;\r\n            x = ret.x;\r\n        } else if (position === 'right') {\r\n            const ret = this._getYAxisLabelAlignment(tl);\r\n            textAlign = ret.textAlign;\r\n            x = ret.x;\r\n        } else if (axis === 'x') {\r\n            if (position === 'center') {\r\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\r\n            } else if (isObject(position)) {\r\n                const positionAxisID = Object.keys(position)[0];\r\n                const value = position[positionAxisID];\r\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\r\n            }\r\n            textAlign = this._getXAxisLabelAlignment();\r\n        } else if (axis === 'y') {\r\n            if (position === 'center') {\r\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\r\n            } else if (isObject(position)) {\r\n                const positionAxisID = Object.keys(position)[0];\r\n                const value = position[positionAxisID];\r\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\r\n            }\r\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\r\n        }\r\n        if (axis === 'y') {\r\n            if (align === 'start') {\r\n                textBaseline = 'top';\r\n            } else if (align === 'end') {\r\n                textBaseline = 'bottom';\r\n            }\r\n        }\r\n        const labelSizes = this._getLabelSizes();\r\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\r\n            tick = ticks[i];\r\n            label = tick.label;\r\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\r\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\r\n            font = this._resolveTickFontOptions(i);\r\n            lineHeight = font.lineHeight;\r\n            lineCount = isArray(label) ? label.length : 1;\r\n            const halfCount = lineCount / 2;\r\n            const color = optsAtIndex.color;\r\n            const strokeColor = optsAtIndex.textStrokeColor;\r\n            const strokeWidth = optsAtIndex.textStrokeWidth;\r\n            let tickTextAlign = textAlign;\r\n            if (isHorizontal) {\r\n                x = pixel;\r\n                if (textAlign === 'inner') {\r\n                    if (i === ilen - 1) {\r\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\r\n                    } else if (i === 0) {\r\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\r\n                    } else {\r\n                        tickTextAlign = 'center';\r\n                    }\r\n                }\r\n                if (position === 'top') {\r\n                    if (crossAlign === 'near' || rotation !== 0) {\r\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\r\n                    } else if (crossAlign === 'center') {\r\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\r\n                    } else {\r\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\r\n                    }\r\n                } else {\r\n                    if (crossAlign === 'near' || rotation !== 0) {\r\n                        textOffset = lineHeight / 2;\r\n                    } else if (crossAlign === 'center') {\r\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\r\n                    } else {\r\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\r\n                    }\r\n                }\r\n                if (mirror) {\r\n                    textOffset *= -1;\r\n                }\r\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\r\n                    x += lineHeight / 2 * Math.sin(rotation);\r\n                }\r\n            } else {\r\n                y = pixel;\r\n                textOffset = (1 - lineCount) * lineHeight / 2;\r\n            }\r\n            let backdrop;\r\n            if (optsAtIndex.showLabelBackdrop) {\r\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\r\n                const height = labelSizes.heights[i];\r\n                const width = labelSizes.widths[i];\r\n                let top = textOffset - labelPadding.top;\r\n                let left = 0 - labelPadding.left;\r\n                switch(textBaseline){\r\n                    case 'middle':\r\n                        top -= height / 2;\r\n                        break;\r\n                    case 'bottom':\r\n                        top -= height;\r\n                        break;\r\n                }\r\n                switch(textAlign){\r\n                    case 'center':\r\n                        left -= width / 2;\r\n                        break;\r\n                    case 'right':\r\n                        left -= width;\r\n                        break;\r\n                    case 'inner':\r\n                        if (i === ilen - 1) {\r\n                            left -= width;\r\n                        } else if (i > 0) {\r\n                            left -= width / 2;\r\n                        }\r\n                        break;\r\n                }\r\n                backdrop = {\r\n                    left,\r\n                    top,\r\n                    width: width + labelPadding.width,\r\n                    height: height + labelPadding.height,\r\n                    color: optsAtIndex.backdropColor\r\n                };\r\n            }\r\n            items.push({\r\n                label,\r\n                font,\r\n                textOffset,\r\n                options: {\r\n                    rotation,\r\n                    color,\r\n                    strokeColor,\r\n                    strokeWidth,\r\n                    textAlign: tickTextAlign,\r\n                    textBaseline,\r\n                    translation: [\r\n                        x,\r\n                        y\r\n                    ],\r\n                    backdrop\r\n                }\r\n            });\r\n        }\r\n        return items;\r\n    }\r\n    _getXAxisLabelAlignment() {\r\n        const { position , ticks  } = this.options;\r\n        const rotation = -toRadians(this.labelRotation);\r\n        if (rotation) {\r\n            return position === 'top' ? 'left' : 'right';\r\n        }\r\n        let align = 'center';\r\n        if (ticks.align === 'start') {\r\n            align = 'left';\r\n        } else if (ticks.align === 'end') {\r\n            align = 'right';\r\n        } else if (ticks.align === 'inner') {\r\n            align = 'inner';\r\n        }\r\n        return align;\r\n    }\r\n    _getYAxisLabelAlignment(tl) {\r\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\r\n        const labelSizes = this._getLabelSizes();\r\n        const tickAndPadding = tl + padding;\r\n        const widest = labelSizes.widest.width;\r\n        let textAlign;\r\n        let x;\r\n        if (position === 'left') {\r\n            if (mirror) {\r\n                x = this.right + padding;\r\n                if (crossAlign === 'near') {\r\n                    textAlign = 'left';\r\n                } else if (crossAlign === 'center') {\r\n                    textAlign = 'center';\r\n                    x += widest / 2;\r\n                } else {\r\n                    textAlign = 'right';\r\n                    x += widest;\r\n                }\r\n            } else {\r\n                x = this.right - tickAndPadding;\r\n                if (crossAlign === 'near') {\r\n                    textAlign = 'right';\r\n                } else if (crossAlign === 'center') {\r\n                    textAlign = 'center';\r\n                    x -= widest / 2;\r\n                } else {\r\n                    textAlign = 'left';\r\n                    x = this.left;\r\n                }\r\n            }\r\n        } else if (position === 'right') {\r\n            if (mirror) {\r\n                x = this.left + padding;\r\n                if (crossAlign === 'near') {\r\n                    textAlign = 'right';\r\n                } else if (crossAlign === 'center') {\r\n                    textAlign = 'center';\r\n                    x -= widest / 2;\r\n                } else {\r\n                    textAlign = 'left';\r\n                    x -= widest;\r\n                }\r\n            } else {\r\n                x = this.left + tickAndPadding;\r\n                if (crossAlign === 'near') {\r\n                    textAlign = 'left';\r\n                } else if (crossAlign === 'center') {\r\n                    textAlign = 'center';\r\n                    x += widest / 2;\r\n                } else {\r\n                    textAlign = 'right';\r\n                    x = this.right;\r\n                }\r\n            }\r\n        } else {\r\n            textAlign = 'right';\r\n        }\r\n        return {\r\n            textAlign,\r\n            x\r\n        };\r\n    }\r\n _computeLabelArea() {\r\n        if (this.options.ticks.mirror) {\r\n            return;\r\n        }\r\n        const chart = this.chart;\r\n        const position = this.options.position;\r\n        if (position === 'left' || position === 'right') {\r\n            return {\r\n                top: 0,\r\n                left: this.left,\r\n                bottom: chart.height,\r\n                right: this.right\r\n            };\r\n        }\r\n        if (position === 'top' || position === 'bottom') {\r\n            return {\r\n                top: this.top,\r\n                left: 0,\r\n                bottom: this.bottom,\r\n                right: chart.width\r\n            };\r\n        }\r\n    }\r\n drawBackground() {\r\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\r\n        if (backgroundColor) {\r\n            ctx.save();\r\n            ctx.fillStyle = backgroundColor;\r\n            ctx.fillRect(left, top, width, height);\r\n            ctx.restore();\r\n        }\r\n    }\r\n    getLineWidthForValue(value) {\r\n        const grid = this.options.grid;\r\n        if (!this._isVisible() || !grid.display) {\r\n            return 0;\r\n        }\r\n        const ticks = this.ticks;\r\n        const index = ticks.findIndex((t)=>t.value === value);\r\n        if (index >= 0) {\r\n            const opts = grid.setContext(this.getContext(index));\r\n            return opts.lineWidth;\r\n        }\r\n        return 0;\r\n    }\r\n drawGrid(chartArea) {\r\n        const grid = this.options.grid;\r\n        const ctx = this.ctx;\r\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\r\n        let i, ilen;\r\n        const drawLine = (p1, p2, style)=>{\r\n            if (!style.width || !style.color) {\r\n                return;\r\n            }\r\n            ctx.save();\r\n            ctx.lineWidth = style.width;\r\n            ctx.strokeStyle = style.color;\r\n            ctx.setLineDash(style.borderDash || []);\r\n            ctx.lineDashOffset = style.borderDashOffset;\r\n            ctx.beginPath();\r\n            ctx.moveTo(p1.x, p1.y);\r\n            ctx.lineTo(p2.x, p2.y);\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        };\r\n        if (grid.display) {\r\n            for(i = 0, ilen = items.length; i < ilen; ++i){\r\n                const item = items[i];\r\n                if (grid.drawOnChartArea) {\r\n                    drawLine({\r\n                        x: item.x1,\r\n                        y: item.y1\r\n                    }, {\r\n                        x: item.x2,\r\n                        y: item.y2\r\n                    }, item);\r\n                }\r\n                if (grid.drawTicks) {\r\n                    drawLine({\r\n                        x: item.tx1,\r\n                        y: item.ty1\r\n                    }, {\r\n                        x: item.tx2,\r\n                        y: item.ty2\r\n                    }, {\r\n                        color: item.tickColor,\r\n                        width: item.tickWidth,\r\n                        borderDash: item.tickBorderDash,\r\n                        borderDashOffset: item.tickBorderDashOffset\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n drawBorder() {\r\n        const { chart , ctx , options: { border , grid  }  } = this;\r\n        const borderOpts = border.setContext(this.getContext());\r\n        const axisWidth = border.display ? borderOpts.width : 0;\r\n        if (!axisWidth) {\r\n            return;\r\n        }\r\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\r\n        const borderValue = this._borderValue;\r\n        let x1, x2, y1, y2;\r\n        if (this.isHorizontal()) {\r\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\r\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\r\n            y1 = y2 = borderValue;\r\n        } else {\r\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\r\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\r\n            x1 = x2 = borderValue;\r\n        }\r\n        ctx.save();\r\n        ctx.lineWidth = borderOpts.width;\r\n        ctx.strokeStyle = borderOpts.color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n drawLabels(chartArea) {\r\n        const optionTicks = this.options.ticks;\r\n        if (!optionTicks.display) {\r\n            return;\r\n        }\r\n        const ctx = this.ctx;\r\n        const area = this._computeLabelArea();\r\n        if (area) {\r\n            clipArea(ctx, area);\r\n        }\r\n        const items = this.getLabelItems(chartArea);\r\n        for (const item of items){\r\n            const renderTextOptions = item.options;\r\n            const tickFont = item.font;\r\n            const label = item.label;\r\n            const y = item.textOffset;\r\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\r\n        }\r\n        if (area) {\r\n            unclipArea(ctx);\r\n        }\r\n    }\r\n drawTitle() {\r\n        const { ctx , options: { position , title , reverse  }  } = this;\r\n        if (!title.display) {\r\n            return;\r\n        }\r\n        const font = toFont(title.font);\r\n        const padding = toPadding(title.padding);\r\n        const align = title.align;\r\n        let offset = font.lineHeight / 2;\r\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\r\n            offset += padding.bottom;\r\n            if (isArray(title.text)) {\r\n                offset += font.lineHeight * (title.text.length - 1);\r\n            }\r\n        } else {\r\n            offset += padding.top;\r\n        }\r\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\r\n        renderText(ctx, title.text, 0, 0, font, {\r\n            color: title.color,\r\n            maxWidth,\r\n            rotation,\r\n            textAlign: titleAlign(align, position, reverse),\r\n            textBaseline: 'middle',\r\n            translation: [\r\n                titleX,\r\n                titleY\r\n            ]\r\n        });\r\n    }\r\n    draw(chartArea) {\r\n        if (!this._isVisible()) {\r\n            return;\r\n        }\r\n        this.drawBackground();\r\n        this.drawGrid(chartArea);\r\n        this.drawBorder();\r\n        this.drawTitle();\r\n        this.drawLabels(chartArea);\r\n    }\r\n _layers() {\r\n        const opts = this.options;\r\n        const tz = opts.ticks && opts.ticks.z || 0;\r\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\r\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\r\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\r\n            return [\r\n                {\r\n                    z: tz,\r\n                    draw: (chartArea)=>{\r\n                        this.draw(chartArea);\r\n                    }\r\n                }\r\n            ];\r\n        }\r\n        return [\r\n            {\r\n                z: gz,\r\n                draw: (chartArea)=>{\r\n                    this.drawBackground();\r\n                    this.drawGrid(chartArea);\r\n                    this.drawTitle();\r\n                }\r\n            },\r\n            {\r\n                z: bz,\r\n                draw: ()=>{\r\n                    this.drawBorder();\r\n                }\r\n            },\r\n            {\r\n                z: tz,\r\n                draw: (chartArea)=>{\r\n                    this.drawLabels(chartArea);\r\n                }\r\n            }\r\n        ];\r\n    }\r\n getMatchingVisibleMetas(type) {\r\n        const metas = this.chart.getSortedVisibleDatasetMetas();\r\n        const axisID = this.axis + 'AxisID';\r\n        const result = [];\r\n        let i, ilen;\r\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\r\n            const meta = metas[i];\r\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\r\n                result.push(meta);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n _resolveTickFontOptions(index) {\r\n        const opts = this.options.ticks.setContext(this.getContext(index));\r\n        return toFont(opts.font);\r\n    }\r\n _maxDigits() {\r\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\r\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\r\n    }\r\n}\r\n\r\nclass TypedRegistry {\r\n    constructor(type, scope, override){\r\n        this.type = type;\r\n        this.scope = scope;\r\n        this.override = override;\r\n        this.items = Object.create(null);\r\n    }\r\n    isForType(type) {\r\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\r\n    }\r\n register(item) {\r\n        const proto = Object.getPrototypeOf(item);\r\n        let parentScope;\r\n        if (isIChartComponent(proto)) {\r\n            parentScope = this.register(proto);\r\n        }\r\n        const items = this.items;\r\n        const id = item.id;\r\n        const scope = this.scope + '.' + id;\r\n        if (!id) {\r\n            throw new Error('class does not have id: ' + item);\r\n        }\r\n        if (id in items) {\r\n            return scope;\r\n        }\r\n        items[id] = item;\r\n        registerDefaults(item, scope, parentScope);\r\n        if (this.override) {\r\n            defaults.override(item.id, item.overrides);\r\n        }\r\n        return scope;\r\n    }\r\n get(id) {\r\n        return this.items[id];\r\n    }\r\n unregister(item) {\r\n        const items = this.items;\r\n        const id = item.id;\r\n        const scope = this.scope;\r\n        if (id in items) {\r\n            delete items[id];\r\n        }\r\n        if (scope && id in defaults[scope]) {\r\n            delete defaults[scope][id];\r\n            if (this.override) {\r\n                delete overrides[id];\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction registerDefaults(item, scope, parentScope) {\r\n    const itemDefaults = merge(Object.create(null), [\r\n        parentScope ? defaults.get(parentScope) : {},\r\n        defaults.get(scope),\r\n        item.defaults\r\n    ]);\r\n    defaults.set(scope, itemDefaults);\r\n    if (item.defaultRoutes) {\r\n        routeDefaults(scope, item.defaultRoutes);\r\n    }\r\n    if (item.descriptors) {\r\n        defaults.describe(scope, item.descriptors);\r\n    }\r\n}\r\nfunction routeDefaults(scope, routes) {\r\n    Object.keys(routes).forEach((property)=>{\r\n        const propertyParts = property.split('.');\r\n        const sourceName = propertyParts.pop();\r\n        const sourceScope = [\r\n            scope\r\n        ].concat(propertyParts).join('.');\r\n        const parts = routes[property].split('.');\r\n        const targetName = parts.pop();\r\n        const targetScope = parts.join('.');\r\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\r\n    });\r\n}\r\nfunction isIChartComponent(proto) {\r\n    return 'id' in proto && 'defaults' in proto;\r\n}\r\n\r\nclass Registry {\r\n    constructor(){\r\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\r\n        this.elements = new TypedRegistry(Element, 'elements');\r\n        this.plugins = new TypedRegistry(Object, 'plugins');\r\n        this.scales = new TypedRegistry(Scale, 'scales');\r\n        this._typedRegistries = [\r\n            this.controllers,\r\n            this.scales,\r\n            this.elements\r\n        ];\r\n    }\r\n add(...args) {\r\n        this._each('register', args);\r\n    }\r\n    remove(...args) {\r\n        this._each('unregister', args);\r\n    }\r\n addControllers(...args) {\r\n        this._each('register', args, this.controllers);\r\n    }\r\n addElements(...args) {\r\n        this._each('register', args, this.elements);\r\n    }\r\n addPlugins(...args) {\r\n        this._each('register', args, this.plugins);\r\n    }\r\n addScales(...args) {\r\n        this._each('register', args, this.scales);\r\n    }\r\n getController(id) {\r\n        return this._get(id, this.controllers, 'controller');\r\n    }\r\n getElement(id) {\r\n        return this._get(id, this.elements, 'element');\r\n    }\r\n getPlugin(id) {\r\n        return this._get(id, this.plugins, 'plugin');\r\n    }\r\n getScale(id) {\r\n        return this._get(id, this.scales, 'scale');\r\n    }\r\n removeControllers(...args) {\r\n        this._each('unregister', args, this.controllers);\r\n    }\r\n removeElements(...args) {\r\n        this._each('unregister', args, this.elements);\r\n    }\r\n removePlugins(...args) {\r\n        this._each('unregister', args, this.plugins);\r\n    }\r\n removeScales(...args) {\r\n        this._each('unregister', args, this.scales);\r\n    }\r\n _each(method, args, typedRegistry) {\r\n        [\r\n            ...args\r\n        ].forEach((arg)=>{\r\n            const reg = typedRegistry || this._getRegistryForType(arg);\r\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\r\n                this._exec(method, reg, arg);\r\n            } else {\r\n                each(arg, (item)=>{\r\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\r\n                    this._exec(method, itemReg, item);\r\n                });\r\n            }\r\n        });\r\n    }\r\n _exec(method, registry, component) {\r\n        const camelMethod = _capitalize(method);\r\n        callback(component['before' + camelMethod], [], component);\r\n        registry[method](component);\r\n        callback(component['after' + camelMethod], [], component);\r\n    }\r\n _getRegistryForType(type) {\r\n        for(let i = 0; i < this._typedRegistries.length; i++){\r\n            const reg = this._typedRegistries[i];\r\n            if (reg.isForType(type)) {\r\n                return reg;\r\n            }\r\n        }\r\n        return this.plugins;\r\n    }\r\n _get(id, typedRegistry, type) {\r\n        const item = typedRegistry.get(id);\r\n        if (item === undefined) {\r\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\r\n        }\r\n        return item;\r\n    }\r\n}\r\nvar registry = /* #__PURE__ */ new Registry();\r\n\r\nclass PluginService {\r\n    constructor(){\r\n        this._init = [];\r\n    }\r\n notify(chart, hook, args, filter) {\r\n        if (hook === 'beforeInit') {\r\n            this._init = this._createDescriptors(chart, true);\r\n            this._notify(this._init, chart, 'install');\r\n        }\r\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\r\n        const result = this._notify(descriptors, chart, hook, args);\r\n        if (hook === 'afterDestroy') {\r\n            this._notify(descriptors, chart, 'stop');\r\n            this._notify(this._init, chart, 'uninstall');\r\n        }\r\n        return result;\r\n    }\r\n _notify(descriptors, chart, hook, args) {\r\n        args = args || {};\r\n        for (const descriptor of descriptors){\r\n            const plugin = descriptor.plugin;\r\n            const method = plugin[hook];\r\n            const params = [\r\n                chart,\r\n                args,\r\n                descriptor.options\r\n            ];\r\n            if (callback(method, params, plugin) === false && args.cancelable) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    invalidate() {\r\n        if (!isNullOrUndef(this._cache)) {\r\n            this._oldCache = this._cache;\r\n            this._cache = undefined;\r\n        }\r\n    }\r\n _descriptors(chart) {\r\n        if (this._cache) {\r\n            return this._cache;\r\n        }\r\n        const descriptors = this._cache = this._createDescriptors(chart);\r\n        this._notifyStateChanges(chart);\r\n        return descriptors;\r\n    }\r\n    _createDescriptors(chart, all) {\r\n        const config = chart && chart.config;\r\n        const options = valueOrDefault(config.options && config.options.plugins, {});\r\n        const plugins = allPlugins(config);\r\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\r\n    }\r\n _notifyStateChanges(chart) {\r\n        const previousDescriptors = this._oldCache || [];\r\n        const descriptors = this._cache;\r\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\r\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\r\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\r\n    }\r\n}\r\n function allPlugins(config) {\r\n    const localIds = {};\r\n    const plugins = [];\r\n    const keys = Object.keys(registry.plugins.items);\r\n    for(let i = 0; i < keys.length; i++){\r\n        plugins.push(registry.getPlugin(keys[i]));\r\n    }\r\n    const local = config.plugins || [];\r\n    for(let i = 0; i < local.length; i++){\r\n        const plugin = local[i];\r\n        if (plugins.indexOf(plugin) === -1) {\r\n            plugins.push(plugin);\r\n            localIds[plugin.id] = true;\r\n        }\r\n    }\r\n    return {\r\n        plugins,\r\n        localIds\r\n    };\r\n}\r\nfunction getOpts(options, all) {\r\n    if (!all && options === false) {\r\n        return null;\r\n    }\r\n    if (options === true) {\r\n        return {};\r\n    }\r\n    return options;\r\n}\r\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\r\n    const result = [];\r\n    const context = chart.getContext();\r\n    for (const plugin of plugins){\r\n        const id = plugin.id;\r\n        const opts = getOpts(options[id], all);\r\n        if (opts === null) {\r\n            continue;\r\n        }\r\n        result.push({\r\n            plugin,\r\n            options: pluginOpts(chart.config, {\r\n                plugin,\r\n                local: localIds[id]\r\n            }, opts, context)\r\n        });\r\n    }\r\n    return result;\r\n}\r\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\r\n    const keys = config.pluginScopeKeys(plugin);\r\n    const scopes = config.getOptionScopes(opts, keys);\r\n    if (local && plugin.defaults) {\r\n        scopes.push(plugin.defaults);\r\n    }\r\n    return config.createResolver(scopes, context, [\r\n        ''\r\n    ], {\r\n        scriptable: false,\r\n        indexable: false,\r\n        allKeys: true\r\n    });\r\n}\r\n\r\nfunction getIndexAxis(type, options) {\r\n    const datasetDefaults = defaults.datasets[type] || {};\r\n    const datasetOptions = (options.datasets || {})[type] || {};\r\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\r\n}\r\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\r\n    let axis = id;\r\n    if (id === '_index_') {\r\n        axis = indexAxis;\r\n    } else if (id === '_value_') {\r\n        axis = indexAxis === 'x' ? 'y' : 'x';\r\n    }\r\n    return axis;\r\n}\r\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\r\n    return axis === indexAxis ? '_index_' : '_value_';\r\n}\r\nfunction idMatchesAxis(id) {\r\n    if (id === 'x' || id === 'y' || id === 'r') {\r\n        return id;\r\n    }\r\n}\r\nfunction axisFromPosition(position) {\r\n    if (position === 'top' || position === 'bottom') {\r\n        return 'x';\r\n    }\r\n    if (position === 'left' || position === 'right') {\r\n        return 'y';\r\n    }\r\n}\r\nfunction determineAxis(id, ...scaleOptions) {\r\n    if (idMatchesAxis(id)) {\r\n        return id;\r\n    }\r\n    for (const opts of scaleOptions){\r\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\r\n        if (axis) {\r\n            return axis;\r\n        }\r\n    }\r\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\r\n}\r\nfunction getAxisFromDataset(id, axis, dataset) {\r\n    if (dataset[axis + 'AxisID'] === id) {\r\n        return {\r\n            axis\r\n        };\r\n    }\r\n}\r\nfunction retrieveAxisFromDatasets(id, config) {\r\n    if (config.data && config.data.datasets) {\r\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\r\n        if (boundDs.length) {\r\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\r\n        }\r\n    }\r\n    return {};\r\n}\r\nfunction mergeScaleConfig(config, options) {\r\n    const chartDefaults = overrides[config.type] || {\r\n        scales: {}\r\n    };\r\n    const configScales = options.scales || {};\r\n    const chartIndexAxis = getIndexAxis(config.type, options);\r\n    const scales = Object.create(null);\r\n    Object.keys(configScales).forEach((id)=>{\r\n        const scaleConf = configScales[id];\r\n        if (!isObject(scaleConf)) {\r\n            return console.error(`Invalid scale configuration for scale: ${id}`);\r\n        }\r\n        if (scaleConf._proxy) {\r\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\r\n        }\r\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\r\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\r\n        const defaultScaleOptions = chartDefaults.scales || {};\r\n        scales[id] = mergeIf(Object.create(null), [\r\n            {\r\n                axis\r\n            },\r\n            scaleConf,\r\n            defaultScaleOptions[axis],\r\n            defaultScaleOptions[defaultId]\r\n        ]);\r\n    });\r\n    config.data.datasets.forEach((dataset)=>{\r\n        const type = dataset.type || config.type;\r\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\r\n        const datasetDefaults = overrides[type] || {};\r\n        const defaultScaleOptions = datasetDefaults.scales || {};\r\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\r\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\r\n            const id = dataset[axis + 'AxisID'] || axis;\r\n            scales[id] = scales[id] || Object.create(null);\r\n            mergeIf(scales[id], [\r\n                {\r\n                    axis\r\n                },\r\n                configScales[id],\r\n                defaultScaleOptions[defaultID]\r\n            ]);\r\n        });\r\n    });\r\n    Object.keys(scales).forEach((key)=>{\r\n        const scale = scales[key];\r\n        mergeIf(scale, [\r\n            defaults.scales[scale.type],\r\n            defaults.scale\r\n        ]);\r\n    });\r\n    return scales;\r\n}\r\nfunction initOptions(config) {\r\n    const options = config.options || (config.options = {});\r\n    options.plugins = valueOrDefault(options.plugins, {});\r\n    options.scales = mergeScaleConfig(config, options);\r\n}\r\nfunction initData(data) {\r\n    data = data || {};\r\n    data.datasets = data.datasets || [];\r\n    data.labels = data.labels || [];\r\n    return data;\r\n}\r\nfunction initConfig(config) {\r\n    config = config || {};\r\n    config.data = initData(config.data);\r\n    initOptions(config);\r\n    return config;\r\n}\r\nconst keyCache = new Map();\r\nconst keysCached = new Set();\r\nfunction cachedKeys(cacheKey, generate) {\r\n    let keys = keyCache.get(cacheKey);\r\n    if (!keys) {\r\n        keys = generate();\r\n        keyCache.set(cacheKey, keys);\r\n        keysCached.add(keys);\r\n    }\r\n    return keys;\r\n}\r\nconst addIfFound = (set, obj, key)=>{\r\n    const opts = resolveObjectKey(obj, key);\r\n    if (opts !== undefined) {\r\n        set.add(opts);\r\n    }\r\n};\r\nclass Config {\r\n    constructor(config){\r\n        this._config = initConfig(config);\r\n        this._scopeCache = new Map();\r\n        this._resolverCache = new Map();\r\n    }\r\n    get platform() {\r\n        return this._config.platform;\r\n    }\r\n    get type() {\r\n        return this._config.type;\r\n    }\r\n    set type(type) {\r\n        this._config.type = type;\r\n    }\r\n    get data() {\r\n        return this._config.data;\r\n    }\r\n    set data(data) {\r\n        this._config.data = initData(data);\r\n    }\r\n    get options() {\r\n        return this._config.options;\r\n    }\r\n    set options(options) {\r\n        this._config.options = options;\r\n    }\r\n    get plugins() {\r\n        return this._config.plugins;\r\n    }\r\n    update() {\r\n        const config = this._config;\r\n        this.clearCache();\r\n        initOptions(config);\r\n    }\r\n    clearCache() {\r\n        this._scopeCache.clear();\r\n        this._resolverCache.clear();\r\n    }\r\n datasetScopeKeys(datasetType) {\r\n        return cachedKeys(datasetType, ()=>[\r\n                [\r\n                    `datasets.${datasetType}`,\r\n                    ''\r\n                ]\r\n            ]);\r\n    }\r\n datasetAnimationScopeKeys(datasetType, transition) {\r\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\r\n                [\r\n                    `datasets.${datasetType}.transitions.${transition}`,\r\n                    `transitions.${transition}`\r\n                ],\r\n                [\r\n                    `datasets.${datasetType}`,\r\n                    ''\r\n                ]\r\n            ]);\r\n    }\r\n datasetElementScopeKeys(datasetType, elementType) {\r\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\r\n                [\r\n                    `datasets.${datasetType}.elements.${elementType}`,\r\n                    `datasets.${datasetType}`,\r\n                    `elements.${elementType}`,\r\n                    ''\r\n                ]\r\n            ]);\r\n    }\r\n pluginScopeKeys(plugin) {\r\n        const id = plugin.id;\r\n        const type = this.type;\r\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\r\n                [\r\n                    `plugins.${id}`,\r\n                    ...plugin.additionalOptionScopes || []\r\n                ]\r\n            ]);\r\n    }\r\n _cachedScopes(mainScope, resetCache) {\r\n        const _scopeCache = this._scopeCache;\r\n        let cache = _scopeCache.get(mainScope);\r\n        if (!cache || resetCache) {\r\n            cache = new Map();\r\n            _scopeCache.set(mainScope, cache);\r\n        }\r\n        return cache;\r\n    }\r\n getOptionScopes(mainScope, keyLists, resetCache) {\r\n        const { options , type  } = this;\r\n        const cache = this._cachedScopes(mainScope, resetCache);\r\n        const cached = cache.get(keyLists);\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        const scopes = new Set();\r\n        keyLists.forEach((keys)=>{\r\n            if (mainScope) {\r\n                scopes.add(mainScope);\r\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\r\n            }\r\n            keys.forEach((key)=>addIfFound(scopes, options, key));\r\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\r\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\r\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\r\n        });\r\n        const array = Array.from(scopes);\r\n        if (array.length === 0) {\r\n            array.push(Object.create(null));\r\n        }\r\n        if (keysCached.has(keyLists)) {\r\n            cache.set(keyLists, array);\r\n        }\r\n        return array;\r\n    }\r\n chartOptionScopes() {\r\n        const { options , type  } = this;\r\n        return [\r\n            options,\r\n            overrides[type] || {},\r\n            defaults.datasets[type] || {},\r\n            {\r\n                type\r\n            },\r\n            defaults,\r\n            descriptors\r\n        ];\r\n    }\r\n resolveNamedOptions(scopes, names, context, prefixes = [\r\n        ''\r\n    ]) {\r\n        const result = {\r\n            $shared: true\r\n        };\r\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\r\n        let options = resolver;\r\n        if (needContext(resolver, names)) {\r\n            result.$shared = false;\r\n            context = isFunction(context) ? context() : context;\r\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\r\n            options = _attachContext(resolver, context, subResolver);\r\n        }\r\n        for (const prop of names){\r\n            result[prop] = options[prop];\r\n        }\r\n        return result;\r\n    }\r\n createResolver(scopes, context, prefixes = [\r\n        ''\r\n    ], descriptorDefaults) {\r\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\r\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\r\n    }\r\n}\r\nfunction getResolver(resolverCache, scopes, prefixes) {\r\n    let cache = resolverCache.get(scopes);\r\n    if (!cache) {\r\n        cache = new Map();\r\n        resolverCache.set(scopes, cache);\r\n    }\r\n    const cacheKey = prefixes.join();\r\n    let cached = cache.get(cacheKey);\r\n    if (!cached) {\r\n        const resolver = _createResolver(scopes, prefixes);\r\n        cached = {\r\n            resolver,\r\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\r\n        };\r\n        cache.set(cacheKey, cached);\r\n    }\r\n    return cached;\r\n}\r\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\r\nfunction needContext(proxy, names) {\r\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\r\n    for (const prop of names){\r\n        const scriptable = isScriptable(prop);\r\n        const indexable = isIndexable(prop);\r\n        const value = (indexable || scriptable) && proxy[prop];\r\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvar version = \"4.4.1\";\r\n\r\nconst KNOWN_POSITIONS = [\r\n    'top',\r\n    'bottom',\r\n    'left',\r\n    'right',\r\n    'chartArea'\r\n];\r\nfunction positionIsHorizontal(position, axis) {\r\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\r\n}\r\nfunction compare2Level(l1, l2) {\r\n    return function(a, b) {\r\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\r\n    };\r\n}\r\nfunction onAnimationsComplete(context) {\r\n    const chart = context.chart;\r\n    const animationOptions = chart.options.animation;\r\n    chart.notifyPlugins('afterRender');\r\n    callback(animationOptions && animationOptions.onComplete, [\r\n        context\r\n    ], chart);\r\n}\r\nfunction onAnimationProgress(context) {\r\n    const chart = context.chart;\r\n    const animationOptions = chart.options.animation;\r\n    callback(animationOptions && animationOptions.onProgress, [\r\n        context\r\n    ], chart);\r\n}\r\n function getCanvas(item) {\r\n    if (_isDomSupported() && typeof item === 'string') {\r\n        item = document.getElementById(item);\r\n    } else if (item && item.length) {\r\n        item = item[0];\r\n    }\r\n    if (item && item.canvas) {\r\n        item = item.canvas;\r\n    }\r\n    return item;\r\n}\r\nconst instances = {};\r\nconst getChart = (key)=>{\r\n    const canvas = getCanvas(key);\r\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\r\n};\r\nfunction moveNumericKeys(obj, start, move) {\r\n    const keys = Object.keys(obj);\r\n    for (const key of keys){\r\n        const intKey = +key;\r\n        if (intKey >= start) {\r\n            const value = obj[key];\r\n            delete obj[key];\r\n            if (move > 0 || intKey > start) {\r\n                obj[intKey + move] = value;\r\n            }\r\n        }\r\n    }\r\n}\r\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\r\n    if (!inChartArea || e.type === 'mouseout') {\r\n        return null;\r\n    }\r\n    if (isClick) {\r\n        return lastEvent;\r\n    }\r\n    return e;\r\n}\r\nfunction getSizeForArea(scale, chartArea, field) {\r\n    return scale.options.clip ? scale[field] : chartArea[field];\r\n}\r\nfunction getDatasetArea(meta, chartArea) {\r\n    const { xScale , yScale  } = meta;\r\n    if (xScale && yScale) {\r\n        return {\r\n            left: getSizeForArea(xScale, chartArea, 'left'),\r\n            right: getSizeForArea(xScale, chartArea, 'right'),\r\n            top: getSizeForArea(yScale, chartArea, 'top'),\r\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\r\n        };\r\n    }\r\n    return chartArea;\r\n}\r\nclass Chart {\r\n    static defaults = defaults;\r\n    static instances = instances;\r\n    static overrides = overrides;\r\n    static registry = registry;\r\n    static version = version;\r\n    static getChart = getChart;\r\n    static register(...items) {\r\n        registry.add(...items);\r\n        invalidatePlugins();\r\n    }\r\n    static unregister(...items) {\r\n        registry.remove(...items);\r\n        invalidatePlugins();\r\n    }\r\n    constructor(item, userConfig){\r\n        const config = this.config = new Config(userConfig);\r\n        const initialCanvas = getCanvas(item);\r\n        const existingChart = getChart(initialCanvas);\r\n        if (existingChart) {\r\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\r\n        }\r\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\r\n        this.platform.updateConfig(config);\r\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\r\n        const canvas = context && context.canvas;\r\n        const height = canvas && canvas.height;\r\n        const width = canvas && canvas.width;\r\n        this.id = uid();\r\n        this.ctx = context;\r\n        this.canvas = canvas;\r\n        this.width = width;\r\n        this.height = height;\r\n        this._options = options;\r\n        this._aspectRatio = this.aspectRatio;\r\n        this._layers = [];\r\n        this._metasets = [];\r\n        this._stacks = undefined;\r\n        this.boxes = [];\r\n        this.currentDevicePixelRatio = undefined;\r\n        this.chartArea = undefined;\r\n        this._active = [];\r\n        this._lastEvent = undefined;\r\n        this._listeners = {};\r\n         this._responsiveListeners = undefined;\r\n        this._sortedMetasets = [];\r\n        this.scales = {};\r\n        this._plugins = new PluginService();\r\n        this.$proxies = {};\r\n        this._hiddenIndices = {};\r\n        this.attached = false;\r\n        this._animationsDisabled = undefined;\r\n        this.$context = undefined;\r\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\r\n        this._dataChanges = [];\r\n        instances[this.id] = this;\r\n        if (!context || !canvas) {\r\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\r\n            return;\r\n        }\r\n        animator.listen(this, 'complete', onAnimationsComplete);\r\n        animator.listen(this, 'progress', onAnimationProgress);\r\n        this._initialize();\r\n        if (this.attached) {\r\n            this.update();\r\n        }\r\n    }\r\n    get aspectRatio() {\r\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\r\n        if (!isNullOrUndef(aspectRatio)) {\r\n            return aspectRatio;\r\n        }\r\n        if (maintainAspectRatio && _aspectRatio) {\r\n            return _aspectRatio;\r\n        }\r\n        return height ? width / height : null;\r\n    }\r\n    get data() {\r\n        return this.config.data;\r\n    }\r\n    set data(data) {\r\n        this.config.data = data;\r\n    }\r\n    get options() {\r\n        return this._options;\r\n    }\r\n    set options(options) {\r\n        this.config.options = options;\r\n    }\r\n    get registry() {\r\n        return registry;\r\n    }\r\n _initialize() {\r\n        this.notifyPlugins('beforeInit');\r\n        if (this.options.responsive) {\r\n            this.resize();\r\n        } else {\r\n            retinaScale(this, this.options.devicePixelRatio);\r\n        }\r\n        this.bindEvents();\r\n        this.notifyPlugins('afterInit');\r\n        return this;\r\n    }\r\n    clear() {\r\n        clearCanvas(this.canvas, this.ctx);\r\n        return this;\r\n    }\r\n    stop() {\r\n        animator.stop(this);\r\n        return this;\r\n    }\r\n resize(width, height) {\r\n        if (!animator.running(this)) {\r\n            this._resize(width, height);\r\n        } else {\r\n            this._resizeBeforeDraw = {\r\n                width,\r\n                height\r\n            };\r\n        }\r\n    }\r\n    _resize(width, height) {\r\n        const options = this.options;\r\n        const canvas = this.canvas;\r\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\r\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\r\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\r\n        const mode = this.width ? 'resize' : 'attach';\r\n        this.width = newSize.width;\r\n        this.height = newSize.height;\r\n        this._aspectRatio = this.aspectRatio;\r\n        if (!retinaScale(this, newRatio, true)) {\r\n            return;\r\n        }\r\n        this.notifyPlugins('resize', {\r\n            size: newSize\r\n        });\r\n        callback(options.onResize, [\r\n            this,\r\n            newSize\r\n        ], this);\r\n        if (this.attached) {\r\n            if (this._doResize(mode)) {\r\n                this.render();\r\n            }\r\n        }\r\n    }\r\n    ensureScalesHaveIDs() {\r\n        const options = this.options;\r\n        const scalesOptions = options.scales || {};\r\n        each(scalesOptions, (axisOptions, axisID)=>{\r\n            axisOptions.id = axisID;\r\n        });\r\n    }\r\n buildOrUpdateScales() {\r\n        const options = this.options;\r\n        const scaleOpts = options.scales;\r\n        const scales = this.scales;\r\n        const updated = Object.keys(scales).reduce((obj, id)=>{\r\n            obj[id] = false;\r\n            return obj;\r\n        }, {});\r\n        let items = [];\r\n        if (scaleOpts) {\r\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\r\n                const scaleOptions = scaleOpts[id];\r\n                const axis = determineAxis(id, scaleOptions);\r\n                const isRadial = axis === 'r';\r\n                const isHorizontal = axis === 'x';\r\n                return {\r\n                    options: scaleOptions,\r\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\r\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\r\n                };\r\n            }));\r\n        }\r\n        each(items, (item)=>{\r\n            const scaleOptions = item.options;\r\n            const id = scaleOptions.id;\r\n            const axis = determineAxis(id, scaleOptions);\r\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\r\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\r\n                scaleOptions.position = item.dposition;\r\n            }\r\n            updated[id] = true;\r\n            let scale = null;\r\n            if (id in scales && scales[id].type === scaleType) {\r\n                scale = scales[id];\r\n            } else {\r\n                const scaleClass = registry.getScale(scaleType);\r\n                scale = new scaleClass({\r\n                    id,\r\n                    type: scaleType,\r\n                    ctx: this.ctx,\r\n                    chart: this\r\n                });\r\n                scales[scale.id] = scale;\r\n            }\r\n            scale.init(scaleOptions, options);\r\n        });\r\n        each(updated, (hasUpdated, id)=>{\r\n            if (!hasUpdated) {\r\n                delete scales[id];\r\n            }\r\n        });\r\n        each(scales, (scale)=>{\r\n            layouts.configure(this, scale, scale.options);\r\n            layouts.addBox(this, scale);\r\n        });\r\n    }\r\n _updateMetasets() {\r\n        const metasets = this._metasets;\r\n        const numData = this.data.datasets.length;\r\n        const numMeta = metasets.length;\r\n        metasets.sort((a, b)=>a.index - b.index);\r\n        if (numMeta > numData) {\r\n            for(let i = numData; i < numMeta; ++i){\r\n                this._destroyDatasetMeta(i);\r\n            }\r\n            metasets.splice(numData, numMeta - numData);\r\n        }\r\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\r\n    }\r\n _removeUnreferencedMetasets() {\r\n        const { _metasets: metasets , data: { datasets  }  } = this;\r\n        if (metasets.length > datasets.length) {\r\n            delete this._stacks;\r\n        }\r\n        metasets.forEach((meta, index)=>{\r\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\r\n                this._destroyDatasetMeta(index);\r\n            }\r\n        });\r\n    }\r\n    buildOrUpdateControllers() {\r\n        const newControllers = [];\r\n        const datasets = this.data.datasets;\r\n        let i, ilen;\r\n        this._removeUnreferencedMetasets();\r\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\r\n            const dataset = datasets[i];\r\n            let meta = this.getDatasetMeta(i);\r\n            const type = dataset.type || this.config.type;\r\n            if (meta.type && meta.type !== type) {\r\n                this._destroyDatasetMeta(i);\r\n                meta = this.getDatasetMeta(i);\r\n            }\r\n            meta.type = type;\r\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\r\n            meta.order = dataset.order || 0;\r\n            meta.index = i;\r\n            meta.label = '' + dataset.label;\r\n            meta.visible = this.isDatasetVisible(i);\r\n            if (meta.controller) {\r\n                meta.controller.updateIndex(i);\r\n                meta.controller.linkScales();\r\n            } else {\r\n                const ControllerClass = registry.getController(type);\r\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\r\n                Object.assign(ControllerClass, {\r\n                    dataElementType: registry.getElement(dataElementType),\r\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\r\n                });\r\n                meta.controller = new ControllerClass(this, i);\r\n                newControllers.push(meta.controller);\r\n            }\r\n        }\r\n        this._updateMetasets();\r\n        return newControllers;\r\n    }\r\n _resetElements() {\r\n        each(this.data.datasets, (dataset, datasetIndex)=>{\r\n            this.getDatasetMeta(datasetIndex).controller.reset();\r\n        }, this);\r\n    }\r\n reset() {\r\n        this._resetElements();\r\n        this.notifyPlugins('reset');\r\n    }\r\n    update(mode) {\r\n        const config = this.config;\r\n        config.update();\r\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\r\n        const animsDisabled = this._animationsDisabled = !options.animation;\r\n        this._updateScales();\r\n        this._checkEventBindings();\r\n        this._updateHiddenIndices();\r\n        this._plugins.invalidate();\r\n        if (this.notifyPlugins('beforeUpdate', {\r\n            mode,\r\n            cancelable: true\r\n        }) === false) {\r\n            return;\r\n        }\r\n        const newControllers = this.buildOrUpdateControllers();\r\n        this.notifyPlugins('beforeElementsUpdate');\r\n        let minPadding = 0;\r\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\r\n            const { controller  } = this.getDatasetMeta(i);\r\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\r\n            controller.buildOrUpdateElements(reset);\r\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\r\n        }\r\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\r\n        this._updateLayout(minPadding);\r\n        if (!animsDisabled) {\r\n            each(newControllers, (controller)=>{\r\n                controller.reset();\r\n            });\r\n        }\r\n        this._updateDatasets(mode);\r\n        this.notifyPlugins('afterUpdate', {\r\n            mode\r\n        });\r\n        this._layers.sort(compare2Level('z', '_idx'));\r\n        const { _active , _lastEvent  } = this;\r\n        if (_lastEvent) {\r\n            this._eventHandler(_lastEvent, true);\r\n        } else if (_active.length) {\r\n            this._updateHoverStyles(_active, _active, true);\r\n        }\r\n        this.render();\r\n    }\r\n _updateScales() {\r\n        each(this.scales, (scale)=>{\r\n            layouts.removeBox(this, scale);\r\n        });\r\n        this.ensureScalesHaveIDs();\r\n        this.buildOrUpdateScales();\r\n    }\r\n _checkEventBindings() {\r\n        const options = this.options;\r\n        const existingEvents = new Set(Object.keys(this._listeners));\r\n        const newEvents = new Set(options.events);\r\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\r\n            this.unbindEvents();\r\n            this.bindEvents();\r\n        }\r\n    }\r\n _updateHiddenIndices() {\r\n        const { _hiddenIndices  } = this;\r\n        const changes = this._getUniformDataChanges() || [];\r\n        for (const { method , start , count  } of changes){\r\n            const move = method === '_removeElements' ? -count : count;\r\n            moveNumericKeys(_hiddenIndices, start, move);\r\n        }\r\n    }\r\n _getUniformDataChanges() {\r\n        const _dataChanges = this._dataChanges;\r\n        if (!_dataChanges || !_dataChanges.length) {\r\n            return;\r\n        }\r\n        this._dataChanges = [];\r\n        const datasetCount = this.data.datasets.length;\r\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\r\n        const changeSet = makeSet(0);\r\n        for(let i = 1; i < datasetCount; i++){\r\n            if (!setsEqual(changeSet, makeSet(i))) {\r\n                return;\r\n            }\r\n        }\r\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\r\n                method: a[1],\r\n                start: +a[2],\r\n                count: +a[3]\r\n            }));\r\n    }\r\n _updateLayout(minPadding) {\r\n        if (this.notifyPlugins('beforeLayout', {\r\n            cancelable: true\r\n        }) === false) {\r\n            return;\r\n        }\r\n        layouts.update(this, this.width, this.height, minPadding);\r\n        const area = this.chartArea;\r\n        const noArea = area.width <= 0 || area.height <= 0;\r\n        this._layers = [];\r\n        each(this.boxes, (box)=>{\r\n            if (noArea && box.position === 'chartArea') {\r\n                return;\r\n            }\r\n            if (box.configure) {\r\n                box.configure();\r\n            }\r\n            this._layers.push(...box._layers());\r\n        }, this);\r\n        this._layers.forEach((item, index)=>{\r\n            item._idx = index;\r\n        });\r\n        this.notifyPlugins('afterLayout');\r\n    }\r\n _updateDatasets(mode) {\r\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\r\n            mode,\r\n            cancelable: true\r\n        }) === false) {\r\n            return;\r\n        }\r\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\r\n            this.getDatasetMeta(i).controller.configure();\r\n        }\r\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\r\n            this._updateDataset(i, isFunction(mode) ? mode({\r\n                datasetIndex: i\r\n            }) : mode);\r\n        }\r\n        this.notifyPlugins('afterDatasetsUpdate', {\r\n            mode\r\n        });\r\n    }\r\n _updateDataset(index, mode) {\r\n        const meta = this.getDatasetMeta(index);\r\n        const args = {\r\n            meta,\r\n            index,\r\n            mode,\r\n            cancelable: true\r\n        };\r\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\r\n            return;\r\n        }\r\n        meta.controller._update(mode);\r\n        args.cancelable = false;\r\n        this.notifyPlugins('afterDatasetUpdate', args);\r\n    }\r\n    render() {\r\n        if (this.notifyPlugins('beforeRender', {\r\n            cancelable: true\r\n        }) === false) {\r\n            return;\r\n        }\r\n        if (animator.has(this)) {\r\n            if (this.attached && !animator.running(this)) {\r\n                animator.start(this);\r\n            }\r\n        } else {\r\n            this.draw();\r\n            onAnimationsComplete({\r\n                chart: this\r\n            });\r\n        }\r\n    }\r\n    draw() {\r\n        let i;\r\n        if (this._resizeBeforeDraw) {\r\n            const { width , height  } = this._resizeBeforeDraw;\r\n            this._resize(width, height);\r\n            this._resizeBeforeDraw = null;\r\n        }\r\n        this.clear();\r\n        if (this.width <= 0 || this.height <= 0) {\r\n            return;\r\n        }\r\n        if (this.notifyPlugins('beforeDraw', {\r\n            cancelable: true\r\n        }) === false) {\r\n            return;\r\n        }\r\n        const layers = this._layers;\r\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\r\n            layers[i].draw(this.chartArea);\r\n        }\r\n        this._drawDatasets();\r\n        for(; i < layers.length; ++i){\r\n            layers[i].draw(this.chartArea);\r\n        }\r\n        this.notifyPlugins('afterDraw');\r\n    }\r\n _getSortedDatasetMetas(filterVisible) {\r\n        const metasets = this._sortedMetasets;\r\n        const result = [];\r\n        let i, ilen;\r\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\r\n            const meta = metasets[i];\r\n            if (!filterVisible || meta.visible) {\r\n                result.push(meta);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n getSortedVisibleDatasetMetas() {\r\n        return this._getSortedDatasetMetas(true);\r\n    }\r\n _drawDatasets() {\r\n        if (this.notifyPlugins('beforeDatasetsDraw', {\r\n            cancelable: true\r\n        }) === false) {\r\n            return;\r\n        }\r\n        const metasets = this.getSortedVisibleDatasetMetas();\r\n        for(let i = metasets.length - 1; i >= 0; --i){\r\n            this._drawDataset(metasets[i]);\r\n        }\r\n        this.notifyPlugins('afterDatasetsDraw');\r\n    }\r\n _drawDataset(meta) {\r\n        const ctx = this.ctx;\r\n        const clip = meta._clip;\r\n        const useClip = !clip.disabled;\r\n        const area = getDatasetArea(meta, this.chartArea);\r\n        const args = {\r\n            meta,\r\n            index: meta.index,\r\n            cancelable: true\r\n        };\r\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\r\n            return;\r\n        }\r\n        if (useClip) {\r\n            clipArea(ctx, {\r\n                left: clip.left === false ? 0 : area.left - clip.left,\r\n                right: clip.right === false ? this.width : area.right + clip.right,\r\n                top: clip.top === false ? 0 : area.top - clip.top,\r\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\r\n            });\r\n        }\r\n        meta.controller.draw();\r\n        if (useClip) {\r\n            unclipArea(ctx);\r\n        }\r\n        args.cancelable = false;\r\n        this.notifyPlugins('afterDatasetDraw', args);\r\n    }\r\n isPointInArea(point) {\r\n        return _isPointInArea(point, this.chartArea, this._minPadding);\r\n    }\r\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\r\n        const method = Interaction.modes[mode];\r\n        if (typeof method === 'function') {\r\n            return method(this, e, options, useFinalPosition);\r\n        }\r\n        return [];\r\n    }\r\n    getDatasetMeta(datasetIndex) {\r\n        const dataset = this.data.datasets[datasetIndex];\r\n        const metasets = this._metasets;\r\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\r\n        if (!meta) {\r\n            meta = {\r\n                type: null,\r\n                data: [],\r\n                dataset: null,\r\n                controller: null,\r\n                hidden: null,\r\n                xAxisID: null,\r\n                yAxisID: null,\r\n                order: dataset && dataset.order || 0,\r\n                index: datasetIndex,\r\n                _dataset: dataset,\r\n                _parsed: [],\r\n                _sorted: false\r\n            };\r\n            metasets.push(meta);\r\n        }\r\n        return meta;\r\n    }\r\n    getContext() {\r\n        return this.$context || (this.$context = createContext(null, {\r\n            chart: this,\r\n            type: 'chart'\r\n        }));\r\n    }\r\n    getVisibleDatasetCount() {\r\n        return this.getSortedVisibleDatasetMetas().length;\r\n    }\r\n    isDatasetVisible(datasetIndex) {\r\n        const dataset = this.data.datasets[datasetIndex];\r\n        if (!dataset) {\r\n            return false;\r\n        }\r\n        const meta = this.getDatasetMeta(datasetIndex);\r\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\r\n    }\r\n    setDatasetVisibility(datasetIndex, visible) {\r\n        const meta = this.getDatasetMeta(datasetIndex);\r\n        meta.hidden = !visible;\r\n    }\r\n    toggleDataVisibility(index) {\r\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\r\n    }\r\n    getDataVisibility(index) {\r\n        return !this._hiddenIndices[index];\r\n    }\r\n _updateVisibility(datasetIndex, dataIndex, visible) {\r\n        const mode = visible ? 'show' : 'hide';\r\n        const meta = this.getDatasetMeta(datasetIndex);\r\n        const anims = meta.controller._resolveAnimations(undefined, mode);\r\n        if (defined(dataIndex)) {\r\n            meta.data[dataIndex].hidden = !visible;\r\n            this.update();\r\n        } else {\r\n            this.setDatasetVisibility(datasetIndex, visible);\r\n            anims.update(meta, {\r\n                visible\r\n            });\r\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\r\n        }\r\n    }\r\n    hide(datasetIndex, dataIndex) {\r\n        this._updateVisibility(datasetIndex, dataIndex, false);\r\n    }\r\n    show(datasetIndex, dataIndex) {\r\n        this._updateVisibility(datasetIndex, dataIndex, true);\r\n    }\r\n _destroyDatasetMeta(datasetIndex) {\r\n        const meta = this._metasets[datasetIndex];\r\n        if (meta && meta.controller) {\r\n            meta.controller._destroy();\r\n        }\r\n        delete this._metasets[datasetIndex];\r\n    }\r\n    _stop() {\r\n        let i, ilen;\r\n        this.stop();\r\n        animator.remove(this);\r\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\r\n            this._destroyDatasetMeta(i);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.notifyPlugins('beforeDestroy');\r\n        const { canvas , ctx  } = this;\r\n        this._stop();\r\n        this.config.clearCache();\r\n        if (canvas) {\r\n            this.unbindEvents();\r\n            clearCanvas(canvas, ctx);\r\n            this.platform.releaseContext(ctx);\r\n            this.canvas = null;\r\n            this.ctx = null;\r\n        }\r\n        delete instances[this.id];\r\n        this.notifyPlugins('afterDestroy');\r\n    }\r\n    toBase64Image(...args) {\r\n        return this.canvas.toDataURL(...args);\r\n    }\r\n bindEvents() {\r\n        this.bindUserEvents();\r\n        if (this.options.responsive) {\r\n            this.bindResponsiveEvents();\r\n        } else {\r\n            this.attached = true;\r\n        }\r\n    }\r\n bindUserEvents() {\r\n        const listeners = this._listeners;\r\n        const platform = this.platform;\r\n        const _add = (type, listener)=>{\r\n            platform.addEventListener(this, type, listener);\r\n            listeners[type] = listener;\r\n        };\r\n        const listener = (e, x, y)=>{\r\n            e.offsetX = x;\r\n            e.offsetY = y;\r\n            this._eventHandler(e);\r\n        };\r\n        each(this.options.events, (type)=>_add(type, listener));\r\n    }\r\n bindResponsiveEvents() {\r\n        if (!this._responsiveListeners) {\r\n            this._responsiveListeners = {};\r\n        }\r\n        const listeners = this._responsiveListeners;\r\n        const platform = this.platform;\r\n        const _add = (type, listener)=>{\r\n            platform.addEventListener(this, type, listener);\r\n            listeners[type] = listener;\r\n        };\r\n        const _remove = (type, listener)=>{\r\n            if (listeners[type]) {\r\n                platform.removeEventListener(this, type, listener);\r\n                delete listeners[type];\r\n            }\r\n        };\r\n        const listener = (width, height)=>{\r\n            if (this.canvas) {\r\n                this.resize(width, height);\r\n            }\r\n        };\r\n        let detached;\r\n        const attached = ()=>{\r\n            _remove('attach', attached);\r\n            this.attached = true;\r\n            this.resize();\r\n            _add('resize', listener);\r\n            _add('detach', detached);\r\n        };\r\n        detached = ()=>{\r\n            this.attached = false;\r\n            _remove('resize', listener);\r\n            this._stop();\r\n            this._resize(0, 0);\r\n            _add('attach', attached);\r\n        };\r\n        if (platform.isAttached(this.canvas)) {\r\n            attached();\r\n        } else {\r\n            detached();\r\n        }\r\n    }\r\n unbindEvents() {\r\n        each(this._listeners, (listener, type)=>{\r\n            this.platform.removeEventListener(this, type, listener);\r\n        });\r\n        this._listeners = {};\r\n        each(this._responsiveListeners, (listener, type)=>{\r\n            this.platform.removeEventListener(this, type, listener);\r\n        });\r\n        this._responsiveListeners = undefined;\r\n    }\r\n    updateHoverStyle(items, mode, enabled) {\r\n        const prefix = enabled ? 'set' : 'remove';\r\n        let meta, item, i, ilen;\r\n        if (mode === 'dataset') {\r\n            meta = this.getDatasetMeta(items[0].datasetIndex);\r\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\r\n        }\r\n        for(i = 0, ilen = items.length; i < ilen; ++i){\r\n            item = items[i];\r\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\r\n            if (controller) {\r\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\r\n            }\r\n        }\r\n    }\r\n getActiveElements() {\r\n        return this._active || [];\r\n    }\r\n setActiveElements(activeElements) {\r\n        const lastActive = this._active || [];\r\n        const active = activeElements.map(({ datasetIndex , index  })=>{\r\n            const meta = this.getDatasetMeta(datasetIndex);\r\n            if (!meta) {\r\n                throw new Error('No dataset found at index ' + datasetIndex);\r\n            }\r\n            return {\r\n                datasetIndex,\r\n                element: meta.data[index],\r\n                index\r\n            };\r\n        });\r\n        const changed = !_elementsEqual(active, lastActive);\r\n        if (changed) {\r\n            this._active = active;\r\n            this._lastEvent = null;\r\n            this._updateHoverStyles(active, lastActive);\r\n        }\r\n    }\r\n notifyPlugins(hook, args, filter) {\r\n        return this._plugins.notify(this, hook, args, filter);\r\n    }\r\n isPluginEnabled(pluginId) {\r\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\r\n    }\r\n _updateHoverStyles(active, lastActive, replay) {\r\n        const hoverOptions = this.options.hover;\r\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\r\n        const deactivated = diff(lastActive, active);\r\n        const activated = replay ? active : diff(active, lastActive);\r\n        if (deactivated.length) {\r\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\r\n        }\r\n        if (activated.length && hoverOptions.mode) {\r\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\r\n        }\r\n    }\r\n _eventHandler(e, replay) {\r\n        const args = {\r\n            event: e,\r\n            replay,\r\n            cancelable: true,\r\n            inChartArea: this.isPointInArea(e)\r\n        };\r\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\r\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\r\n            return;\r\n        }\r\n        const changed = this._handleEvent(e, replay, args.inChartArea);\r\n        args.cancelable = false;\r\n        this.notifyPlugins('afterEvent', args, eventFilter);\r\n        if (changed || args.changed) {\r\n            this.render();\r\n        }\r\n        return this;\r\n    }\r\n _handleEvent(e, replay, inChartArea) {\r\n        const { _active: lastActive = [] , options  } = this;\r\n        const useFinalPosition = replay;\r\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\r\n        const isClick = _isClickEvent(e);\r\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\r\n        if (inChartArea) {\r\n            this._lastEvent = null;\r\n            callback(options.onHover, [\r\n                e,\r\n                active,\r\n                this\r\n            ], this);\r\n            if (isClick) {\r\n                callback(options.onClick, [\r\n                    e,\r\n                    active,\r\n                    this\r\n                ], this);\r\n            }\r\n        }\r\n        const changed = !_elementsEqual(active, lastActive);\r\n        if (changed || replay) {\r\n            this._active = active;\r\n            this._updateHoverStyles(active, lastActive, replay);\r\n        }\r\n        this._lastEvent = lastEvent;\r\n        return changed;\r\n    }\r\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\r\n        if (e.type === 'mouseout') {\r\n            return [];\r\n        }\r\n        if (!inChartArea) {\r\n            return lastActive;\r\n        }\r\n        const hoverOptions = this.options.hover;\r\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\r\n    }\r\n}\r\nfunction invalidatePlugins() {\r\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\r\n}\r\n\r\nfunction clipArc(ctx, element, endAngle) {\r\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\r\n    let angleMargin = pixelMargin / outerRadius;\r\n    // Draw an inner border by clipping the arc and drawing a double-width border\r\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\r\n    if (innerRadius > pixelMargin) {\r\n        angleMargin = pixelMargin / innerRadius;\r\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\r\n    } else {\r\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\r\n    }\r\n    ctx.closePath();\r\n    ctx.clip();\r\n}\r\nfunction toRadiusCorners(value) {\r\n    return _readValueToProps(value, [\r\n        'outerStart',\r\n        'outerEnd',\r\n        'innerStart',\r\n        'innerEnd'\r\n    ]);\r\n}\r\n/**\r\n * Parse border radius from the provided options\r\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\r\n    const o = toRadiusCorners(arc.options.borderRadius);\r\n    const halfThickness = (outerRadius - innerRadius) / 2;\r\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\r\n    // Outer limits are complicated. We want to compute the available angular distance at\r\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\r\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\r\n    //\r\n    // If the borderRadius is large, that value can become negative.\r\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\r\n    // we know that the thickness term will dominate and compute the limits at that point\r\n    const computeOuterLimit = (val)=>{\r\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\r\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\r\n    };\r\n    return {\r\n        outerStart: computeOuterLimit(o.outerStart),\r\n        outerEnd: computeOuterLimit(o.outerEnd),\r\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\r\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\r\n    };\r\n}\r\n/**\r\n * Convert (r, 𝜃) to (x, y)\r\n */ function rThetaToXY(r, theta, x, y) {\r\n    return {\r\n        x: x + r * Math.cos(theta),\r\n        y: y + r * Math.sin(theta)\r\n    };\r\n}\r\n/**\r\n * Path the arc, respecting border radius by separating into left and right halves.\r\n *\r\n *   Start      End\r\n *\r\n *    1--->a--->2    Outer\r\n *   /           \\\r\n *   8           3\r\n *   |           |\r\n *   |           |\r\n *   7           4\r\n *   \\           /\r\n *    6<---b<---5    Inner\r\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\r\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\r\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\r\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\r\n    let spacingOffset = 0;\r\n    const alpha = end - start;\r\n    if (spacing) {\r\n        // When spacing is present, it is the same for all items\r\n        // So we adjust the start and end angle of the arc such that\r\n        // the distance is the same as it would be without the spacing\r\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\r\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\r\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\r\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\r\n        spacingOffset = (alpha - adjustedAngle) / 2;\r\n    }\r\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\r\n    const angleOffset = (alpha - beta) / 2;\r\n    const startAngle = start + angleOffset + spacingOffset;\r\n    const endAngle = end - angleOffset - spacingOffset;\r\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\r\n    const outerStartAdjustedRadius = outerRadius - outerStart;\r\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\r\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\r\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\r\n    const innerStartAdjustedRadius = innerRadius + innerStart;\r\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\r\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\r\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\r\n    ctx.beginPath();\r\n    if (circular) {\r\n        // The first arc segments from point 1 to point a to point 2\r\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\r\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\r\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\r\n        // The corner segment from point 2 to point 3\r\n        if (outerEnd > 0) {\r\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\r\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\r\n        }\r\n        // The line from point 3 to point 4\r\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\r\n        ctx.lineTo(p4.x, p4.y);\r\n        // The corner segment from point 4 to point 5\r\n        if (innerEnd > 0) {\r\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\r\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\r\n        }\r\n        // The inner arc from point 5 to point b to point 6\r\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\r\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\r\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\r\n        // The corner segment from point 6 to point 7\r\n        if (innerStart > 0) {\r\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\r\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\r\n        }\r\n        // The line from point 7 to point 8\r\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\r\n        ctx.lineTo(p8.x, p8.y);\r\n        // The corner segment from point 8 to point 1\r\n        if (outerStart > 0) {\r\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\r\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\r\n        }\r\n    } else {\r\n        ctx.moveTo(x, y);\r\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\r\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\r\n        ctx.lineTo(outerStartX, outerStartY);\r\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\r\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\r\n        ctx.lineTo(outerEndX, outerEndY);\r\n    }\r\n    ctx.closePath();\r\n}\r\nfunction drawArc(ctx, element, offset, spacing, circular) {\r\n    const { fullCircles , startAngle , circumference  } = element;\r\n    let endAngle = element.endAngle;\r\n    if (fullCircles) {\r\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n        for(let i = 0; i < fullCircles; ++i){\r\n            ctx.fill();\r\n        }\r\n        if (!isNaN(circumference)) {\r\n            endAngle = startAngle + (circumference % TAU || TAU);\r\n        }\r\n    }\r\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n    ctx.fill();\r\n    return endAngle;\r\n}\r\nfunction drawBorder(ctx, element, offset, spacing, circular) {\r\n    const { fullCircles , startAngle , circumference , options  } = element;\r\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\r\n    const inner = options.borderAlign === 'inner';\r\n    if (!borderWidth) {\r\n        return;\r\n    }\r\n    ctx.setLineDash(borderDash || []);\r\n    ctx.lineDashOffset = borderDashOffset;\r\n    if (inner) {\r\n        ctx.lineWidth = borderWidth * 2;\r\n        ctx.lineJoin = borderJoinStyle || 'round';\r\n    } else {\r\n        ctx.lineWidth = borderWidth;\r\n        ctx.lineJoin = borderJoinStyle || 'bevel';\r\n    }\r\n    let endAngle = element.endAngle;\r\n    if (fullCircles) {\r\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n        for(let i = 0; i < fullCircles; ++i){\r\n            ctx.stroke();\r\n        }\r\n        if (!isNaN(circumference)) {\r\n            endAngle = startAngle + (circumference % TAU || TAU);\r\n        }\r\n    }\r\n    if (inner) {\r\n        clipArc(ctx, element, endAngle);\r\n    }\r\n    if (!fullCircles) {\r\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\r\n        ctx.stroke();\r\n    }\r\n}\r\nclass ArcElement extends Element {\r\n    static id = 'arc';\r\n    static defaults = {\r\n        borderAlign: 'center',\r\n        borderColor: '#fff',\r\n        borderDash: [],\r\n        borderDashOffset: 0,\r\n        borderJoinStyle: undefined,\r\n        borderRadius: 0,\r\n        borderWidth: 2,\r\n        offset: 0,\r\n        spacing: 0,\r\n        angle: undefined,\r\n        circular: true\r\n    };\r\n    static defaultRoutes = {\r\n        backgroundColor: 'backgroundColor'\r\n    };\r\n    static descriptors = {\r\n        _scriptable: true,\r\n        _indexable: (name)=>name !== 'borderDash'\r\n    };\r\n    circumference;\r\n    endAngle;\r\n    fullCircles;\r\n    innerRadius;\r\n    outerRadius;\r\n    pixelMargin;\r\n    startAngle;\r\n    constructor(cfg){\r\n        super();\r\n        this.options = undefined;\r\n        this.circumference = undefined;\r\n        this.startAngle = undefined;\r\n        this.endAngle = undefined;\r\n        this.innerRadius = undefined;\r\n        this.outerRadius = undefined;\r\n        this.pixelMargin = 0;\r\n        this.fullCircles = 0;\r\n        if (cfg) {\r\n            Object.assign(this, cfg);\r\n        }\r\n    }\r\n    inRange(chartX, chartY, useFinalPosition) {\r\n        const point = this.getProps([\r\n            'x',\r\n            'y'\r\n        ], useFinalPosition);\r\n        const { angle , distance  } = getAngleFromPoint(point, {\r\n            x: chartX,\r\n            y: chartY\r\n        });\r\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\r\n            'startAngle',\r\n            'endAngle',\r\n            'innerRadius',\r\n            'outerRadius',\r\n            'circumference'\r\n        ], useFinalPosition);\r\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\r\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\r\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\r\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\r\n        return betweenAngles && withinRadius;\r\n    }\r\n    getCenterPoint(useFinalPosition) {\r\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\r\n            'x',\r\n            'y',\r\n            'startAngle',\r\n            'endAngle',\r\n            'innerRadius',\r\n            'outerRadius'\r\n        ], useFinalPosition);\r\n        const { offset , spacing  } = this.options;\r\n        const halfAngle = (startAngle + endAngle) / 2;\r\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\r\n        return {\r\n            x: x + Math.cos(halfAngle) * halfRadius,\r\n            y: y + Math.sin(halfAngle) * halfRadius\r\n        };\r\n    }\r\n    tooltipPosition(useFinalPosition) {\r\n        return this.getCenterPoint(useFinalPosition);\r\n    }\r\n    draw(ctx) {\r\n        const { options , circumference  } = this;\r\n        const offset = (options.offset || 0) / 4;\r\n        const spacing = (options.spacing || 0) / 2;\r\n        const circular = options.circular;\r\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\r\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\r\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\r\n            return;\r\n        }\r\n        ctx.save();\r\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\r\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\r\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\r\n        const radiusOffset = offset * fix;\r\n        ctx.fillStyle = options.backgroundColor;\r\n        ctx.strokeStyle = options.borderColor;\r\n        drawArc(ctx, this, radiusOffset, spacing, circular);\r\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\r\n        ctx.restore();\r\n    }\r\n}\r\n\r\nfunction setStyle(ctx, options, style = options) {\r\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\r\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\r\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\r\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\r\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\r\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\r\n}\r\nfunction lineTo(ctx, previous, target) {\r\n    ctx.lineTo(target.x, target.y);\r\n}\r\n function getLineMethod(options) {\r\n    if (options.stepped) {\r\n        return _steppedLineTo;\r\n    }\r\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n        return _bezierCurveTo;\r\n    }\r\n    return lineTo;\r\n}\r\nfunction pathVars(points, segment, params = {}) {\r\n    const count = points.length;\r\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\r\n    const { start: segmentStart , end: segmentEnd  } = segment;\r\n    const start = Math.max(paramsStart, segmentStart);\r\n    const end = Math.min(paramsEnd, segmentEnd);\r\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\r\n    return {\r\n        count,\r\n        start,\r\n        loop: segment.loop,\r\n        ilen: end < start && !outside ? count + end - start : end - start\r\n    };\r\n}\r\n function pathSegment(ctx, line, segment, params) {\r\n    const { points , options  } = line;\r\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\r\n    const lineMethod = getLineMethod(options);\r\n    let { move =true , reverse  } = params || {};\r\n    let i, point, prev;\r\n    for(i = 0; i <= ilen; ++i){\r\n        point = points[(start + (reverse ? ilen - i : i)) % count];\r\n        if (point.skip) {\r\n            continue;\r\n        } else if (move) {\r\n            ctx.moveTo(point.x, point.y);\r\n            move = false;\r\n        } else {\r\n            lineMethod(ctx, prev, point, reverse, options.stepped);\r\n        }\r\n        prev = point;\r\n    }\r\n    if (loop) {\r\n        point = points[(start + (reverse ? ilen : 0)) % count];\r\n        lineMethod(ctx, prev, point, reverse, options.stepped);\r\n    }\r\n    return !!loop;\r\n}\r\n function fastPathSegment(ctx, line, segment, params) {\r\n    const points = line.points;\r\n    const { count , start , ilen  } = pathVars(points, segment, params);\r\n    const { move =true , reverse  } = params || {};\r\n    let avgX = 0;\r\n    let countX = 0;\r\n    let i, point, prevX, minY, maxY, lastY;\r\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\r\n    const drawX = ()=>{\r\n        if (minY !== maxY) {\r\n            ctx.lineTo(avgX, maxY);\r\n            ctx.lineTo(avgX, minY);\r\n            ctx.lineTo(avgX, lastY);\r\n        }\r\n    };\r\n    if (move) {\r\n        point = points[pointIndex(0)];\r\n        ctx.moveTo(point.x, point.y);\r\n    }\r\n    for(i = 0; i <= ilen; ++i){\r\n        point = points[pointIndex(i)];\r\n        if (point.skip) {\r\n            continue;\r\n        }\r\n        const x = point.x;\r\n        const y = point.y;\r\n        const truncX = x | 0;\r\n        if (truncX === prevX) {\r\n            if (y < minY) {\r\n                minY = y;\r\n            } else if (y > maxY) {\r\n                maxY = y;\r\n            }\r\n            avgX = (countX * avgX + x) / ++countX;\r\n        } else {\r\n            drawX();\r\n            ctx.lineTo(x, y);\r\n            prevX = truncX;\r\n            countX = 0;\r\n            minY = maxY = y;\r\n        }\r\n        lastY = y;\r\n    }\r\n    drawX();\r\n}\r\n function _getSegmentMethod(line) {\r\n    const opts = line.options;\r\n    const borderDash = opts.borderDash && opts.borderDash.length;\r\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\r\n    return useFastPath ? fastPathSegment : pathSegment;\r\n}\r\n function _getInterpolationMethod(options) {\r\n    if (options.stepped) {\r\n        return _steppedInterpolation;\r\n    }\r\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\r\n        return _bezierInterpolation;\r\n    }\r\n    return _pointInLine;\r\n}\r\nfunction strokePathWithCache(ctx, line, start, count) {\r\n    let path = line._path;\r\n    if (!path) {\r\n        path = line._path = new Path2D();\r\n        if (line.path(path, start, count)) {\r\n            path.closePath();\r\n        }\r\n    }\r\n    setStyle(ctx, line.options);\r\n    ctx.stroke(path);\r\n}\r\nfunction strokePathDirect(ctx, line, start, count) {\r\n    const { segments , options  } = line;\r\n    const segmentMethod = _getSegmentMethod(line);\r\n    for (const segment of segments){\r\n        setStyle(ctx, options, segment.style);\r\n        ctx.beginPath();\r\n        if (segmentMethod(ctx, line, segment, {\r\n            start,\r\n            end: start + count - 1\r\n        })) {\r\n            ctx.closePath();\r\n        }\r\n        ctx.stroke();\r\n    }\r\n}\r\nconst usePath2D = typeof Path2D === 'function';\r\nfunction draw(ctx, line, start, count) {\r\n    if (usePath2D && !line.options.segment) {\r\n        strokePathWithCache(ctx, line, start, count);\r\n    } else {\r\n        strokePathDirect(ctx, line, start, count);\r\n    }\r\n}\r\nclass LineElement extends Element {\r\n    static id = 'line';\r\n static defaults = {\r\n        borderCapStyle: 'butt',\r\n        borderDash: [],\r\n        borderDashOffset: 0,\r\n        borderJoinStyle: 'miter',\r\n        borderWidth: 3,\r\n        capBezierPoints: true,\r\n        cubicInterpolationMode: 'default',\r\n        fill: false,\r\n        spanGaps: false,\r\n        stepped: false,\r\n        tension: 0\r\n    };\r\n static defaultRoutes = {\r\n        backgroundColor: 'backgroundColor',\r\n        borderColor: 'borderColor'\r\n    };\r\n    static descriptors = {\r\n        _scriptable: true,\r\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\r\n    };\r\n    constructor(cfg){\r\n        super();\r\n        this.animated = true;\r\n        this.options = undefined;\r\n        this._chart = undefined;\r\n        this._loop = undefined;\r\n        this._fullLoop = undefined;\r\n        this._path = undefined;\r\n        this._points = undefined;\r\n        this._segments = undefined;\r\n        this._decimated = false;\r\n        this._pointsUpdated = false;\r\n        this._datasetIndex = undefined;\r\n        if (cfg) {\r\n            Object.assign(this, cfg);\r\n        }\r\n    }\r\n    updateControlPoints(chartArea, indexAxis) {\r\n        const options = this.options;\r\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\r\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\r\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\r\n            this._pointsUpdated = true;\r\n        }\r\n    }\r\n    set points(points) {\r\n        this._points = points;\r\n        delete this._segments;\r\n        delete this._path;\r\n        this._pointsUpdated = false;\r\n    }\r\n    get points() {\r\n        return this._points;\r\n    }\r\n    get segments() {\r\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\r\n    }\r\n first() {\r\n        const segments = this.segments;\r\n        const points = this.points;\r\n        return segments.length && points[segments[0].start];\r\n    }\r\n last() {\r\n        const segments = this.segments;\r\n        const points = this.points;\r\n        const count = segments.length;\r\n        return count && points[segments[count - 1].end];\r\n    }\r\n interpolate(point, property) {\r\n        const options = this.options;\r\n        const value = point[property];\r\n        const points = this.points;\r\n        const segments = _boundSegments(this, {\r\n            property,\r\n            start: value,\r\n            end: value\r\n        });\r\n        if (!segments.length) {\r\n            return;\r\n        }\r\n        const result = [];\r\n        const _interpolate = _getInterpolationMethod(options);\r\n        let i, ilen;\r\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\r\n            const { start , end  } = segments[i];\r\n            const p1 = points[start];\r\n            const p2 = points[end];\r\n            if (p1 === p2) {\r\n                result.push(p1);\r\n                continue;\r\n            }\r\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\r\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\r\n            interpolated[property] = point[property];\r\n            result.push(interpolated);\r\n        }\r\n        return result.length === 1 ? result[0] : result;\r\n    }\r\n pathSegment(ctx, segment, params) {\r\n        const segmentMethod = _getSegmentMethod(this);\r\n        return segmentMethod(ctx, this, segment, params);\r\n    }\r\n path(ctx, start, count) {\r\n        const segments = this.segments;\r\n        const segmentMethod = _getSegmentMethod(this);\r\n        let loop = this._loop;\r\n        start = start || 0;\r\n        count = count || this.points.length - start;\r\n        for (const segment of segments){\r\n            loop &= segmentMethod(ctx, this, segment, {\r\n                start,\r\n                end: start + count - 1\r\n            });\r\n        }\r\n        return !!loop;\r\n    }\r\n draw(ctx, chartArea, start, count) {\r\n        const options = this.options || {};\r\n        const points = this.points || [];\r\n        if (points.length && options.borderWidth) {\r\n            ctx.save();\r\n            draw(ctx, this, start, count);\r\n            ctx.restore();\r\n        }\r\n        if (this.animated) {\r\n            this._pointsUpdated = false;\r\n            this._path = undefined;\r\n        }\r\n    }\r\n}\r\n\r\nfunction inRange$1(el, pos, axis, useFinalPosition) {\r\n    const options = el.options;\r\n    const { [axis]: value  } = el.getProps([\r\n        axis\r\n    ], useFinalPosition);\r\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\r\n}\r\nclass PointElement extends Element {\r\n    static id = 'point';\r\n    parsed;\r\n    skip;\r\n    stop;\r\n    /**\r\n   * @type {any}\r\n   */ static defaults = {\r\n        borderWidth: 1,\r\n        hitRadius: 1,\r\n        hoverBorderWidth: 1,\r\n        hoverRadius: 4,\r\n        pointStyle: 'circle',\r\n        radius: 3,\r\n        rotation: 0\r\n    };\r\n    /**\r\n   * @type {any}\r\n   */ static defaultRoutes = {\r\n        backgroundColor: 'backgroundColor',\r\n        borderColor: 'borderColor'\r\n    };\r\n    constructor(cfg){\r\n        super();\r\n        this.options = undefined;\r\n        this.parsed = undefined;\r\n        this.skip = undefined;\r\n        this.stop = undefined;\r\n        if (cfg) {\r\n            Object.assign(this, cfg);\r\n        }\r\n    }\r\n    inRange(mouseX, mouseY, useFinalPosition) {\r\n        const options = this.options;\r\n        const { x , y  } = this.getProps([\r\n            'x',\r\n            'y'\r\n        ], useFinalPosition);\r\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\r\n    }\r\n    inXRange(mouseX, useFinalPosition) {\r\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\r\n    }\r\n    inYRange(mouseY, useFinalPosition) {\r\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\r\n    }\r\n    getCenterPoint(useFinalPosition) {\r\n        const { x , y  } = this.getProps([\r\n            'x',\r\n            'y'\r\n        ], useFinalPosition);\r\n        return {\r\n            x,\r\n            y\r\n        };\r\n    }\r\n    size(options) {\r\n        options = options || this.options || {};\r\n        let radius = options.radius || 0;\r\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\r\n        const borderWidth = radius && options.borderWidth || 0;\r\n        return (radius + borderWidth) * 2;\r\n    }\r\n    draw(ctx, area) {\r\n        const options = this.options;\r\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\r\n            return;\r\n        }\r\n        ctx.strokeStyle = options.borderColor;\r\n        ctx.lineWidth = options.borderWidth;\r\n        ctx.fillStyle = options.backgroundColor;\r\n        drawPoint(ctx, options, this.x, this.y);\r\n    }\r\n    getRange() {\r\n        const options = this.options || {};\r\n        // @ts-expect-error Fallbacks should never be hit in practice\r\n        return options.radius + options.hitRadius;\r\n    }\r\n}\r\n\r\nfunction getBarBounds(bar, useFinalPosition) {\r\n    const { x , y , base , width , height  } =  bar.getProps([\r\n        'x',\r\n        'y',\r\n        'base',\r\n        'width',\r\n        'height'\r\n    ], useFinalPosition);\r\n    let left, right, top, bottom, half;\r\n    if (bar.horizontal) {\r\n        half = height / 2;\r\n        left = Math.min(x, base);\r\n        right = Math.max(x, base);\r\n        top = y - half;\r\n        bottom = y + half;\r\n    } else {\r\n        half = width / 2;\r\n        left = x - half;\r\n        right = x + half;\r\n        top = Math.min(y, base);\r\n        bottom = Math.max(y, base);\r\n    }\r\n    return {\r\n        left,\r\n        top,\r\n        right,\r\n        bottom\r\n    };\r\n}\r\nfunction skipOrLimit(skip, value, min, max) {\r\n    return skip ? 0 : _limitValue(value, min, max);\r\n}\r\nfunction parseBorderWidth(bar, maxW, maxH) {\r\n    const value = bar.options.borderWidth;\r\n    const skip = bar.borderSkipped;\r\n    const o = toTRBL(value);\r\n    return {\r\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\r\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\r\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\r\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\r\n    };\r\n}\r\nfunction parseBorderRadius(bar, maxW, maxH) {\r\n    const { enableBorderRadius  } = bar.getProps([\r\n        'enableBorderRadius'\r\n    ]);\r\n    const value = bar.options.borderRadius;\r\n    const o = toTRBLCorners(value);\r\n    const maxR = Math.min(maxW, maxH);\r\n    const skip = bar.borderSkipped;\r\n    const enableBorder = enableBorderRadius || isObject(value);\r\n    return {\r\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\r\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\r\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\r\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\r\n    };\r\n}\r\nfunction boundingRects(bar) {\r\n    const bounds = getBarBounds(bar);\r\n    const width = bounds.right - bounds.left;\r\n    const height = bounds.bottom - bounds.top;\r\n    const border = parseBorderWidth(bar, width / 2, height / 2);\r\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\r\n    return {\r\n        outer: {\r\n            x: bounds.left,\r\n            y: bounds.top,\r\n            w: width,\r\n            h: height,\r\n            radius\r\n        },\r\n        inner: {\r\n            x: bounds.left + border.l,\r\n            y: bounds.top + border.t,\r\n            w: width - border.l - border.r,\r\n            h: height - border.t - border.b,\r\n            radius: {\r\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\r\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\r\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\r\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\r\n            }\r\n        }\r\n    };\r\n}\r\nfunction inRange(bar, x, y, useFinalPosition) {\r\n    const skipX = x === null;\r\n    const skipY = y === null;\r\n    const skipBoth = skipX && skipY;\r\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\r\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\r\n}\r\nfunction hasRadius(radius) {\r\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\r\n}\r\n function addNormalRectPath(ctx, rect) {\r\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\r\n}\r\nfunction inflateRect(rect, amount, refRect = {}) {\r\n    const x = rect.x !== refRect.x ? -amount : 0;\r\n    const y = rect.y !== refRect.y ? -amount : 0;\r\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\r\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\r\n    return {\r\n        x: rect.x + x,\r\n        y: rect.y + y,\r\n        w: rect.w + w,\r\n        h: rect.h + h,\r\n        radius: rect.radius\r\n    };\r\n}\r\nclass BarElement extends Element {\r\n    static id = 'bar';\r\n static defaults = {\r\n        borderSkipped: 'start',\r\n        borderWidth: 0,\r\n        borderRadius: 0,\r\n        inflateAmount: 'auto',\r\n        pointStyle: undefined\r\n    };\r\n static defaultRoutes = {\r\n        backgroundColor: 'backgroundColor',\r\n        borderColor: 'borderColor'\r\n    };\r\n    constructor(cfg){\r\n        super();\r\n        this.options = undefined;\r\n        this.horizontal = undefined;\r\n        this.base = undefined;\r\n        this.width = undefined;\r\n        this.height = undefined;\r\n        this.inflateAmount = undefined;\r\n        if (cfg) {\r\n            Object.assign(this, cfg);\r\n        }\r\n    }\r\n    draw(ctx) {\r\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\r\n        const { inner , outer  } = boundingRects(this);\r\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\r\n        ctx.save();\r\n        if (outer.w !== inner.w || outer.h !== inner.h) {\r\n            ctx.beginPath();\r\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\r\n            ctx.clip();\r\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\r\n            ctx.fillStyle = borderColor;\r\n            ctx.fill('evenodd');\r\n        }\r\n        ctx.beginPath();\r\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\r\n        ctx.fillStyle = backgroundColor;\r\n        ctx.fill();\r\n        ctx.restore();\r\n    }\r\n    inRange(mouseX, mouseY, useFinalPosition) {\r\n        return inRange(this, mouseX, mouseY, useFinalPosition);\r\n    }\r\n    inXRange(mouseX, useFinalPosition) {\r\n        return inRange(this, mouseX, null, useFinalPosition);\r\n    }\r\n    inYRange(mouseY, useFinalPosition) {\r\n        return inRange(this, null, mouseY, useFinalPosition);\r\n    }\r\n    getCenterPoint(useFinalPosition) {\r\n        const { x , y , base , horizontal  } =  this.getProps([\r\n            'x',\r\n            'y',\r\n            'base',\r\n            'horizontal'\r\n        ], useFinalPosition);\r\n        return {\r\n            x: horizontal ? (x + base) / 2 : x,\r\n            y: horizontal ? y : (y + base) / 2\r\n        };\r\n    }\r\n    getRange(axis) {\r\n        return axis === 'x' ? this.width / 2 : this.height / 2;\r\n    }\r\n}\r\n\r\nvar elements = /*#__PURE__*/Object.freeze({\r\n__proto__: null,\r\nArcElement: ArcElement,\r\nBarElement: BarElement,\r\nLineElement: LineElement,\r\nPointElement: PointElement\r\n});\r\n\r\nconst BORDER_COLORS = [\r\n    'rgb(54, 162, 235)',\r\n    'rgb(255, 99, 132)',\r\n    'rgb(255, 159, 64)',\r\n    'rgb(255, 205, 86)',\r\n    'rgb(75, 192, 192)',\r\n    'rgb(153, 102, 255)',\r\n    'rgb(201, 203, 207)' // grey\r\n];\r\n// Border colors with 50% transparency\r\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\r\nfunction getBorderColor(i) {\r\n    return BORDER_COLORS[i % BORDER_COLORS.length];\r\n}\r\nfunction getBackgroundColor(i) {\r\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\r\n}\r\nfunction colorizeDefaultDataset(dataset, i) {\r\n    dataset.borderColor = getBorderColor(i);\r\n    dataset.backgroundColor = getBackgroundColor(i);\r\n    return ++i;\r\n}\r\nfunction colorizeDoughnutDataset(dataset, i) {\r\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\r\n    return i;\r\n}\r\nfunction colorizePolarAreaDataset(dataset, i) {\r\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\r\n    return i;\r\n}\r\nfunction getColorizer(chart) {\r\n    let i = 0;\r\n    return (dataset, datasetIndex)=>{\r\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n        if (controller instanceof DoughnutController) {\r\n            i = colorizeDoughnutDataset(dataset, i);\r\n        } else if (controller instanceof PolarAreaController) {\r\n            i = colorizePolarAreaDataset(dataset, i);\r\n        } else if (controller) {\r\n            i = colorizeDefaultDataset(dataset, i);\r\n        }\r\n    };\r\n}\r\nfunction containsColorsDefinitions(descriptors) {\r\n    let k;\r\n    for(k in descriptors){\r\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction containsColorsDefinition(descriptor) {\r\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\r\n}\r\nvar plugin_colors = {\r\n    id: 'colors',\r\n    defaults: {\r\n        enabled: true,\r\n        forceOverride: false\r\n    },\r\n    beforeLayout (chart, _args, options) {\r\n        if (!options.enabled) {\r\n            return;\r\n        }\r\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\r\n        const { elements  } = chartOptions;\r\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\r\n            return;\r\n        }\r\n        const colorizer = getColorizer(chart);\r\n        datasets.forEach(colorizer);\r\n    }\r\n};\r\n\r\nfunction lttbDecimation(data, start, count, availableWidth, options) {\r\n const samples = options.samples || availableWidth;\r\n    if (samples >= count) {\r\n        return data.slice(start, start + count);\r\n    }\r\n    const decimated = [];\r\n    const bucketWidth = (count - 2) / (samples - 2);\r\n    let sampledIndex = 0;\r\n    const endIndex = start + count - 1;\r\n    let a = start;\r\n    let i, maxAreaPoint, maxArea, area, nextA;\r\n    decimated[sampledIndex++] = data[a];\r\n    for(i = 0; i < samples - 2; i++){\r\n        let avgX = 0;\r\n        let avgY = 0;\r\n        let j;\r\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\r\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\r\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\r\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\r\n            avgX += data[j].x;\r\n            avgY += data[j].y;\r\n        }\r\n        avgX /= avgRangeLength;\r\n        avgY /= avgRangeLength;\r\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\r\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\r\n        const { x: pointAx , y: pointAy  } = data[a];\r\n        maxArea = area = -1;\r\n        for(j = rangeOffs; j < rangeTo; j++){\r\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\r\n            if (area > maxArea) {\r\n                maxArea = area;\r\n                maxAreaPoint = data[j];\r\n                nextA = j;\r\n            }\r\n        }\r\n        decimated[sampledIndex++] = maxAreaPoint;\r\n        a = nextA;\r\n    }\r\n    decimated[sampledIndex++] = data[endIndex];\r\n    return decimated;\r\n}\r\nfunction minMaxDecimation(data, start, count, availableWidth) {\r\n    let avgX = 0;\r\n    let countX = 0;\r\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\r\n    const decimated = [];\r\n    const endIndex = start + count - 1;\r\n    const xMin = data[start].x;\r\n    const xMax = data[endIndex].x;\r\n    const dx = xMax - xMin;\r\n    for(i = start; i < start + count; ++i){\r\n        point = data[i];\r\n        x = (point.x - xMin) / dx * availableWidth;\r\n        y = point.y;\r\n        const truncX = x | 0;\r\n        if (truncX === prevX) {\r\n            if (y < minY) {\r\n                minY = y;\r\n                minIndex = i;\r\n            } else if (y > maxY) {\r\n                maxY = y;\r\n                maxIndex = i;\r\n            }\r\n            avgX = (countX * avgX + point.x) / ++countX;\r\n        } else {\r\n            const lastIndex = i - 1;\r\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\r\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\r\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\r\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\r\n                    decimated.push({\r\n                        ...data[intermediateIndex1],\r\n                        x: avgX\r\n                    });\r\n                }\r\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\r\n                    decimated.push({\r\n                        ...data[intermediateIndex2],\r\n                        x: avgX\r\n                    });\r\n                }\r\n            }\r\n            if (i > 0 && lastIndex !== startIndex) {\r\n                decimated.push(data[lastIndex]);\r\n            }\r\n            decimated.push(point);\r\n            prevX = truncX;\r\n            countX = 0;\r\n            minY = maxY = y;\r\n            minIndex = maxIndex = startIndex = i;\r\n        }\r\n    }\r\n    return decimated;\r\n}\r\nfunction cleanDecimatedDataset(dataset) {\r\n    if (dataset._decimated) {\r\n        const data = dataset._data;\r\n        delete dataset._decimated;\r\n        delete dataset._data;\r\n        Object.defineProperty(dataset, 'data', {\r\n            configurable: true,\r\n            enumerable: true,\r\n            writable: true,\r\n            value: data\r\n        });\r\n    }\r\n}\r\nfunction cleanDecimatedData(chart) {\r\n    chart.data.datasets.forEach((dataset)=>{\r\n        cleanDecimatedDataset(dataset);\r\n    });\r\n}\r\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\r\n    const pointCount = points.length;\r\n    let start = 0;\r\n    let count;\r\n    const { iScale  } = meta;\r\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\r\n    if (minDefined) {\r\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\r\n    }\r\n    if (maxDefined) {\r\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\r\n    } else {\r\n        count = pointCount - start;\r\n    }\r\n    return {\r\n        start,\r\n        count\r\n    };\r\n}\r\nvar plugin_decimation = {\r\n    id: 'decimation',\r\n    defaults: {\r\n        algorithm: 'min-max',\r\n        enabled: false\r\n    },\r\n    beforeElementsUpdate: (chart, args, options)=>{\r\n        if (!options.enabled) {\r\n            cleanDecimatedData(chart);\r\n            return;\r\n        }\r\n        const availableWidth = chart.width;\r\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\r\n            const { _data , indexAxis  } = dataset;\r\n            const meta = chart.getDatasetMeta(datasetIndex);\r\n            const data = _data || dataset.data;\r\n            if (resolve([\r\n                indexAxis,\r\n                chart.options.indexAxis\r\n            ]) === 'y') {\r\n                return;\r\n            }\r\n            if (!meta.controller.supportsDecimation) {\r\n                return;\r\n            }\r\n            const xAxis = chart.scales[meta.xAxisID];\r\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\r\n                return;\r\n            }\r\n            if (chart.options.parsing) {\r\n                return;\r\n            }\r\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\r\n            const threshold = options.threshold || 4 * availableWidth;\r\n            if (count <= threshold) {\r\n                cleanDecimatedDataset(dataset);\r\n                return;\r\n            }\r\n            if (isNullOrUndef(_data)) {\r\n                dataset._data = data;\r\n                delete dataset.data;\r\n                Object.defineProperty(dataset, 'data', {\r\n                    configurable: true,\r\n                    enumerable: true,\r\n                    get: function() {\r\n                        return this._decimated;\r\n                    },\r\n                    set: function(d) {\r\n                        this._data = d;\r\n                    }\r\n                });\r\n            }\r\n            let decimated;\r\n            switch(options.algorithm){\r\n                case 'lttb':\r\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\r\n                    break;\r\n                case 'min-max':\r\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\r\n            }\r\n            dataset._decimated = decimated;\r\n        });\r\n    },\r\n    destroy (chart) {\r\n        cleanDecimatedData(chart);\r\n    }\r\n};\r\n\r\nfunction _segments(line, target, property) {\r\n    const segments = line.segments;\r\n    const points = line.points;\r\n    const tpoints = target.points;\r\n    const parts = [];\r\n    for (const segment of segments){\r\n        let { start , end  } = segment;\r\n        end = _findSegmentEnd(start, end, points);\r\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\r\n        if (!target.segments) {\r\n            parts.push({\r\n                source: segment,\r\n                target: bounds,\r\n                start: points[start],\r\n                end: points[end]\r\n            });\r\n            continue;\r\n        }\r\n        const targetSegments = _boundSegments(target, bounds);\r\n        for (const tgt of targetSegments){\r\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\r\n            const fillSources = _boundSegment(segment, points, subBounds);\r\n            for (const fillSource of fillSources){\r\n                parts.push({\r\n                    source: fillSource,\r\n                    target: tgt,\r\n                    start: {\r\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\r\n                    },\r\n                    end: {\r\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return parts;\r\n}\r\nfunction _getBounds(property, first, last, loop) {\r\n    if (loop) {\r\n        return;\r\n    }\r\n    let start = first[property];\r\n    let end = last[property];\r\n    if (property === 'angle') {\r\n        start = _normalizeAngle(start);\r\n        end = _normalizeAngle(end);\r\n    }\r\n    return {\r\n        property,\r\n        start,\r\n        end\r\n    };\r\n}\r\nfunction _pointsFromSegments(boundary, line) {\r\n    const { x =null , y =null  } = boundary || {};\r\n    const linePoints = line.points;\r\n    const points = [];\r\n    line.segments.forEach(({ start , end  })=>{\r\n        end = _findSegmentEnd(start, end, linePoints);\r\n        const first = linePoints[start];\r\n        const last = linePoints[end];\r\n        if (y !== null) {\r\n            points.push({\r\n                x: first.x,\r\n                y\r\n            });\r\n            points.push({\r\n                x: last.x,\r\n                y\r\n            });\r\n        } else if (x !== null) {\r\n            points.push({\r\n                x,\r\n                y: first.y\r\n            });\r\n            points.push({\r\n                x,\r\n                y: last.y\r\n            });\r\n        }\r\n    });\r\n    return points;\r\n}\r\nfunction _findSegmentEnd(start, end, points) {\r\n    for(; end > start; end--){\r\n        const point = points[end];\r\n        if (!isNaN(point.x) && !isNaN(point.y)) {\r\n            break;\r\n        }\r\n    }\r\n    return end;\r\n}\r\nfunction _getEdge(a, b, prop, fn) {\r\n    if (a && b) {\r\n        return fn(a[prop], b[prop]);\r\n    }\r\n    return a ? a[prop] : b ? b[prop] : 0;\r\n}\r\n\r\nfunction _createBoundaryLine(boundary, line) {\r\n    let points = [];\r\n    let _loop = false;\r\n    if (isArray(boundary)) {\r\n        _loop = true;\r\n        points = boundary;\r\n    } else {\r\n        points = _pointsFromSegments(boundary, line);\r\n    }\r\n    return points.length ? new LineElement({\r\n        points,\r\n        options: {\r\n            tension: 0\r\n        },\r\n        _loop,\r\n        _fullLoop: _loop\r\n    }) : null;\r\n}\r\nfunction _shouldApplyFill(source) {\r\n    return source && source.fill !== false;\r\n}\r\n\r\nfunction _resolveTarget(sources, index, propagate) {\r\n    const source = sources[index];\r\n    let fill = source.fill;\r\n    const visited = [\r\n        index\r\n    ];\r\n    let target;\r\n    if (!propagate) {\r\n        return fill;\r\n    }\r\n    while(fill !== false && visited.indexOf(fill) === -1){\r\n        if (!isNumberFinite(fill)) {\r\n            return fill;\r\n        }\r\n        target = sources[fill];\r\n        if (!target) {\r\n            return false;\r\n        }\r\n        if (target.visible) {\r\n            return fill;\r\n        }\r\n        visited.push(fill);\r\n        fill = target.fill;\r\n    }\r\n    return false;\r\n}\r\n function _decodeFill(line, index, count) {\r\n     const fill = parseFillOption(line);\r\n    if (isObject(fill)) {\r\n        return isNaN(fill.value) ? false : fill;\r\n    }\r\n    let target = parseFloat(fill);\r\n    if (isNumberFinite(target) && Math.floor(target) === target) {\r\n        return decodeTargetIndex(fill[0], index, target, count);\r\n    }\r\n    return [\r\n        'origin',\r\n        'start',\r\n        'end',\r\n        'stack',\r\n        'shape'\r\n    ].indexOf(fill) >= 0 && fill;\r\n}\r\nfunction decodeTargetIndex(firstCh, index, target, count) {\r\n    if (firstCh === '-' || firstCh === '+') {\r\n        target = index + target;\r\n    }\r\n    if (target === index || target < 0 || target >= count) {\r\n        return false;\r\n    }\r\n    return target;\r\n}\r\n function _getTargetPixel(fill, scale) {\r\n    let pixel = null;\r\n    if (fill === 'start') {\r\n        pixel = scale.bottom;\r\n    } else if (fill === 'end') {\r\n        pixel = scale.top;\r\n    } else if (isObject(fill)) {\r\n        pixel = scale.getPixelForValue(fill.value);\r\n    } else if (scale.getBasePixel) {\r\n        pixel = scale.getBasePixel();\r\n    }\r\n    return pixel;\r\n}\r\n function _getTargetValue(fill, scale, startValue) {\r\n    let value;\r\n    if (fill === 'start') {\r\n        value = startValue;\r\n    } else if (fill === 'end') {\r\n        value = scale.options.reverse ? scale.min : scale.max;\r\n    } else if (isObject(fill)) {\r\n        value = fill.value;\r\n    } else {\r\n        value = scale.getBaseValue();\r\n    }\r\n    return value;\r\n}\r\n function parseFillOption(line) {\r\n    const options = line.options;\r\n    const fillOption = options.fill;\r\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\r\n    if (fill === undefined) {\r\n        fill = !!options.backgroundColor;\r\n    }\r\n    if (fill === false || fill === null) {\r\n        return false;\r\n    }\r\n    if (fill === true) {\r\n        return 'origin';\r\n    }\r\n    return fill;\r\n}\r\n\r\nfunction _buildStackLine(source) {\r\n    const { scale , index , line  } = source;\r\n    const points = [];\r\n    const segments = line.segments;\r\n    const sourcePoints = line.points;\r\n    const linesBelow = getLinesBelow(scale, index);\r\n    linesBelow.push(_createBoundaryLine({\r\n        x: null,\r\n        y: scale.bottom\r\n    }, line));\r\n    for(let i = 0; i < segments.length; i++){\r\n        const segment = segments[i];\r\n        for(let j = segment.start; j <= segment.end; j++){\r\n            addPointsBelow(points, sourcePoints[j], linesBelow);\r\n        }\r\n    }\r\n    return new LineElement({\r\n        points,\r\n        options: {}\r\n    });\r\n}\r\n function getLinesBelow(scale, index) {\r\n    const below = [];\r\n    const metas = scale.getMatchingVisibleMetas('line');\r\n    for(let i = 0; i < metas.length; i++){\r\n        const meta = metas[i];\r\n        if (meta.index === index) {\r\n            break;\r\n        }\r\n        if (!meta.hidden) {\r\n            below.unshift(meta.dataset);\r\n        }\r\n    }\r\n    return below;\r\n}\r\n function addPointsBelow(points, sourcePoint, linesBelow) {\r\n    const postponed = [];\r\n    for(let j = 0; j < linesBelow.length; j++){\r\n        const line = linesBelow[j];\r\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\r\n        if (!point || first && last) {\r\n            continue;\r\n        }\r\n        if (first) {\r\n            postponed.unshift(point);\r\n        } else {\r\n            points.push(point);\r\n            if (!last) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    points.push(...postponed);\r\n}\r\n function findPoint(line, sourcePoint, property) {\r\n    const point = line.interpolate(sourcePoint, property);\r\n    if (!point) {\r\n        return {};\r\n    }\r\n    const pointValue = point[property];\r\n    const segments = line.segments;\r\n    const linePoints = line.points;\r\n    let first = false;\r\n    let last = false;\r\n    for(let i = 0; i < segments.length; i++){\r\n        const segment = segments[i];\r\n        const firstValue = linePoints[segment.start][property];\r\n        const lastValue = linePoints[segment.end][property];\r\n        if (_isBetween(pointValue, firstValue, lastValue)) {\r\n            first = pointValue === firstValue;\r\n            last = pointValue === lastValue;\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        first,\r\n        last,\r\n        point\r\n    };\r\n}\r\n\r\nclass simpleArc {\r\n    constructor(opts){\r\n        this.x = opts.x;\r\n        this.y = opts.y;\r\n        this.radius = opts.radius;\r\n    }\r\n    pathSegment(ctx, bounds, opts) {\r\n        const { x , y , radius  } = this;\r\n        bounds = bounds || {\r\n            start: 0,\r\n            end: TAU\r\n        };\r\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\r\n        return !opts.bounds;\r\n    }\r\n    interpolate(point) {\r\n        const { x , y , radius  } = this;\r\n        const angle = point.angle;\r\n        return {\r\n            x: x + Math.cos(angle) * radius,\r\n            y: y + Math.sin(angle) * radius,\r\n            angle\r\n        };\r\n    }\r\n}\r\n\r\nfunction _getTarget(source) {\r\n    const { chart , fill , line  } = source;\r\n    if (isNumberFinite(fill)) {\r\n        return getLineByIndex(chart, fill);\r\n    }\r\n    if (fill === 'stack') {\r\n        return _buildStackLine(source);\r\n    }\r\n    if (fill === 'shape') {\r\n        return true;\r\n    }\r\n    const boundary = computeBoundary(source);\r\n    if (boundary instanceof simpleArc) {\r\n        return boundary;\r\n    }\r\n    return _createBoundaryLine(boundary, line);\r\n}\r\n function getLineByIndex(chart, index) {\r\n    const meta = chart.getDatasetMeta(index);\r\n    const visible = meta && chart.isDatasetVisible(index);\r\n    return visible ? meta.dataset : null;\r\n}\r\nfunction computeBoundary(source) {\r\n    const scale = source.scale || {};\r\n    if (scale.getPointPositionForValue) {\r\n        return computeCircularBoundary(source);\r\n    }\r\n    return computeLinearBoundary(source);\r\n}\r\nfunction computeLinearBoundary(source) {\r\n    const { scale ={} , fill  } = source;\r\n    const pixel = _getTargetPixel(fill, scale);\r\n    if (isNumberFinite(pixel)) {\r\n        const horizontal = scale.isHorizontal();\r\n        return {\r\n            x: horizontal ? pixel : null,\r\n            y: horizontal ? null : pixel\r\n        };\r\n    }\r\n    return null;\r\n}\r\nfunction computeCircularBoundary(source) {\r\n    const { scale , fill  } = source;\r\n    const options = scale.options;\r\n    const length = scale.getLabels().length;\r\n    const start = options.reverse ? scale.max : scale.min;\r\n    const value = _getTargetValue(fill, scale, start);\r\n    const target = [];\r\n    if (options.grid.circular) {\r\n        const center = scale.getPointPositionForValue(0, start);\r\n        return new simpleArc({\r\n            x: center.x,\r\n            y: center.y,\r\n            radius: scale.getDistanceFromCenterForValue(value)\r\n        });\r\n    }\r\n    for(let i = 0; i < length; ++i){\r\n        target.push(scale.getPointPositionForValue(i, value));\r\n    }\r\n    return target;\r\n}\r\n\r\nfunction _drawfill(ctx, source, area) {\r\n    const target = _getTarget(source);\r\n    const { line , scale , axis  } = source;\r\n    const lineOpts = line.options;\r\n    const fillOption = lineOpts.fill;\r\n    const color = lineOpts.backgroundColor;\r\n    const { above =color , below =color  } = fillOption || {};\r\n    if (target && line.points.length) {\r\n        clipArea(ctx, area);\r\n        doFill(ctx, {\r\n            line,\r\n            target,\r\n            above,\r\n            below,\r\n            area,\r\n            scale,\r\n            axis\r\n        });\r\n        unclipArea(ctx);\r\n    }\r\n}\r\nfunction doFill(ctx, cfg) {\r\n    const { line , target , above , below , area , scale  } = cfg;\r\n    const property = line._loop ? 'angle' : cfg.axis;\r\n    ctx.save();\r\n    if (property === 'x' && below !== above) {\r\n        clipVertical(ctx, target, area.top);\r\n        fill(ctx, {\r\n            line,\r\n            target,\r\n            color: above,\r\n            scale,\r\n            property\r\n        });\r\n        ctx.restore();\r\n        ctx.save();\r\n        clipVertical(ctx, target, area.bottom);\r\n    }\r\n    fill(ctx, {\r\n        line,\r\n        target,\r\n        color: below,\r\n        scale,\r\n        property\r\n    });\r\n    ctx.restore();\r\n}\r\nfunction clipVertical(ctx, target, clipY) {\r\n    const { segments , points  } = target;\r\n    let first = true;\r\n    let lineLoop = false;\r\n    ctx.beginPath();\r\n    for (const segment of segments){\r\n        const { start , end  } = segment;\r\n        const firstPoint = points[start];\r\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\r\n        if (first) {\r\n            ctx.moveTo(firstPoint.x, firstPoint.y);\r\n            first = false;\r\n        } else {\r\n            ctx.lineTo(firstPoint.x, clipY);\r\n            ctx.lineTo(firstPoint.x, firstPoint.y);\r\n        }\r\n        lineLoop = !!target.pathSegment(ctx, segment, {\r\n            move: lineLoop\r\n        });\r\n        if (lineLoop) {\r\n            ctx.closePath();\r\n        } else {\r\n            ctx.lineTo(lastPoint.x, clipY);\r\n        }\r\n    }\r\n    ctx.lineTo(target.first().x, clipY);\r\n    ctx.closePath();\r\n    ctx.clip();\r\n}\r\nfunction fill(ctx, cfg) {\r\n    const { line , target , property , color , scale  } = cfg;\r\n    const segments = _segments(line, target, property);\r\n    for (const { source: src , target: tgt , start , end  } of segments){\r\n        const { style: { backgroundColor =color  } = {}  } = src;\r\n        const notShape = target !== true;\r\n        ctx.save();\r\n        ctx.fillStyle = backgroundColor;\r\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\r\n        ctx.beginPath();\r\n        const lineLoop = !!line.pathSegment(ctx, src);\r\n        let loop;\r\n        if (notShape) {\r\n            if (lineLoop) {\r\n                ctx.closePath();\r\n            } else {\r\n                interpolatedLineTo(ctx, target, end, property);\r\n            }\r\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\r\n                move: lineLoop,\r\n                reverse: true\r\n            });\r\n            loop = lineLoop && targetLoop;\r\n            if (!loop) {\r\n                interpolatedLineTo(ctx, target, start, property);\r\n            }\r\n        }\r\n        ctx.closePath();\r\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\r\n        ctx.restore();\r\n    }\r\n}\r\nfunction clipBounds(ctx, scale, bounds) {\r\n    const { top , bottom  } = scale.chart.chartArea;\r\n    const { property , start , end  } = bounds || {};\r\n    if (property === 'x') {\r\n        ctx.beginPath();\r\n        ctx.rect(start, top, end - start, bottom - top);\r\n        ctx.clip();\r\n    }\r\n}\r\nfunction interpolatedLineTo(ctx, target, point, property) {\r\n    const interpolatedPoint = target.interpolate(point, property);\r\n    if (interpolatedPoint) {\r\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\r\n    }\r\n}\r\n\r\nvar index = {\r\n    id: 'filler',\r\n    afterDatasetsUpdate (chart, _args, options) {\r\n        const count = (chart.data.datasets || []).length;\r\n        const sources = [];\r\n        let meta, i, line, source;\r\n        for(i = 0; i < count; ++i){\r\n            meta = chart.getDatasetMeta(i);\r\n            line = meta.dataset;\r\n            source = null;\r\n            if (line && line.options && line instanceof LineElement) {\r\n                source = {\r\n                    visible: chart.isDatasetVisible(i),\r\n                    index: i,\r\n                    fill: _decodeFill(line, i, count),\r\n                    chart,\r\n                    axis: meta.controller.options.indexAxis,\r\n                    scale: meta.vScale,\r\n                    line\r\n                };\r\n            }\r\n            meta.$filler = source;\r\n            sources.push(source);\r\n        }\r\n        for(i = 0; i < count; ++i){\r\n            source = sources[i];\r\n            if (!source || source.fill === false) {\r\n                continue;\r\n            }\r\n            source.fill = _resolveTarget(sources, i, options.propagate);\r\n        }\r\n    },\r\n    beforeDraw (chart, _args, options) {\r\n        const draw = options.drawTime === 'beforeDraw';\r\n        const metasets = chart.getSortedVisibleDatasetMetas();\r\n        const area = chart.chartArea;\r\n        for(let i = metasets.length - 1; i >= 0; --i){\r\n            const source = metasets[i].$filler;\r\n            if (!source) {\r\n                continue;\r\n            }\r\n            source.line.updateControlPoints(area, source.axis);\r\n            if (draw && source.fill) {\r\n                _drawfill(chart.ctx, source, area);\r\n            }\r\n        }\r\n    },\r\n    beforeDatasetsDraw (chart, _args, options) {\r\n        if (options.drawTime !== 'beforeDatasetsDraw') {\r\n            return;\r\n        }\r\n        const metasets = chart.getSortedVisibleDatasetMetas();\r\n        for(let i = metasets.length - 1; i >= 0; --i){\r\n            const source = metasets[i].$filler;\r\n            if (_shouldApplyFill(source)) {\r\n                _drawfill(chart.ctx, source, chart.chartArea);\r\n            }\r\n        }\r\n    },\r\n    beforeDatasetDraw (chart, args, options) {\r\n        const source = args.meta.$filler;\r\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\r\n            return;\r\n        }\r\n        _drawfill(chart.ctx, source, chart.chartArea);\r\n    },\r\n    defaults: {\r\n        propagate: true,\r\n        drawTime: 'beforeDatasetDraw'\r\n    }\r\n};\r\n\r\nconst getBoxSize = (labelOpts, fontSize)=>{\r\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\r\n    if (labelOpts.usePointStyle) {\r\n        boxHeight = Math.min(boxHeight, fontSize);\r\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\r\n    }\r\n    return {\r\n        boxWidth,\r\n        boxHeight,\r\n        itemHeight: Math.max(fontSize, boxHeight)\r\n    };\r\n};\r\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\r\nclass Legend extends Element {\r\n constructor(config){\r\n        super();\r\n        this._added = false;\r\n        this.legendHitBoxes = [];\r\n this._hoveredItem = null;\r\n        this.doughnutMode = false;\r\n        this.chart = config.chart;\r\n        this.options = config.options;\r\n        this.ctx = config.ctx;\r\n        this.legendItems = undefined;\r\n        this.columnSizes = undefined;\r\n        this.lineWidths = undefined;\r\n        this.maxHeight = undefined;\r\n        this.maxWidth = undefined;\r\n        this.top = undefined;\r\n        this.bottom = undefined;\r\n        this.left = undefined;\r\n        this.right = undefined;\r\n        this.height = undefined;\r\n        this.width = undefined;\r\n        this._margins = undefined;\r\n        this.position = undefined;\r\n        this.weight = undefined;\r\n        this.fullSize = undefined;\r\n    }\r\n    update(maxWidth, maxHeight, margins) {\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n        this._margins = margins;\r\n        this.setDimensions();\r\n        this.buildLabels();\r\n        this.fit();\r\n    }\r\n    setDimensions() {\r\n        if (this.isHorizontal()) {\r\n            this.width = this.maxWidth;\r\n            this.left = this._margins.left;\r\n            this.right = this.width;\r\n        } else {\r\n            this.height = this.maxHeight;\r\n            this.top = this._margins.top;\r\n            this.bottom = this.height;\r\n        }\r\n    }\r\n    buildLabels() {\r\n        const labelOpts = this.options.labels || {};\r\n        let legendItems = callback(labelOpts.generateLabels, [\r\n            this.chart\r\n        ], this) || [];\r\n        if (labelOpts.filter) {\r\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\r\n        }\r\n        if (labelOpts.sort) {\r\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\r\n        }\r\n        if (this.options.reverse) {\r\n            legendItems.reverse();\r\n        }\r\n        this.legendItems = legendItems;\r\n    }\r\n    fit() {\r\n        const { options , ctx  } = this;\r\n        if (!options.display) {\r\n            this.width = this.height = 0;\r\n            return;\r\n        }\r\n        const labelOpts = options.labels;\r\n        const labelFont = toFont(labelOpts.font);\r\n        const fontSize = labelFont.size;\r\n        const titleHeight = this._computeTitleHeight();\r\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\r\n        let width, height;\r\n        ctx.font = labelFont.string;\r\n        if (this.isHorizontal()) {\r\n            width = this.maxWidth;\r\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\r\n        } else {\r\n            height = this.maxHeight;\r\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\r\n        }\r\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\r\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\r\n    }\r\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\r\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\r\n        const hitboxes = this.legendHitBoxes = [];\r\n        const lineWidths = this.lineWidths = [\r\n            0\r\n        ];\r\n        const lineHeight = itemHeight + padding;\r\n        let totalHeight = titleHeight;\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'middle';\r\n        let row = -1;\r\n        let top = -lineHeight;\r\n        this.legendItems.forEach((legendItem, i)=>{\r\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\r\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\r\n                totalHeight += lineHeight;\r\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\r\n                top += lineHeight;\r\n                row++;\r\n            }\r\n            hitboxes[i] = {\r\n                left: 0,\r\n                top,\r\n                row,\r\n                width: itemWidth,\r\n                height: itemHeight\r\n            };\r\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\r\n        });\r\n        return totalHeight;\r\n    }\r\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\r\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\r\n        const hitboxes = this.legendHitBoxes = [];\r\n        const columnSizes = this.columnSizes = [];\r\n        const heightLimit = maxHeight - titleHeight;\r\n        let totalWidth = padding;\r\n        let currentColWidth = 0;\r\n        let currentColHeight = 0;\r\n        let left = 0;\r\n        let col = 0;\r\n        this.legendItems.forEach((legendItem, i)=>{\r\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\r\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\r\n                totalWidth += currentColWidth + padding;\r\n                columnSizes.push({\r\n                    width: currentColWidth,\r\n                    height: currentColHeight\r\n                });\r\n                left += currentColWidth + padding;\r\n                col++;\r\n                currentColWidth = currentColHeight = 0;\r\n            }\r\n            hitboxes[i] = {\r\n                left,\r\n                top: currentColHeight,\r\n                col,\r\n                width: itemWidth,\r\n                height: itemHeight\r\n            };\r\n            currentColWidth = Math.max(currentColWidth, itemWidth);\r\n            currentColHeight += itemHeight + padding;\r\n        });\r\n        totalWidth += currentColWidth;\r\n        columnSizes.push({\r\n            width: currentColWidth,\r\n            height: currentColHeight\r\n        });\r\n        return totalWidth;\r\n    }\r\n    adjustHitBoxes() {\r\n        if (!this.options.display) {\r\n            return;\r\n        }\r\n        const titleHeight = this._computeTitleHeight();\r\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\r\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\r\n        if (this.isHorizontal()) {\r\n            let row = 0;\r\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n            for (const hitbox of hitboxes){\r\n                if (row !== hitbox.row) {\r\n                    row = hitbox.row;\r\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\r\n                }\r\n                hitbox.top += this.top + titleHeight + padding;\r\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\r\n                left += hitbox.width + padding;\r\n            }\r\n        } else {\r\n            let col = 0;\r\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n            for (const hitbox of hitboxes){\r\n                if (hitbox.col !== col) {\r\n                    col = hitbox.col;\r\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\r\n                }\r\n                hitbox.top = top;\r\n                hitbox.left += this.left + padding;\r\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\r\n                top += hitbox.height + padding;\r\n            }\r\n        }\r\n    }\r\n    isHorizontal() {\r\n        return this.options.position === 'top' || this.options.position === 'bottom';\r\n    }\r\n    draw() {\r\n        if (this.options.display) {\r\n            const ctx = this.ctx;\r\n            clipArea(ctx, this);\r\n            this._draw();\r\n            unclipArea(ctx);\r\n        }\r\n    }\r\n _draw() {\r\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\r\n        const { align , labels: labelOpts  } = opts;\r\n        const defaultColor = defaults.color;\r\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n        const labelFont = toFont(labelOpts.font);\r\n        const { padding  } = labelOpts;\r\n        const fontSize = labelFont.size;\r\n        const halfFontSize = fontSize / 2;\r\n        let cursor;\r\n        this.drawTitle();\r\n        ctx.textAlign = rtlHelper.textAlign('left');\r\n        ctx.textBaseline = 'middle';\r\n        ctx.lineWidth = 0.5;\r\n        ctx.font = labelFont.string;\r\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\r\n        const drawLegendBox = function(x, y, legendItem) {\r\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\r\n                return;\r\n            }\r\n            ctx.save();\r\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\r\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\r\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\r\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\r\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\r\n            ctx.lineWidth = lineWidth;\r\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\r\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\r\n            if (labelOpts.usePointStyle) {\r\n                const drawOptions = {\r\n                    radius: boxHeight * Math.SQRT2 / 2,\r\n                    pointStyle: legendItem.pointStyle,\r\n                    rotation: legendItem.rotation,\r\n                    borderWidth: lineWidth\r\n                };\r\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\r\n                const centerY = y + halfFontSize;\r\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\r\n            } else {\r\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\r\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\r\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\r\n                ctx.beginPath();\r\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\r\n                    addRoundedRectPath(ctx, {\r\n                        x: xBoxLeft,\r\n                        y: yBoxTop,\r\n                        w: boxWidth,\r\n                        h: boxHeight,\r\n                        radius: borderRadius\r\n                    });\r\n                } else {\r\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\r\n                }\r\n                ctx.fill();\r\n                if (lineWidth !== 0) {\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n            ctx.restore();\r\n        };\r\n        const fillText = function(x, y, legendItem) {\r\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\r\n                strikethrough: legendItem.hidden,\r\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\r\n            });\r\n        };\r\n        const isHorizontal = this.isHorizontal();\r\n        const titleHeight = this._computeTitleHeight();\r\n        if (isHorizontal) {\r\n            cursor = {\r\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\r\n                y: this.top + padding + titleHeight,\r\n                line: 0\r\n            };\r\n        } else {\r\n            cursor = {\r\n                x: this.left + padding,\r\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\r\n                line: 0\r\n            };\r\n        }\r\n        overrideTextDirection(this.ctx, opts.textDirection);\r\n        const lineHeight = itemHeight + padding;\r\n        this.legendItems.forEach((legendItem, i)=>{\r\n            ctx.strokeStyle = legendItem.fontColor;\r\n            ctx.fillStyle = legendItem.fontColor;\r\n            const textWidth = ctx.measureText(legendItem.text).width;\r\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\r\n            const width = boxWidth + halfFontSize + textWidth;\r\n            let x = cursor.x;\r\n            let y = cursor.y;\r\n            rtlHelper.setWidth(this.width);\r\n            if (isHorizontal) {\r\n                if (i > 0 && x + width + padding > this.right) {\r\n                    y = cursor.y += lineHeight;\r\n                    cursor.line++;\r\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\r\n                }\r\n            } else if (i > 0 && y + lineHeight > this.bottom) {\r\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\r\n                cursor.line++;\r\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\r\n            }\r\n            const realX = rtlHelper.x(x);\r\n            drawLegendBox(realX, y, legendItem);\r\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\r\n            fillText(rtlHelper.x(x), y, legendItem);\r\n            if (isHorizontal) {\r\n                cursor.x += width + padding;\r\n            } else if (typeof legendItem.text !== 'string') {\r\n                const fontLineHeight = labelFont.lineHeight;\r\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\r\n            } else {\r\n                cursor.y += lineHeight;\r\n            }\r\n        });\r\n        restoreTextDirection(this.ctx, opts.textDirection);\r\n    }\r\n drawTitle() {\r\n        const opts = this.options;\r\n        const titleOpts = opts.title;\r\n        const titleFont = toFont(titleOpts.font);\r\n        const titlePadding = toPadding(titleOpts.padding);\r\n        if (!titleOpts.display) {\r\n            return;\r\n        }\r\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\r\n        const ctx = this.ctx;\r\n        const position = titleOpts.position;\r\n        const halfFontSize = titleFont.size / 2;\r\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\r\n        let y;\r\n        let left = this.left;\r\n        let maxWidth = this.width;\r\n        if (this.isHorizontal()) {\r\n            maxWidth = Math.max(...this.lineWidths);\r\n            y = this.top + topPaddingPlusHalfFontSize;\r\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\r\n        } else {\r\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\r\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\r\n        }\r\n        const x = _alignStartEnd(position, left, left + maxWidth);\r\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\r\n        ctx.textBaseline = 'middle';\r\n        ctx.strokeStyle = titleOpts.color;\r\n        ctx.fillStyle = titleOpts.color;\r\n        ctx.font = titleFont.string;\r\n        renderText(ctx, titleOpts.text, x, y, titleFont);\r\n    }\r\n _computeTitleHeight() {\r\n        const titleOpts = this.options.title;\r\n        const titleFont = toFont(titleOpts.font);\r\n        const titlePadding = toPadding(titleOpts.padding);\r\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\r\n    }\r\n _getLegendItemAt(x, y) {\r\n        let i, hitBox, lh;\r\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\r\n            lh = this.legendHitBoxes;\r\n            for(i = 0; i < lh.length; ++i){\r\n                hitBox = lh[i];\r\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\r\n                    return this.legendItems[i];\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n handleEvent(e) {\r\n        const opts = this.options;\r\n        if (!isListened(e.type, opts)) {\r\n            return;\r\n        }\r\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\r\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\r\n            const previous = this._hoveredItem;\r\n            const sameItem = itemsEqual(previous, hoveredItem);\r\n            if (previous && !sameItem) {\r\n                callback(opts.onLeave, [\r\n                    e,\r\n                    previous,\r\n                    this\r\n                ], this);\r\n            }\r\n            this._hoveredItem = hoveredItem;\r\n            if (hoveredItem && !sameItem) {\r\n                callback(opts.onHover, [\r\n                    e,\r\n                    hoveredItem,\r\n                    this\r\n                ], this);\r\n            }\r\n        } else if (hoveredItem) {\r\n            callback(opts.onClick, [\r\n                e,\r\n                hoveredItem,\r\n                this\r\n            ], this);\r\n        }\r\n    }\r\n}\r\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\r\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\r\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\r\n    return {\r\n        itemWidth,\r\n        itemHeight\r\n    };\r\n}\r\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\r\n    let legendItemText = legendItem.text;\r\n    if (legendItemText && typeof legendItemText !== 'string') {\r\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\r\n    }\r\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\r\n}\r\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\r\n    let itemHeight = _itemHeight;\r\n    if (typeof legendItem.text !== 'string') {\r\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\r\n    }\r\n    return itemHeight;\r\n}\r\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\r\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\r\n    return fontLineHeight * labelHeight;\r\n}\r\nfunction isListened(type, opts) {\r\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\r\n        return true;\r\n    }\r\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nvar plugin_legend = {\r\n    id: 'legend',\r\n _element: Legend,\r\n    start (chart, _args, options) {\r\n        const legend = chart.legend = new Legend({\r\n            ctx: chart.ctx,\r\n            options,\r\n            chart\r\n        });\r\n        layouts.configure(chart, legend, options);\r\n        layouts.addBox(chart, legend);\r\n    },\r\n    stop (chart) {\r\n        layouts.removeBox(chart, chart.legend);\r\n        delete chart.legend;\r\n    },\r\n    beforeUpdate (chart, _args, options) {\r\n        const legend = chart.legend;\r\n        layouts.configure(chart, legend, options);\r\n        legend.options = options;\r\n    },\r\n    afterUpdate (chart) {\r\n        const legend = chart.legend;\r\n        legend.buildLabels();\r\n        legend.adjustHitBoxes();\r\n    },\r\n    afterEvent (chart, args) {\r\n        if (!args.replay) {\r\n            chart.legend.handleEvent(args.event);\r\n        }\r\n    },\r\n    defaults: {\r\n        display: true,\r\n        position: 'top',\r\n        align: 'center',\r\n        fullSize: true,\r\n        reverse: false,\r\n        weight: 1000,\r\n        onClick (e, legendItem, legend) {\r\n            const index = legendItem.datasetIndex;\r\n            const ci = legend.chart;\r\n            if (ci.isDatasetVisible(index)) {\r\n                ci.hide(index);\r\n                legendItem.hidden = true;\r\n            } else {\r\n                ci.show(index);\r\n                legendItem.hidden = false;\r\n            }\r\n        },\r\n        onHover: null,\r\n        onLeave: null,\r\n        labels: {\r\n            color: (ctx)=>ctx.chart.options.color,\r\n            boxWidth: 40,\r\n            padding: 10,\r\n            generateLabels (chart) {\r\n                const datasets = chart.data.datasets;\r\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\r\n                return chart._getSortedDatasetMetas().map((meta)=>{\r\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\r\n                    const borderWidth = toPadding(style.borderWidth);\r\n                    return {\r\n                        text: datasets[meta.index].label,\r\n                        fillStyle: style.backgroundColor,\r\n                        fontColor: color,\r\n                        hidden: !meta.visible,\r\n                        lineCap: style.borderCapStyle,\r\n                        lineDash: style.borderDash,\r\n                        lineDashOffset: style.borderDashOffset,\r\n                        lineJoin: style.borderJoinStyle,\r\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\r\n                        strokeStyle: style.borderColor,\r\n                        pointStyle: pointStyle || style.pointStyle,\r\n                        rotation: style.rotation,\r\n                        textAlign: textAlign || style.textAlign,\r\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\r\n                        datasetIndex: meta.index\r\n                    };\r\n                }, this);\r\n            }\r\n        },\r\n        title: {\r\n            color: (ctx)=>ctx.chart.options.color,\r\n            display: false,\r\n            position: 'center',\r\n            text: ''\r\n        }\r\n    },\r\n    descriptors: {\r\n        _scriptable: (name)=>!name.startsWith('on'),\r\n        labels: {\r\n            _scriptable: (name)=>![\r\n                    'generateLabels',\r\n                    'filter',\r\n                    'sort'\r\n                ].includes(name)\r\n        }\r\n    }\r\n};\r\n\r\nclass Title extends Element {\r\n constructor(config){\r\n        super();\r\n        this.chart = config.chart;\r\n        this.options = config.options;\r\n        this.ctx = config.ctx;\r\n        this._padding = undefined;\r\n        this.top = undefined;\r\n        this.bottom = undefined;\r\n        this.left = undefined;\r\n        this.right = undefined;\r\n        this.width = undefined;\r\n        this.height = undefined;\r\n        this.position = undefined;\r\n        this.weight = undefined;\r\n        this.fullSize = undefined;\r\n    }\r\n    update(maxWidth, maxHeight) {\r\n        const opts = this.options;\r\n        this.left = 0;\r\n        this.top = 0;\r\n        if (!opts.display) {\r\n            this.width = this.height = this.right = this.bottom = 0;\r\n            return;\r\n        }\r\n        this.width = this.right = maxWidth;\r\n        this.height = this.bottom = maxHeight;\r\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\r\n        this._padding = toPadding(opts.padding);\r\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\r\n        if (this.isHorizontal()) {\r\n            this.height = textSize;\r\n        } else {\r\n            this.width = textSize;\r\n        }\r\n    }\r\n    isHorizontal() {\r\n        const pos = this.options.position;\r\n        return pos === 'top' || pos === 'bottom';\r\n    }\r\n    _drawArgs(offset) {\r\n        const { top , left , bottom , right , options  } = this;\r\n        const align = options.align;\r\n        let rotation = 0;\r\n        let maxWidth, titleX, titleY;\r\n        if (this.isHorizontal()) {\r\n            titleX = _alignStartEnd(align, left, right);\r\n            titleY = top + offset;\r\n            maxWidth = right - left;\r\n        } else {\r\n            if (options.position === 'left') {\r\n                titleX = left + offset;\r\n                titleY = _alignStartEnd(align, bottom, top);\r\n                rotation = PI * -0.5;\r\n            } else {\r\n                titleX = right - offset;\r\n                titleY = _alignStartEnd(align, top, bottom);\r\n                rotation = PI * 0.5;\r\n            }\r\n            maxWidth = bottom - top;\r\n        }\r\n        return {\r\n            titleX,\r\n            titleY,\r\n            maxWidth,\r\n            rotation\r\n        };\r\n    }\r\n    draw() {\r\n        const ctx = this.ctx;\r\n        const opts = this.options;\r\n        if (!opts.display) {\r\n            return;\r\n        }\r\n        const fontOpts = toFont(opts.font);\r\n        const lineHeight = fontOpts.lineHeight;\r\n        const offset = lineHeight / 2 + this._padding.top;\r\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\r\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\r\n            color: opts.color,\r\n            maxWidth,\r\n            rotation,\r\n            textAlign: _toLeftRightCenter(opts.align),\r\n            textBaseline: 'middle',\r\n            translation: [\r\n                titleX,\r\n                titleY\r\n            ]\r\n        });\r\n    }\r\n}\r\nfunction createTitle(chart, titleOpts) {\r\n    const title = new Title({\r\n        ctx: chart.ctx,\r\n        options: titleOpts,\r\n        chart\r\n    });\r\n    layouts.configure(chart, title, titleOpts);\r\n    layouts.addBox(chart, title);\r\n    chart.titleBlock = title;\r\n}\r\nvar plugin_title = {\r\n    id: 'title',\r\n _element: Title,\r\n    start (chart, _args, options) {\r\n        createTitle(chart, options);\r\n    },\r\n    stop (chart) {\r\n        const titleBlock = chart.titleBlock;\r\n        layouts.removeBox(chart, titleBlock);\r\n        delete chart.titleBlock;\r\n    },\r\n    beforeUpdate (chart, _args, options) {\r\n        const title = chart.titleBlock;\r\n        layouts.configure(chart, title, options);\r\n        title.options = options;\r\n    },\r\n    defaults: {\r\n        align: 'center',\r\n        display: false,\r\n        font: {\r\n            weight: 'bold'\r\n        },\r\n        fullSize: true,\r\n        padding: 10,\r\n        position: 'top',\r\n        text: '',\r\n        weight: 2000\r\n    },\r\n    defaultRoutes: {\r\n        color: 'color'\r\n    },\r\n    descriptors: {\r\n        _scriptable: true,\r\n        _indexable: false\r\n    }\r\n};\r\n\r\nconst map = new WeakMap();\r\nvar plugin_subtitle = {\r\n    id: 'subtitle',\r\n    start (chart, _args, options) {\r\n        const title = new Title({\r\n            ctx: chart.ctx,\r\n            options,\r\n            chart\r\n        });\r\n        layouts.configure(chart, title, options);\r\n        layouts.addBox(chart, title);\r\n        map.set(chart, title);\r\n    },\r\n    stop (chart) {\r\n        layouts.removeBox(chart, map.get(chart));\r\n        map.delete(chart);\r\n    },\r\n    beforeUpdate (chart, _args, options) {\r\n        const title = map.get(chart);\r\n        layouts.configure(chart, title, options);\r\n        title.options = options;\r\n    },\r\n    defaults: {\r\n        align: 'center',\r\n        display: false,\r\n        font: {\r\n            weight: 'normal'\r\n        },\r\n        fullSize: true,\r\n        padding: 0,\r\n        position: 'top',\r\n        text: '',\r\n        weight: 1500\r\n    },\r\n    defaultRoutes: {\r\n        color: 'color'\r\n    },\r\n    descriptors: {\r\n        _scriptable: true,\r\n        _indexable: false\r\n    }\r\n};\r\n\r\nconst positioners = {\r\n average (items) {\r\n        if (!items.length) {\r\n            return false;\r\n        }\r\n        let i, len;\r\n        let x = 0;\r\n        let y = 0;\r\n        let count = 0;\r\n        for(i = 0, len = items.length; i < len; ++i){\r\n            const el = items[i].element;\r\n            if (el && el.hasValue()) {\r\n                const pos = el.tooltipPosition();\r\n                x += pos.x;\r\n                y += pos.y;\r\n                ++count;\r\n            }\r\n        }\r\n        return {\r\n            x: x / count,\r\n            y: y / count\r\n        };\r\n    },\r\n nearest (items, eventPosition) {\r\n        if (!items.length) {\r\n            return false;\r\n        }\r\n        let x = eventPosition.x;\r\n        let y = eventPosition.y;\r\n        let minDistance = Number.POSITIVE_INFINITY;\r\n        let i, len, nearestElement;\r\n        for(i = 0, len = items.length; i < len; ++i){\r\n            const el = items[i].element;\r\n            if (el && el.hasValue()) {\r\n                const center = el.getCenterPoint();\r\n                const d = distanceBetweenPoints(eventPosition, center);\r\n                if (d < minDistance) {\r\n                    minDistance = d;\r\n                    nearestElement = el;\r\n                }\r\n            }\r\n        }\r\n        if (nearestElement) {\r\n            const tp = nearestElement.tooltipPosition();\r\n            x = tp.x;\r\n            y = tp.y;\r\n        }\r\n        return {\r\n            x,\r\n            y\r\n        };\r\n    }\r\n};\r\nfunction pushOrConcat(base, toPush) {\r\n    if (toPush) {\r\n        if (isArray(toPush)) {\r\n            Array.prototype.push.apply(base, toPush);\r\n        } else {\r\n            base.push(toPush);\r\n        }\r\n    }\r\n    return base;\r\n}\r\n function splitNewlines(str) {\r\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\r\n        return str.split('\\n');\r\n    }\r\n    return str;\r\n}\r\n function createTooltipItem(chart, item) {\r\n    const { element , datasetIndex , index  } = item;\r\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\r\n    const { label , value  } = controller.getLabelAndValue(index);\r\n    return {\r\n        chart,\r\n        label,\r\n        parsed: controller.getParsed(index),\r\n        raw: chart.data.datasets[datasetIndex].data[index],\r\n        formattedValue: value,\r\n        dataset: controller.getDataset(),\r\n        dataIndex: index,\r\n        datasetIndex,\r\n        element\r\n    };\r\n}\r\n function getTooltipSize(tooltip, options) {\r\n    const ctx = tooltip.chart.ctx;\r\n    const { body , footer , title  } = tooltip;\r\n    const { boxWidth , boxHeight  } = options;\r\n    const bodyFont = toFont(options.bodyFont);\r\n    const titleFont = toFont(options.titleFont);\r\n    const footerFont = toFont(options.footerFont);\r\n    const titleLineCount = title.length;\r\n    const footerLineCount = footer.length;\r\n    const bodyLineItemCount = body.length;\r\n    const padding = toPadding(options.padding);\r\n    let height = padding.height;\r\n    let width = 0;\r\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\r\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\r\n    if (titleLineCount) {\r\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\r\n    }\r\n    if (combinedBodyLength) {\r\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\r\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\r\n    }\r\n    if (footerLineCount) {\r\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\r\n    }\r\n    let widthPadding = 0;\r\n    const maxLineWidth = function(line) {\r\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\r\n    };\r\n    ctx.save();\r\n    ctx.font = titleFont.string;\r\n    each(tooltip.title, maxLineWidth);\r\n    ctx.font = bodyFont.string;\r\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\r\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\r\n    each(body, (bodyItem)=>{\r\n        each(bodyItem.before, maxLineWidth);\r\n        each(bodyItem.lines, maxLineWidth);\r\n        each(bodyItem.after, maxLineWidth);\r\n    });\r\n    widthPadding = 0;\r\n    ctx.font = footerFont.string;\r\n    each(tooltip.footer, maxLineWidth);\r\n    ctx.restore();\r\n    width += padding.width;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\nfunction determineYAlign(chart, size) {\r\n    const { y , height  } = size;\r\n    if (y < height / 2) {\r\n        return 'top';\r\n    } else if (y > chart.height - height / 2) {\r\n        return 'bottom';\r\n    }\r\n    return 'center';\r\n}\r\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\r\n    const { x , width  } = size;\r\n    const caret = options.caretSize + options.caretPadding;\r\n    if (xAlign === 'left' && x + width + caret > chart.width) {\r\n        return true;\r\n    }\r\n    if (xAlign === 'right' && x - width - caret < 0) {\r\n        return true;\r\n    }\r\n}\r\nfunction determineXAlign(chart, options, size, yAlign) {\r\n    const { x , width  } = size;\r\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\r\n    let xAlign = 'center';\r\n    if (yAlign === 'center') {\r\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\r\n    } else if (x <= width / 2) {\r\n        xAlign = 'left';\r\n    } else if (x >= chartWidth - width / 2) {\r\n        xAlign = 'right';\r\n    }\r\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\r\n        xAlign = 'center';\r\n    }\r\n    return xAlign;\r\n}\r\n function determineAlignment(chart, options, size) {\r\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\r\n    return {\r\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\r\n        yAlign\r\n    };\r\n}\r\nfunction alignX(size, xAlign) {\r\n    let { x , width  } = size;\r\n    if (xAlign === 'right') {\r\n        x -= width;\r\n    } else if (xAlign === 'center') {\r\n        x -= width / 2;\r\n    }\r\n    return x;\r\n}\r\nfunction alignY(size, yAlign, paddingAndSize) {\r\n    let { y , height  } = size;\r\n    if (yAlign === 'top') {\r\n        y += paddingAndSize;\r\n    } else if (yAlign === 'bottom') {\r\n        y -= height + paddingAndSize;\r\n    } else {\r\n        y -= height / 2;\r\n    }\r\n    return y;\r\n}\r\n function getBackgroundPoint(options, size, alignment, chart) {\r\n    const { caretSize , caretPadding , cornerRadius  } = options;\r\n    const { xAlign , yAlign  } = alignment;\r\n    const paddingAndSize = caretSize + caretPadding;\r\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\r\n    let x = alignX(size, xAlign);\r\n    const y = alignY(size, yAlign, paddingAndSize);\r\n    if (yAlign === 'center') {\r\n        if (xAlign === 'left') {\r\n            x += paddingAndSize;\r\n        } else if (xAlign === 'right') {\r\n            x -= paddingAndSize;\r\n        }\r\n    } else if (xAlign === 'left') {\r\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\r\n    } else if (xAlign === 'right') {\r\n        x += Math.max(topRight, bottomRight) + caretSize;\r\n    }\r\n    return {\r\n        x: _limitValue(x, 0, chart.width - size.width),\r\n        y: _limitValue(y, 0, chart.height - size.height)\r\n    };\r\n}\r\nfunction getAlignedX(tooltip, align, options) {\r\n    const padding = toPadding(options.padding);\r\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\r\n}\r\n function getBeforeAfterBodyLines(callback) {\r\n    return pushOrConcat([], splitNewlines(callback));\r\n}\r\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\r\n    return createContext(parent, {\r\n        tooltip,\r\n        tooltipItems,\r\n        type: 'tooltip'\r\n    });\r\n}\r\nfunction overrideCallbacks(callbacks, context) {\r\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\r\n    return override ? callbacks.override(override) : callbacks;\r\n}\r\nconst defaultCallbacks = {\r\n    beforeTitle: noop,\r\n    title (tooltipItems) {\r\n        if (tooltipItems.length > 0) {\r\n            const item = tooltipItems[0];\r\n            const labels = item.chart.data.labels;\r\n            const labelCount = labels ? labels.length : 0;\r\n            if (this && this.options && this.options.mode === 'dataset') {\r\n                return item.dataset.label || '';\r\n            } else if (item.label) {\r\n                return item.label;\r\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\r\n                return labels[item.dataIndex];\r\n            }\r\n        }\r\n        return '';\r\n    },\r\n    afterTitle: noop,\r\n    beforeBody: noop,\r\n    beforeLabel: noop,\r\n    label (tooltipItem) {\r\n        if (this && this.options && this.options.mode === 'dataset') {\r\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\r\n        }\r\n        let label = tooltipItem.dataset.label || '';\r\n        if (label) {\r\n            label += ': ';\r\n        }\r\n        const value = tooltipItem.formattedValue;\r\n        if (!isNullOrUndef(value)) {\r\n            label += value;\r\n        }\r\n        return label;\r\n    },\r\n    labelColor (tooltipItem) {\r\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n        return {\r\n            borderColor: options.borderColor,\r\n            backgroundColor: options.backgroundColor,\r\n            borderWidth: options.borderWidth,\r\n            borderDash: options.borderDash,\r\n            borderDashOffset: options.borderDashOffset,\r\n            borderRadius: 0\r\n        };\r\n    },\r\n    labelTextColor () {\r\n        return this.options.bodyColor;\r\n    },\r\n    labelPointStyle (tooltipItem) {\r\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\r\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\r\n        return {\r\n            pointStyle: options.pointStyle,\r\n            rotation: options.rotation\r\n        };\r\n    },\r\n    afterLabel: noop,\r\n    afterBody: noop,\r\n    beforeFooter: noop,\r\n    footer: noop,\r\n    afterFooter: noop\r\n};\r\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\r\n    const result = callbacks[name].call(ctx, arg);\r\n    if (typeof result === 'undefined') {\r\n        return defaultCallbacks[name].call(ctx, arg);\r\n    }\r\n    return result;\r\n}\r\nclass Tooltip extends Element {\r\n static positioners = positioners;\r\n    constructor(config){\r\n        super();\r\n        this.opacity = 0;\r\n        this._active = [];\r\n        this._eventPosition = undefined;\r\n        this._size = undefined;\r\n        this._cachedAnimations = undefined;\r\n        this._tooltipItems = [];\r\n        this.$animations = undefined;\r\n        this.$context = undefined;\r\n        this.chart = config.chart;\r\n        this.options = config.options;\r\n        this.dataPoints = undefined;\r\n        this.title = undefined;\r\n        this.beforeBody = undefined;\r\n        this.body = undefined;\r\n        this.afterBody = undefined;\r\n        this.footer = undefined;\r\n        this.xAlign = undefined;\r\n        this.yAlign = undefined;\r\n        this.x = undefined;\r\n        this.y = undefined;\r\n        this.height = undefined;\r\n        this.width = undefined;\r\n        this.caretX = undefined;\r\n        this.caretY = undefined;\r\n        this.labelColors = undefined;\r\n        this.labelPointStyles = undefined;\r\n        this.labelTextColors = undefined;\r\n    }\r\n    initialize(options) {\r\n        this.options = options;\r\n        this._cachedAnimations = undefined;\r\n        this.$context = undefined;\r\n    }\r\n _resolveAnimations() {\r\n        const cached = this._cachedAnimations;\r\n        if (cached) {\r\n            return cached;\r\n        }\r\n        const chart = this.chart;\r\n        const options = this.options.setContext(this.getContext());\r\n        const opts = options.enabled && chart.options.animation && options.animations;\r\n        const animations = new Animations(this.chart, opts);\r\n        if (opts._cacheable) {\r\n            this._cachedAnimations = Object.freeze(animations);\r\n        }\r\n        return animations;\r\n    }\r\n getContext() {\r\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\r\n    }\r\n    getTitle(context, options) {\r\n        const { callbacks  } = options;\r\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\r\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\r\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\r\n        let lines = [];\r\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\r\n        lines = pushOrConcat(lines, splitNewlines(title));\r\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\r\n        return lines;\r\n    }\r\n    getBeforeBody(tooltipItems, options) {\r\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\r\n    }\r\n    getBody(tooltipItems, options) {\r\n        const { callbacks  } = options;\r\n        const bodyItems = [];\r\n        each(tooltipItems, (context)=>{\r\n            const bodyItem = {\r\n                before: [],\r\n                lines: [],\r\n                after: []\r\n            };\r\n            const scoped = overrideCallbacks(callbacks, context);\r\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\r\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\r\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\r\n            bodyItems.push(bodyItem);\r\n        });\r\n        return bodyItems;\r\n    }\r\n    getAfterBody(tooltipItems, options) {\r\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\r\n    }\r\n    getFooter(tooltipItems, options) {\r\n        const { callbacks  } = options;\r\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\r\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\r\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\r\n        let lines = [];\r\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\r\n        lines = pushOrConcat(lines, splitNewlines(footer));\r\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\r\n        return lines;\r\n    }\r\n _createItems(options) {\r\n        const active = this._active;\r\n        const data = this.chart.data;\r\n        const labelColors = [];\r\n        const labelPointStyles = [];\r\n        const labelTextColors = [];\r\n        let tooltipItems = [];\r\n        let i, len;\r\n        for(i = 0, len = active.length; i < len; ++i){\r\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\r\n        }\r\n        if (options.filter) {\r\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\r\n        }\r\n        if (options.itemSort) {\r\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\r\n        }\r\n        each(tooltipItems, (context)=>{\r\n            const scoped = overrideCallbacks(options.callbacks, context);\r\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\r\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\r\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\r\n        });\r\n        this.labelColors = labelColors;\r\n        this.labelPointStyles = labelPointStyles;\r\n        this.labelTextColors = labelTextColors;\r\n        this.dataPoints = tooltipItems;\r\n        return tooltipItems;\r\n    }\r\n    update(changed, replay) {\r\n        const options = this.options.setContext(this.getContext());\r\n        const active = this._active;\r\n        let properties;\r\n        let tooltipItems = [];\r\n        if (!active.length) {\r\n            if (this.opacity !== 0) {\r\n                properties = {\r\n                    opacity: 0\r\n                };\r\n            }\r\n        } else {\r\n            const position = positioners[options.position].call(this, active, this._eventPosition);\r\n            tooltipItems = this._createItems(options);\r\n            this.title = this.getTitle(tooltipItems, options);\r\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\r\n            this.body = this.getBody(tooltipItems, options);\r\n            this.afterBody = this.getAfterBody(tooltipItems, options);\r\n            this.footer = this.getFooter(tooltipItems, options);\r\n            const size = this._size = getTooltipSize(this, options);\r\n            const positionAndSize = Object.assign({}, position, size);\r\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\r\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\r\n            this.xAlign = alignment.xAlign;\r\n            this.yAlign = alignment.yAlign;\r\n            properties = {\r\n                opacity: 1,\r\n                x: backgroundPoint.x,\r\n                y: backgroundPoint.y,\r\n                width: size.width,\r\n                height: size.height,\r\n                caretX: position.x,\r\n                caretY: position.y\r\n            };\r\n        }\r\n        this._tooltipItems = tooltipItems;\r\n        this.$context = undefined;\r\n        if (properties) {\r\n            this._resolveAnimations().update(this, properties);\r\n        }\r\n        if (changed && options.external) {\r\n            options.external.call(this, {\r\n                chart: this.chart,\r\n                tooltip: this,\r\n                replay\r\n            });\r\n        }\r\n    }\r\n    drawCaret(tooltipPoint, ctx, size, options) {\r\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\r\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\r\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\r\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\r\n    }\r\n    getCaretPosition(tooltipPoint, size, options) {\r\n        const { xAlign , yAlign  } = this;\r\n        const { caretSize , cornerRadius  } = options;\r\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\r\n        const { x: ptX , y: ptY  } = tooltipPoint;\r\n        const { width , height  } = size;\r\n        let x1, x2, x3, y1, y2, y3;\r\n        if (yAlign === 'center') {\r\n            y2 = ptY + height / 2;\r\n            if (xAlign === 'left') {\r\n                x1 = ptX;\r\n                x2 = x1 - caretSize;\r\n                y1 = y2 + caretSize;\r\n                y3 = y2 - caretSize;\r\n            } else {\r\n                x1 = ptX + width;\r\n                x2 = x1 + caretSize;\r\n                y1 = y2 - caretSize;\r\n                y3 = y2 + caretSize;\r\n            }\r\n            x3 = x1;\r\n        } else {\r\n            if (xAlign === 'left') {\r\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\r\n            } else if (xAlign === 'right') {\r\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\r\n            } else {\r\n                x2 = this.caretX;\r\n            }\r\n            if (yAlign === 'top') {\r\n                y1 = ptY;\r\n                y2 = y1 - caretSize;\r\n                x1 = x2 - caretSize;\r\n                x3 = x2 + caretSize;\r\n            } else {\r\n                y1 = ptY + height;\r\n                y2 = y1 + caretSize;\r\n                x1 = x2 + caretSize;\r\n                x3 = x2 - caretSize;\r\n            }\r\n            y3 = y1;\r\n        }\r\n        return {\r\n            x1,\r\n            x2,\r\n            x3,\r\n            y1,\r\n            y2,\r\n            y3\r\n        };\r\n    }\r\n    drawTitle(pt, ctx, options) {\r\n        const title = this.title;\r\n        const length = title.length;\r\n        let titleFont, titleSpacing, i;\r\n        if (length) {\r\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n            pt.x = getAlignedX(this, options.titleAlign, options);\r\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\r\n            ctx.textBaseline = 'middle';\r\n            titleFont = toFont(options.titleFont);\r\n            titleSpacing = options.titleSpacing;\r\n            ctx.fillStyle = options.titleColor;\r\n            ctx.font = titleFont.string;\r\n            for(i = 0; i < length; ++i){\r\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\r\n                pt.y += titleFont.lineHeight + titleSpacing;\r\n                if (i + 1 === length) {\r\n                    pt.y += options.titleMarginBottom - titleSpacing;\r\n                }\r\n            }\r\n        }\r\n    }\r\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\r\n        const labelColor = this.labelColors[i];\r\n        const labelPointStyle = this.labelPointStyles[i];\r\n        const { boxHeight , boxWidth  } = options;\r\n        const bodyFont = toFont(options.bodyFont);\r\n        const colorX = getAlignedX(this, 'left', options);\r\n        const rtlColorX = rtlHelper.x(colorX);\r\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\r\n        const colorY = pt.y + yOffSet;\r\n        if (options.usePointStyle) {\r\n            const drawOptions = {\r\n                radius: Math.min(boxWidth, boxHeight) / 2,\r\n                pointStyle: labelPointStyle.pointStyle,\r\n                rotation: labelPointStyle.rotation,\r\n                borderWidth: 1\r\n            };\r\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\r\n            const centerY = colorY + boxHeight / 2;\r\n            ctx.strokeStyle = options.multiKeyBackground;\r\n            ctx.fillStyle = options.multiKeyBackground;\r\n            drawPoint(ctx, drawOptions, centerX, centerY);\r\n            ctx.strokeStyle = labelColor.borderColor;\r\n            ctx.fillStyle = labelColor.backgroundColor;\r\n            drawPoint(ctx, drawOptions, centerX, centerY);\r\n        } else {\r\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\r\n            ctx.strokeStyle = labelColor.borderColor;\r\n            ctx.setLineDash(labelColor.borderDash || []);\r\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\r\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\r\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\r\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\r\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\r\n                ctx.beginPath();\r\n                ctx.fillStyle = options.multiKeyBackground;\r\n                addRoundedRectPath(ctx, {\r\n                    x: outerX,\r\n                    y: colorY,\r\n                    w: boxWidth,\r\n                    h: boxHeight,\r\n                    radius: borderRadius\r\n                });\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.fillStyle = labelColor.backgroundColor;\r\n                ctx.beginPath();\r\n                addRoundedRectPath(ctx, {\r\n                    x: innerX,\r\n                    y: colorY + 1,\r\n                    w: boxWidth - 2,\r\n                    h: boxHeight - 2,\r\n                    radius: borderRadius\r\n                });\r\n                ctx.fill();\r\n            } else {\r\n                ctx.fillStyle = options.multiKeyBackground;\r\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\r\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\r\n                ctx.fillStyle = labelColor.backgroundColor;\r\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\r\n            }\r\n        }\r\n        ctx.fillStyle = this.labelTextColors[i];\r\n    }\r\n    drawBody(pt, ctx, options) {\r\n        const { body  } = this;\r\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\r\n        const bodyFont = toFont(options.bodyFont);\r\n        let bodyLineHeight = bodyFont.lineHeight;\r\n        let xLinePadding = 0;\r\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n        const fillLineOfText = function(line) {\r\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\r\n            pt.y += bodyLineHeight + bodySpacing;\r\n        };\r\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\r\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\r\n        ctx.textAlign = bodyAlign;\r\n        ctx.textBaseline = 'middle';\r\n        ctx.font = bodyFont.string;\r\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\r\n        ctx.fillStyle = options.bodyColor;\r\n        each(this.beforeBody, fillLineOfText);\r\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\r\n        for(i = 0, ilen = body.length; i < ilen; ++i){\r\n            bodyItem = body[i];\r\n            textColor = this.labelTextColors[i];\r\n            ctx.fillStyle = textColor;\r\n            each(bodyItem.before, fillLineOfText);\r\n            lines = bodyItem.lines;\r\n            if (displayColors && lines.length) {\r\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\r\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\r\n            }\r\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\r\n                fillLineOfText(lines[j]);\r\n                bodyLineHeight = bodyFont.lineHeight;\r\n            }\r\n            each(bodyItem.after, fillLineOfText);\r\n        }\r\n        xLinePadding = 0;\r\n        bodyLineHeight = bodyFont.lineHeight;\r\n        each(this.afterBody, fillLineOfText);\r\n        pt.y -= bodySpacing;\r\n    }\r\n    drawFooter(pt, ctx, options) {\r\n        const footer = this.footer;\r\n        const length = footer.length;\r\n        let footerFont, i;\r\n        if (length) {\r\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\r\n            pt.x = getAlignedX(this, options.footerAlign, options);\r\n            pt.y += options.footerMarginTop;\r\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\r\n            ctx.textBaseline = 'middle';\r\n            footerFont = toFont(options.footerFont);\r\n            ctx.fillStyle = options.footerColor;\r\n            ctx.font = footerFont.string;\r\n            for(i = 0; i < length; ++i){\r\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\r\n                pt.y += footerFont.lineHeight + options.footerSpacing;\r\n            }\r\n        }\r\n    }\r\n    drawBackground(pt, ctx, tooltipSize, options) {\r\n        const { xAlign , yAlign  } = this;\r\n        const { x , y  } = pt;\r\n        const { width , height  } = tooltipSize;\r\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\r\n        ctx.fillStyle = options.backgroundColor;\r\n        ctx.strokeStyle = options.borderColor;\r\n        ctx.lineWidth = options.borderWidth;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x + topLeft, y);\r\n        if (yAlign === 'top') {\r\n            this.drawCaret(pt, ctx, tooltipSize, options);\r\n        }\r\n        ctx.lineTo(x + width - topRight, y);\r\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\r\n        if (yAlign === 'center' && xAlign === 'right') {\r\n            this.drawCaret(pt, ctx, tooltipSize, options);\r\n        }\r\n        ctx.lineTo(x + width, y + height - bottomRight);\r\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\r\n        if (yAlign === 'bottom') {\r\n            this.drawCaret(pt, ctx, tooltipSize, options);\r\n        }\r\n        ctx.lineTo(x + bottomLeft, y + height);\r\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\r\n        if (yAlign === 'center' && xAlign === 'left') {\r\n            this.drawCaret(pt, ctx, tooltipSize, options);\r\n        }\r\n        ctx.lineTo(x, y + topLeft);\r\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n        if (options.borderWidth > 0) {\r\n            ctx.stroke();\r\n        }\r\n    }\r\n _updateAnimationTarget(options) {\r\n        const chart = this.chart;\r\n        const anims = this.$animations;\r\n        const animX = anims && anims.x;\r\n        const animY = anims && anims.y;\r\n        if (animX || animY) {\r\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\r\n            if (!position) {\r\n                return;\r\n            }\r\n            const size = this._size = getTooltipSize(this, options);\r\n            const positionAndSize = Object.assign({}, position, this._size);\r\n            const alignment = determineAlignment(chart, options, positionAndSize);\r\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\r\n            if (animX._to !== point.x || animY._to !== point.y) {\r\n                this.xAlign = alignment.xAlign;\r\n                this.yAlign = alignment.yAlign;\r\n                this.width = size.width;\r\n                this.height = size.height;\r\n                this.caretX = position.x;\r\n                this.caretY = position.y;\r\n                this._resolveAnimations().update(this, point);\r\n            }\r\n        }\r\n    }\r\n _willRender() {\r\n        return !!this.opacity;\r\n    }\r\n    draw(ctx) {\r\n        const options = this.options.setContext(this.getContext());\r\n        let opacity = this.opacity;\r\n        if (!opacity) {\r\n            return;\r\n        }\r\n        this._updateAnimationTarget(options);\r\n        const tooltipSize = {\r\n            width: this.width,\r\n            height: this.height\r\n        };\r\n        const pt = {\r\n            x: this.x,\r\n            y: this.y\r\n        };\r\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\r\n        const padding = toPadding(options.padding);\r\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\r\n        if (options.enabled && hasTooltipContent) {\r\n            ctx.save();\r\n            ctx.globalAlpha = opacity;\r\n            this.drawBackground(pt, ctx, tooltipSize, options);\r\n            overrideTextDirection(ctx, options.textDirection);\r\n            pt.y += padding.top;\r\n            this.drawTitle(pt, ctx, options);\r\n            this.drawBody(pt, ctx, options);\r\n            this.drawFooter(pt, ctx, options);\r\n            restoreTextDirection(ctx, options.textDirection);\r\n            ctx.restore();\r\n        }\r\n    }\r\n getActiveElements() {\r\n        return this._active || [];\r\n    }\r\n setActiveElements(activeElements, eventPosition) {\r\n        const lastActive = this._active;\r\n        const active = activeElements.map(({ datasetIndex , index  })=>{\r\n            const meta = this.chart.getDatasetMeta(datasetIndex);\r\n            if (!meta) {\r\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\r\n            }\r\n            return {\r\n                datasetIndex,\r\n                element: meta.data[index],\r\n                index\r\n            };\r\n        });\r\n        const changed = !_elementsEqual(lastActive, active);\r\n        const positionChanged = this._positionChanged(active, eventPosition);\r\n        if (changed || positionChanged) {\r\n            this._active = active;\r\n            this._eventPosition = eventPosition;\r\n            this._ignoreReplayEvents = true;\r\n            this.update(true);\r\n        }\r\n    }\r\n handleEvent(e, replay, inChartArea = true) {\r\n        if (replay && this._ignoreReplayEvents) {\r\n            return false;\r\n        }\r\n        this._ignoreReplayEvents = false;\r\n        const options = this.options;\r\n        const lastActive = this._active || [];\r\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\r\n        const positionChanged = this._positionChanged(active, e);\r\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\r\n        if (changed) {\r\n            this._active = active;\r\n            if (options.enabled || options.external) {\r\n                this._eventPosition = {\r\n                    x: e.x,\r\n                    y: e.y\r\n                };\r\n                this.update(true, replay);\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n _getActiveElements(e, lastActive, replay, inChartArea) {\r\n        const options = this.options;\r\n        if (e.type === 'mouseout') {\r\n            return [];\r\n        }\r\n        if (!inChartArea) {\r\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\r\n        }\r\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\r\n        if (options.reverse) {\r\n            active.reverse();\r\n        }\r\n        return active;\r\n    }\r\n _positionChanged(active, e) {\r\n        const { caretX , caretY , options  } = this;\r\n        const position = positioners[options.position].call(this, active, e);\r\n        return position !== false && (caretX !== position.x || caretY !== position.y);\r\n    }\r\n}\r\nvar plugin_tooltip = {\r\n    id: 'tooltip',\r\n    _element: Tooltip,\r\n    positioners,\r\n    afterInit (chart, _args, options) {\r\n        if (options) {\r\n            chart.tooltip = new Tooltip({\r\n                chart,\r\n                options\r\n            });\r\n        }\r\n    },\r\n    beforeUpdate (chart, _args, options) {\r\n        if (chart.tooltip) {\r\n            chart.tooltip.initialize(options);\r\n        }\r\n    },\r\n    reset (chart, _args, options) {\r\n        if (chart.tooltip) {\r\n            chart.tooltip.initialize(options);\r\n        }\r\n    },\r\n    afterDraw (chart) {\r\n        const tooltip = chart.tooltip;\r\n        if (tooltip && tooltip._willRender()) {\r\n            const args = {\r\n                tooltip\r\n            };\r\n            if (chart.notifyPlugins('beforeTooltipDraw', {\r\n                ...args,\r\n                cancelable: true\r\n            }) === false) {\r\n                return;\r\n            }\r\n            tooltip.draw(chart.ctx);\r\n            chart.notifyPlugins('afterTooltipDraw', args);\r\n        }\r\n    },\r\n    afterEvent (chart, args) {\r\n        if (chart.tooltip) {\r\n            const useFinalPosition = args.replay;\r\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\r\n                args.changed = true;\r\n            }\r\n        }\r\n    },\r\n    defaults: {\r\n        enabled: true,\r\n        external: null,\r\n        position: 'average',\r\n        backgroundColor: 'rgba(0,0,0,0.8)',\r\n        titleColor: '#fff',\r\n        titleFont: {\r\n            weight: 'bold'\r\n        },\r\n        titleSpacing: 2,\r\n        titleMarginBottom: 6,\r\n        titleAlign: 'left',\r\n        bodyColor: '#fff',\r\n        bodySpacing: 2,\r\n        bodyFont: {},\r\n        bodyAlign: 'left',\r\n        footerColor: '#fff',\r\n        footerSpacing: 2,\r\n        footerMarginTop: 6,\r\n        footerFont: {\r\n            weight: 'bold'\r\n        },\r\n        footerAlign: 'left',\r\n        padding: 6,\r\n        caretPadding: 2,\r\n        caretSize: 5,\r\n        cornerRadius: 6,\r\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\r\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\r\n        multiKeyBackground: '#fff',\r\n        displayColors: true,\r\n        boxPadding: 0,\r\n        borderColor: 'rgba(0,0,0,0)',\r\n        borderWidth: 0,\r\n        animation: {\r\n            duration: 400,\r\n            easing: 'easeOutQuart'\r\n        },\r\n        animations: {\r\n            numbers: {\r\n                type: 'number',\r\n                properties: [\r\n                    'x',\r\n                    'y',\r\n                    'width',\r\n                    'height',\r\n                    'caretX',\r\n                    'caretY'\r\n                ]\r\n            },\r\n            opacity: {\r\n                easing: 'linear',\r\n                duration: 200\r\n            }\r\n        },\r\n        callbacks: defaultCallbacks\r\n    },\r\n    defaultRoutes: {\r\n        bodyFont: 'font',\r\n        footerFont: 'font',\r\n        titleFont: 'font'\r\n    },\r\n    descriptors: {\r\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\r\n        _indexable: false,\r\n        callbacks: {\r\n            _scriptable: false,\r\n            _indexable: false\r\n        },\r\n        animation: {\r\n            _fallback: false\r\n        },\r\n        animations: {\r\n            _fallback: 'animation'\r\n        }\r\n    },\r\n    additionalOptionScopes: [\r\n        'interaction'\r\n    ]\r\n};\r\n\r\nvar plugins = /*#__PURE__*/Object.freeze({\r\n__proto__: null,\r\nColors: plugin_colors,\r\nDecimation: plugin_decimation,\r\nFiller: index,\r\nLegend: plugin_legend,\r\nSubTitle: plugin_subtitle,\r\nTitle: plugin_title,\r\nTooltip: plugin_tooltip\r\n});\r\n\r\nconst addIfString = (labels, raw, index, addedLabels)=>{\r\n    if (typeof raw === 'string') {\r\n        index = labels.push(raw) - 1;\r\n        addedLabels.unshift({\r\n            index,\r\n            label: raw\r\n        });\r\n    } else if (isNaN(raw)) {\r\n        index = null;\r\n    }\r\n    return index;\r\n};\r\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\r\n    const first = labels.indexOf(raw);\r\n    if (first === -1) {\r\n        return addIfString(labels, raw, index, addedLabels);\r\n    }\r\n    const last = labels.lastIndexOf(raw);\r\n    return first !== last ? index : first;\r\n}\r\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\r\nfunction _getLabelForValue(value) {\r\n    const labels = this.getLabels();\r\n    if (value >= 0 && value < labels.length) {\r\n        return labels[value];\r\n    }\r\n    return value;\r\n}\r\nclass CategoryScale extends Scale {\r\n    static id = 'category';\r\n static defaults = {\r\n        ticks: {\r\n            callback: _getLabelForValue\r\n        }\r\n    };\r\n    constructor(cfg){\r\n        super(cfg);\r\n         this._startValue = undefined;\r\n        this._valueRange = 0;\r\n        this._addedLabels = [];\r\n    }\r\n    init(scaleOptions) {\r\n        const added = this._addedLabels;\r\n        if (added.length) {\r\n            const labels = this.getLabels();\r\n            for (const { index , label  } of added){\r\n                if (labels[index] === label) {\r\n                    labels.splice(index, 1);\r\n                }\r\n            }\r\n            this._addedLabels = [];\r\n        }\r\n        super.init(scaleOptions);\r\n    }\r\n    parse(raw, index) {\r\n        if (isNullOrUndef(raw)) {\r\n            return null;\r\n        }\r\n        const labels = this.getLabels();\r\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\r\n        return validIndex(index, labels.length - 1);\r\n    }\r\n    determineDataLimits() {\r\n        const { minDefined , maxDefined  } = this.getUserBounds();\r\n        let { min , max  } = this.getMinMax(true);\r\n        if (this.options.bounds === 'ticks') {\r\n            if (!minDefined) {\r\n                min = 0;\r\n            }\r\n            if (!maxDefined) {\r\n                max = this.getLabels().length - 1;\r\n            }\r\n        }\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    buildTicks() {\r\n        const min = this.min;\r\n        const max = this.max;\r\n        const offset = this.options.offset;\r\n        const ticks = [];\r\n        let labels = this.getLabels();\r\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\r\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\r\n        this._startValue = this.min - (offset ? 0.5 : 0);\r\n        for(let value = min; value <= max; value++){\r\n            ticks.push({\r\n                value\r\n            });\r\n        }\r\n        return ticks;\r\n    }\r\n    getLabelForValue(value) {\r\n        return _getLabelForValue.call(this, value);\r\n    }\r\n configure() {\r\n        super.configure();\r\n        if (!this.isHorizontal()) {\r\n            this._reversePixels = !this._reversePixels;\r\n        }\r\n    }\r\n    getPixelForValue(value) {\r\n        if (typeof value !== 'number') {\r\n            value = this.parse(value);\r\n        }\r\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n    }\r\n    getPixelForTick(index) {\r\n        const ticks = this.ticks;\r\n        if (index < 0 || index > ticks.length - 1) {\r\n            return null;\r\n        }\r\n        return this.getPixelForValue(ticks[index].value);\r\n    }\r\n    getValueForPixel(pixel) {\r\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\r\n    }\r\n    getBasePixel() {\r\n        return this.bottom;\r\n    }\r\n}\r\n\r\nfunction generateTicks$1(generationOptions, dataRange) {\r\n    const ticks = [];\r\n    const MIN_SPACING = 1e-14;\r\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\r\n    const unit = step || 1;\r\n    const maxSpaces = maxTicks - 1;\r\n    const { min: rmin , max: rmax  } = dataRange;\r\n    const minDefined = !isNullOrUndef(min);\r\n    const maxDefined = !isNullOrUndef(max);\r\n    const countDefined = !isNullOrUndef(count);\r\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\r\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\r\n    let factor, niceMin, niceMax, numSpaces;\r\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\r\n        return [\r\n            {\r\n                value: rmin\r\n            },\r\n            {\r\n                value: rmax\r\n            }\r\n        ];\r\n    }\r\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\r\n    if (numSpaces > maxSpaces) {\r\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\r\n    }\r\n    if (!isNullOrUndef(precision)) {\r\n        factor = Math.pow(10, precision);\r\n        spacing = Math.ceil(spacing * factor) / factor;\r\n    }\r\n    if (bounds === 'ticks') {\r\n        niceMin = Math.floor(rmin / spacing) * spacing;\r\n        niceMax = Math.ceil(rmax / spacing) * spacing;\r\n    } else {\r\n        niceMin = rmin;\r\n        niceMax = rmax;\r\n    }\r\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\r\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\r\n        spacing = (max - min) / numSpaces;\r\n        niceMin = min;\r\n        niceMax = max;\r\n    } else if (countDefined) {\r\n        niceMin = minDefined ? min : niceMin;\r\n        niceMax = maxDefined ? max : niceMax;\r\n        numSpaces = count - 1;\r\n        spacing = (niceMax - niceMin) / numSpaces;\r\n    } else {\r\n        numSpaces = (niceMax - niceMin) / spacing;\r\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\r\n            numSpaces = Math.round(numSpaces);\r\n        } else {\r\n            numSpaces = Math.ceil(numSpaces);\r\n        }\r\n    }\r\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\r\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\r\n    niceMin = Math.round(niceMin * factor) / factor;\r\n    niceMax = Math.round(niceMax * factor) / factor;\r\n    let j = 0;\r\n    if (minDefined) {\r\n        if (includeBounds && niceMin !== min) {\r\n            ticks.push({\r\n                value: min\r\n            });\r\n            if (niceMin < min) {\r\n                j++;\r\n            }\r\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\r\n                j++;\r\n            }\r\n        } else if (niceMin < min) {\r\n            j++;\r\n        }\r\n    }\r\n    for(; j < numSpaces; ++j){\r\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\r\n        if (maxDefined && tickValue > max) {\r\n            break;\r\n        }\r\n        ticks.push({\r\n            value: tickValue\r\n        });\r\n    }\r\n    if (maxDefined && includeBounds && niceMax !== max) {\r\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\r\n            ticks[ticks.length - 1].value = max;\r\n        } else {\r\n            ticks.push({\r\n                value: max\r\n            });\r\n        }\r\n    } else if (!maxDefined || niceMax === max) {\r\n        ticks.push({\r\n            value: niceMax\r\n        });\r\n    }\r\n    return ticks;\r\n}\r\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\r\n    const rad = toRadians(minRotation);\r\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\r\n    const length = 0.75 * minSpacing * ('' + value).length;\r\n    return Math.min(minSpacing / ratio, length);\r\n}\r\nclass LinearScaleBase extends Scale {\r\n    constructor(cfg){\r\n        super(cfg);\r\n         this.start = undefined;\r\n         this.end = undefined;\r\n         this._startValue = undefined;\r\n         this._endValue = undefined;\r\n        this._valueRange = 0;\r\n    }\r\n    parse(raw, index) {\r\n        if (isNullOrUndef(raw)) {\r\n            return null;\r\n        }\r\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\r\n            return null;\r\n        }\r\n        return +raw;\r\n    }\r\n    handleTickRangeOptions() {\r\n        const { beginAtZero  } = this.options;\r\n        const { minDefined , maxDefined  } = this.getUserBounds();\r\n        let { min , max  } = this;\r\n        const setMin = (v)=>min = minDefined ? min : v;\r\n        const setMax = (v)=>max = maxDefined ? max : v;\r\n        if (beginAtZero) {\r\n            const minSign = sign(min);\r\n            const maxSign = sign(max);\r\n            if (minSign < 0 && maxSign < 0) {\r\n                setMax(0);\r\n            } else if (minSign > 0 && maxSign > 0) {\r\n                setMin(0);\r\n            }\r\n        }\r\n        if (min === max) {\r\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\r\n            setMax(max + offset);\r\n            if (!beginAtZero) {\r\n                setMin(min - offset);\r\n            }\r\n        }\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    getTickLimit() {\r\n        const tickOpts = this.options.ticks;\r\n        let { maxTicksLimit , stepSize  } = tickOpts;\r\n        let maxTicks;\r\n        if (stepSize) {\r\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\r\n            if (maxTicks > 1000) {\r\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\r\n                maxTicks = 1000;\r\n            }\r\n        } else {\r\n            maxTicks = this.computeTickLimit();\r\n            maxTicksLimit = maxTicksLimit || 11;\r\n        }\r\n        if (maxTicksLimit) {\r\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\r\n        }\r\n        return maxTicks;\r\n    }\r\n computeTickLimit() {\r\n        return Number.POSITIVE_INFINITY;\r\n    }\r\n    buildTicks() {\r\n        const opts = this.options;\r\n        const tickOpts = opts.ticks;\r\n        let maxTicks = this.getTickLimit();\r\n        maxTicks = Math.max(2, maxTicks);\r\n        const numericGeneratorOptions = {\r\n            maxTicks,\r\n            bounds: opts.bounds,\r\n            min: opts.min,\r\n            max: opts.max,\r\n            precision: tickOpts.precision,\r\n            step: tickOpts.stepSize,\r\n            count: tickOpts.count,\r\n            maxDigits: this._maxDigits(),\r\n            horizontal: this.isHorizontal(),\r\n            minRotation: tickOpts.minRotation || 0,\r\n            includeBounds: tickOpts.includeBounds !== false\r\n        };\r\n        const dataRange = this._range || this;\r\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\r\n        if (opts.bounds === 'ticks') {\r\n            _setMinAndMaxByKey(ticks, this, 'value');\r\n        }\r\n        if (opts.reverse) {\r\n            ticks.reverse();\r\n            this.start = this.max;\r\n            this.end = this.min;\r\n        } else {\r\n            this.start = this.min;\r\n            this.end = this.max;\r\n        }\r\n        return ticks;\r\n    }\r\n configure() {\r\n        const ticks = this.ticks;\r\n        let start = this.min;\r\n        let end = this.max;\r\n        super.configure();\r\n        if (this.options.offset && ticks.length) {\r\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\r\n            start -= offset;\r\n            end += offset;\r\n        }\r\n        this._startValue = start;\r\n        this._endValue = end;\r\n        this._valueRange = end - start;\r\n    }\r\n    getLabelForValue(value) {\r\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n    }\r\n}\r\n\r\nclass LinearScale extends LinearScaleBase {\r\n    static id = 'linear';\r\n static defaults = {\r\n        ticks: {\r\n            callback: Ticks.formatters.numeric\r\n        }\r\n    };\r\n    determineDataLimits() {\r\n        const { min , max  } = this.getMinMax(true);\r\n        this.min = isNumberFinite(min) ? min : 0;\r\n        this.max = isNumberFinite(max) ? max : 1;\r\n        this.handleTickRangeOptions();\r\n    }\r\n computeTickLimit() {\r\n        const horizontal = this.isHorizontal();\r\n        const length = horizontal ? this.width : this.height;\r\n        const minRotation = toRadians(this.options.ticks.minRotation);\r\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\r\n        const tickFont = this._resolveTickFontOptions(0);\r\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\r\n    }\r\n    getPixelForValue(value) {\r\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\r\n    }\r\n    getValueForPixel(pixel) {\r\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\r\n    }\r\n}\r\n\r\nconst log10Floor = (v)=>Math.floor(log10(v));\r\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\r\nfunction isMajor(tickVal) {\r\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\r\n    return remain === 1;\r\n}\r\nfunction steps(min, max, rangeExp) {\r\n    const rangeStep = Math.pow(10, rangeExp);\r\n    const start = Math.floor(min / rangeStep);\r\n    const end = Math.ceil(max / rangeStep);\r\n    return end - start;\r\n}\r\nfunction startExp(min, max) {\r\n    const range = max - min;\r\n    let rangeExp = log10Floor(range);\r\n    while(steps(min, max, rangeExp) > 10){\r\n        rangeExp++;\r\n    }\r\n    while(steps(min, max, rangeExp) < 10){\r\n        rangeExp--;\r\n    }\r\n    return Math.min(rangeExp, log10Floor(min));\r\n}\r\n function generateTicks(generationOptions, { min , max  }) {\r\n    min = finiteOrDefault(generationOptions.min, min);\r\n    const ticks = [];\r\n    const minExp = log10Floor(min);\r\n    let exp = startExp(min, max);\r\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\r\n    const stepSize = Math.pow(10, exp);\r\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\r\n    const start = Math.round((min - base) * precision) / precision;\r\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\r\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\r\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\r\n    while(value < max){\r\n        ticks.push({\r\n            value,\r\n            major: isMajor(value),\r\n            significand\r\n        });\r\n        if (significand >= 10) {\r\n            significand = significand < 15 ? 15 : 20;\r\n        } else {\r\n            significand++;\r\n        }\r\n        if (significand >= 20) {\r\n            exp++;\r\n            significand = 2;\r\n            precision = exp >= 0 ? 1 : precision;\r\n        }\r\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\r\n    }\r\n    const lastTick = finiteOrDefault(generationOptions.max, value);\r\n    ticks.push({\r\n        value: lastTick,\r\n        major: isMajor(lastTick),\r\n        significand\r\n    });\r\n    return ticks;\r\n}\r\nclass LogarithmicScale extends Scale {\r\n    static id = 'logarithmic';\r\n static defaults = {\r\n        ticks: {\r\n            callback: Ticks.formatters.logarithmic,\r\n            major: {\r\n                enabled: true\r\n            }\r\n        }\r\n    };\r\n    constructor(cfg){\r\n        super(cfg);\r\n         this.start = undefined;\r\n         this.end = undefined;\r\n         this._startValue = undefined;\r\n        this._valueRange = 0;\r\n    }\r\n    parse(raw, index) {\r\n        const value = LinearScaleBase.prototype.parse.apply(this, [\r\n            raw,\r\n            index\r\n        ]);\r\n        if (value === 0) {\r\n            this._zero = true;\r\n            return undefined;\r\n        }\r\n        return isNumberFinite(value) && value > 0 ? value : null;\r\n    }\r\n    determineDataLimits() {\r\n        const { min , max  } = this.getMinMax(true);\r\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\r\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\r\n        if (this.options.beginAtZero) {\r\n            this._zero = true;\r\n        }\r\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\r\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\r\n        }\r\n        this.handleTickRangeOptions();\r\n    }\r\n    handleTickRangeOptions() {\r\n        const { minDefined , maxDefined  } = this.getUserBounds();\r\n        let min = this.min;\r\n        let max = this.max;\r\n        const setMin = (v)=>min = minDefined ? min : v;\r\n        const setMax = (v)=>max = maxDefined ? max : v;\r\n        if (min === max) {\r\n            if (min <= 0) {\r\n                setMin(1);\r\n                setMax(10);\r\n            } else {\r\n                setMin(changeExponent(min, -1));\r\n                setMax(changeExponent(max, +1));\r\n            }\r\n        }\r\n        if (min <= 0) {\r\n            setMin(changeExponent(max, -1));\r\n        }\r\n        if (max <= 0) {\r\n            setMax(changeExponent(min, +1));\r\n        }\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n    buildTicks() {\r\n        const opts = this.options;\r\n        const generationOptions = {\r\n            min: this._userMin,\r\n            max: this._userMax\r\n        };\r\n        const ticks = generateTicks(generationOptions, this);\r\n        if (opts.bounds === 'ticks') {\r\n            _setMinAndMaxByKey(ticks, this, 'value');\r\n        }\r\n        if (opts.reverse) {\r\n            ticks.reverse();\r\n            this.start = this.max;\r\n            this.end = this.min;\r\n        } else {\r\n            this.start = this.min;\r\n            this.end = this.max;\r\n        }\r\n        return ticks;\r\n    }\r\n getLabelForValue(value) {\r\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\r\n    }\r\n configure() {\r\n        const start = this.min;\r\n        super.configure();\r\n        this._startValue = log10(start);\r\n        this._valueRange = log10(this.max) - log10(start);\r\n    }\r\n    getPixelForValue(value) {\r\n        if (value === undefined || value === 0) {\r\n            value = this.min;\r\n        }\r\n        if (value === null || isNaN(value)) {\r\n            return NaN;\r\n        }\r\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\r\n    }\r\n    getValueForPixel(pixel) {\r\n        const decimal = this.getDecimalForPixel(pixel);\r\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\r\n    }\r\n}\r\n\r\nfunction getTickBackdropHeight(opts) {\r\n    const tickOpts = opts.ticks;\r\n    if (tickOpts.display && opts.display) {\r\n        const padding = toPadding(tickOpts.backdropPadding);\r\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\r\n    }\r\n    return 0;\r\n}\r\nfunction measureLabelSize(ctx, font, label) {\r\n    label = isArray(label) ? label : [\r\n        label\r\n    ];\r\n    return {\r\n        w: _longestText(ctx, font.string, label),\r\n        h: label.length * font.lineHeight\r\n    };\r\n}\r\nfunction determineLimits(angle, pos, size, min, max) {\r\n    if (angle === min || angle === max) {\r\n        return {\r\n            start: pos - size / 2,\r\n            end: pos + size / 2\r\n        };\r\n    } else if (angle < min || angle > max) {\r\n        return {\r\n            start: pos - size,\r\n            end: pos\r\n        };\r\n    }\r\n    return {\r\n        start: pos,\r\n        end: pos + size\r\n    };\r\n}\r\n function fitWithPointLabels(scale) {\r\n    const orig = {\r\n        l: scale.left + scale._padding.left,\r\n        r: scale.right - scale._padding.right,\r\n        t: scale.top + scale._padding.top,\r\n        b: scale.bottom - scale._padding.bottom\r\n    };\r\n    const limits = Object.assign({}, orig);\r\n    const labelSizes = [];\r\n    const padding = [];\r\n    const valueCount = scale._pointLabels.length;\r\n    const pointLabelOpts = scale.options.pointLabels;\r\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\r\n    for(let i = 0; i < valueCount; i++){\r\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\r\n        padding[i] = opts.padding;\r\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\r\n        const plFont = toFont(opts.font);\r\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\r\n        labelSizes[i] = textSize;\r\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\r\n        const angle = Math.round(toDegrees(angleRadians));\r\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\r\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\r\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\r\n    }\r\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\r\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\r\n}\r\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\r\n    const sin = Math.abs(Math.sin(angle));\r\n    const cos = Math.abs(Math.cos(angle));\r\n    let x = 0;\r\n    let y = 0;\r\n    if (hLimits.start < orig.l) {\r\n        x = (orig.l - hLimits.start) / sin;\r\n        limits.l = Math.min(limits.l, orig.l - x);\r\n    } else if (hLimits.end > orig.r) {\r\n        x = (hLimits.end - orig.r) / sin;\r\n        limits.r = Math.max(limits.r, orig.r + x);\r\n    }\r\n    if (vLimits.start < orig.t) {\r\n        y = (orig.t - vLimits.start) / cos;\r\n        limits.t = Math.min(limits.t, orig.t - y);\r\n    } else if (vLimits.end > orig.b) {\r\n        y = (vLimits.end - orig.b) / cos;\r\n        limits.b = Math.max(limits.b, orig.b + y);\r\n    }\r\n}\r\nfunction createPointLabelItem(scale, index, itemOpts) {\r\n    const outerDistance = scale.drawingArea;\r\n    const { extra , additionalAngle , padding , size  } = itemOpts;\r\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\r\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\r\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\r\n    const textAlign = getTextAlignForAngle(angle);\r\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\r\n    return {\r\n        visible: true,\r\n        x: pointLabelPosition.x,\r\n        y,\r\n        textAlign,\r\n        left,\r\n        top: y,\r\n        right: left + size.w,\r\n        bottom: y + size.h\r\n    };\r\n}\r\nfunction isNotOverlapped(item, area) {\r\n    if (!area) {\r\n        return true;\r\n    }\r\n    const { left , top , right , bottom  } = item;\r\n    const apexesInArea = _isPointInArea({\r\n        x: left,\r\n        y: top\r\n    }, area) || _isPointInArea({\r\n        x: left,\r\n        y: bottom\r\n    }, area) || _isPointInArea({\r\n        x: right,\r\n        y: top\r\n    }, area) || _isPointInArea({\r\n        x: right,\r\n        y: bottom\r\n    }, area);\r\n    return !apexesInArea;\r\n}\r\nfunction buildPointLabelItems(scale, labelSizes, padding) {\r\n    const items = [];\r\n    const valueCount = scale._pointLabels.length;\r\n    const opts = scale.options;\r\n    const { centerPointLabels , display  } = opts.pointLabels;\r\n    const itemOpts = {\r\n        extra: getTickBackdropHeight(opts) / 2,\r\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\r\n    };\r\n    let area;\r\n    for(let i = 0; i < valueCount; i++){\r\n        itemOpts.padding = padding[i];\r\n        itemOpts.size = labelSizes[i];\r\n        const item = createPointLabelItem(scale, i, itemOpts);\r\n        items.push(item);\r\n        if (display === 'auto') {\r\n            item.visible = isNotOverlapped(item, area);\r\n            if (item.visible) {\r\n                area = item;\r\n            }\r\n        }\r\n    }\r\n    return items;\r\n}\r\nfunction getTextAlignForAngle(angle) {\r\n    if (angle === 0 || angle === 180) {\r\n        return 'center';\r\n    } else if (angle < 180) {\r\n        return 'left';\r\n    }\r\n    return 'right';\r\n}\r\nfunction leftForTextAlign(x, w, align) {\r\n    if (align === 'right') {\r\n        x -= w;\r\n    } else if (align === 'center') {\r\n        x -= w / 2;\r\n    }\r\n    return x;\r\n}\r\nfunction yForAngle(y, h, angle) {\r\n    if (angle === 90 || angle === 270) {\r\n        y -= h / 2;\r\n    } else if (angle > 270 || angle < 90) {\r\n        y -= h;\r\n    }\r\n    return y;\r\n}\r\nfunction drawPointLabelBox(ctx, opts, item) {\r\n    const { left , top , right , bottom  } = item;\r\n    const { backdropColor  } = opts;\r\n    if (!isNullOrUndef(backdropColor)) {\r\n        const borderRadius = toTRBLCorners(opts.borderRadius);\r\n        const padding = toPadding(opts.backdropPadding);\r\n        ctx.fillStyle = backdropColor;\r\n        const backdropLeft = left - padding.left;\r\n        const backdropTop = top - padding.top;\r\n        const backdropWidth = right - left + padding.width;\r\n        const backdropHeight = bottom - top + padding.height;\r\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\r\n            ctx.beginPath();\r\n            addRoundedRectPath(ctx, {\r\n                x: backdropLeft,\r\n                y: backdropTop,\r\n                w: backdropWidth,\r\n                h: backdropHeight,\r\n                radius: borderRadius\r\n            });\r\n            ctx.fill();\r\n        } else {\r\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\r\n        }\r\n    }\r\n}\r\nfunction drawPointLabels(scale, labelCount) {\r\n    const { ctx , options: { pointLabels  }  } = scale;\r\n    for(let i = labelCount - 1; i >= 0; i--){\r\n        const item = scale._pointLabelItems[i];\r\n        if (!item.visible) {\r\n            continue;\r\n        }\r\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\r\n        drawPointLabelBox(ctx, optsAtIndex, item);\r\n        const plFont = toFont(optsAtIndex.font);\r\n        const { x , y , textAlign  } = item;\r\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\r\n            color: optsAtIndex.color,\r\n            textAlign: textAlign,\r\n            textBaseline: 'middle'\r\n        });\r\n    }\r\n}\r\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\r\n    const { ctx  } = scale;\r\n    if (circular) {\r\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\r\n    } else {\r\n        let pointPosition = scale.getPointPosition(0, radius);\r\n        ctx.moveTo(pointPosition.x, pointPosition.y);\r\n        for(let i = 1; i < labelCount; i++){\r\n            pointPosition = scale.getPointPosition(i, radius);\r\n            ctx.lineTo(pointPosition.x, pointPosition.y);\r\n        }\r\n    }\r\n}\r\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\r\n    const ctx = scale.ctx;\r\n    const circular = gridLineOpts.circular;\r\n    const { color , lineWidth  } = gridLineOpts;\r\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\r\n        return;\r\n    }\r\n    ctx.save();\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n    ctx.setLineDash(borderOpts.dash);\r\n    ctx.lineDashOffset = borderOpts.dashOffset;\r\n    ctx.beginPath();\r\n    pathRadiusLine(scale, radius, circular, labelCount);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n    ctx.restore();\r\n}\r\nfunction createPointLabelContext(parent, index, label) {\r\n    return createContext(parent, {\r\n        label,\r\n        index,\r\n        type: 'pointLabel'\r\n    });\r\n}\r\nclass RadialLinearScale extends LinearScaleBase {\r\n    static id = 'radialLinear';\r\n static defaults = {\r\n        display: true,\r\n        animate: true,\r\n        position: 'chartArea',\r\n        angleLines: {\r\n            display: true,\r\n            lineWidth: 1,\r\n            borderDash: [],\r\n            borderDashOffset: 0.0\r\n        },\r\n        grid: {\r\n            circular: false\r\n        },\r\n        startAngle: 0,\r\n        ticks: {\r\n            showLabelBackdrop: true,\r\n            callback: Ticks.formatters.numeric\r\n        },\r\n        pointLabels: {\r\n            backdropColor: undefined,\r\n            backdropPadding: 2,\r\n            display: true,\r\n            font: {\r\n                size: 10\r\n            },\r\n            callback (label) {\r\n                return label;\r\n            },\r\n            padding: 5,\r\n            centerPointLabels: false\r\n        }\r\n    };\r\n    static defaultRoutes = {\r\n        'angleLines.color': 'borderColor',\r\n        'pointLabels.color': 'color',\r\n        'ticks.color': 'color'\r\n    };\r\n    static descriptors = {\r\n        angleLines: {\r\n            _fallback: 'grid'\r\n        }\r\n    };\r\n    constructor(cfg){\r\n        super(cfg);\r\n         this.xCenter = undefined;\r\n         this.yCenter = undefined;\r\n         this.drawingArea = undefined;\r\n         this._pointLabels = [];\r\n        this._pointLabelItems = [];\r\n    }\r\n    setDimensions() {\r\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\r\n        const w = this.width = this.maxWidth - padding.width;\r\n        const h = this.height = this.maxHeight - padding.height;\r\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\r\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\r\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\r\n    }\r\n    determineDataLimits() {\r\n        const { min , max  } = this.getMinMax(false);\r\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\r\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\r\n        this.handleTickRangeOptions();\r\n    }\r\n computeTickLimit() {\r\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\r\n    }\r\n    generateTickLabels(ticks) {\r\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\r\n        this._pointLabels = this.getLabels().map((value, index)=>{\r\n            const label = callback(this.options.pointLabels.callback, [\r\n                value,\r\n                index\r\n            ], this);\r\n            return label || label === 0 ? label : '';\r\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\r\n    }\r\n    fit() {\r\n        const opts = this.options;\r\n        if (opts.display && opts.pointLabels.display) {\r\n            fitWithPointLabels(this);\r\n        } else {\r\n            this.setCenterPoint(0, 0, 0, 0);\r\n        }\r\n    }\r\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\r\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\r\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\r\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\r\n    }\r\n    getIndexAngle(index) {\r\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\r\n        const startAngle = this.options.startAngle || 0;\r\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\r\n    }\r\n    getDistanceFromCenterForValue(value) {\r\n        if (isNullOrUndef(value)) {\r\n            return NaN;\r\n        }\r\n        const scalingFactor = this.drawingArea / (this.max - this.min);\r\n        if (this.options.reverse) {\r\n            return (this.max - value) * scalingFactor;\r\n        }\r\n        return (value - this.min) * scalingFactor;\r\n    }\r\n    getValueForDistanceFromCenter(distance) {\r\n        if (isNullOrUndef(distance)) {\r\n            return NaN;\r\n        }\r\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\r\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\r\n    }\r\n    getPointLabelContext(index) {\r\n        const pointLabels = this._pointLabels || [];\r\n        if (index >= 0 && index < pointLabels.length) {\r\n            const pointLabel = pointLabels[index];\r\n            return createPointLabelContext(this.getContext(), index, pointLabel);\r\n        }\r\n    }\r\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\r\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\r\n        return {\r\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\r\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\r\n            angle\r\n        };\r\n    }\r\n    getPointPositionForValue(index, value) {\r\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\r\n    }\r\n    getBasePosition(index) {\r\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\r\n    }\r\n    getPointLabelPosition(index) {\r\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\r\n        return {\r\n            left,\r\n            top,\r\n            right,\r\n            bottom\r\n        };\r\n    }\r\n drawBackground() {\r\n        const { backgroundColor , grid: { circular  }  } = this.options;\r\n        if (backgroundColor) {\r\n            const ctx = this.ctx;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\r\n            ctx.closePath();\r\n            ctx.fillStyle = backgroundColor;\r\n            ctx.fill();\r\n            ctx.restore();\r\n        }\r\n    }\r\n drawGrid() {\r\n        const ctx = this.ctx;\r\n        const opts = this.options;\r\n        const { angleLines , grid , border  } = opts;\r\n        const labelCount = this._pointLabels.length;\r\n        let i, offset, position;\r\n        if (opts.pointLabels.display) {\r\n            drawPointLabels(this, labelCount);\r\n        }\r\n        if (grid.display) {\r\n            this.ticks.forEach((tick, index)=>{\r\n                if (index !== 0) {\r\n                    offset = this.getDistanceFromCenterForValue(tick.value);\r\n                    const context = this.getContext(index);\r\n                    const optsAtIndex = grid.setContext(context);\r\n                    const optsAtIndexBorder = border.setContext(context);\r\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\r\n                }\r\n            });\r\n        }\r\n        if (angleLines.display) {\r\n            ctx.save();\r\n            for(i = labelCount - 1; i >= 0; i--){\r\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\r\n                const { color , lineWidth  } = optsAtIndex;\r\n                if (!lineWidth || !color) {\r\n                    continue;\r\n                }\r\n                ctx.lineWidth = lineWidth;\r\n                ctx.strokeStyle = color;\r\n                ctx.setLineDash(optsAtIndex.borderDash);\r\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\r\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\r\n                position = this.getPointPosition(i, offset);\r\n                ctx.beginPath();\r\n                ctx.moveTo(this.xCenter, this.yCenter);\r\n                ctx.lineTo(position.x, position.y);\r\n                ctx.stroke();\r\n            }\r\n            ctx.restore();\r\n        }\r\n    }\r\n drawBorder() {}\r\n drawLabels() {\r\n        const ctx = this.ctx;\r\n        const opts = this.options;\r\n        const tickOpts = opts.ticks;\r\n        if (!tickOpts.display) {\r\n            return;\r\n        }\r\n        const startAngle = this.getIndexAngle(0);\r\n        let offset, width;\r\n        ctx.save();\r\n        ctx.translate(this.xCenter, this.yCenter);\r\n        ctx.rotate(startAngle);\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        this.ticks.forEach((tick, index)=>{\r\n            if (index === 0 && !opts.reverse) {\r\n                return;\r\n            }\r\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\r\n            const tickFont = toFont(optsAtIndex.font);\r\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\r\n            if (optsAtIndex.showLabelBackdrop) {\r\n                ctx.font = tickFont.string;\r\n                width = ctx.measureText(tick.label).width;\r\n                ctx.fillStyle = optsAtIndex.backdropColor;\r\n                const padding = toPadding(optsAtIndex.backdropPadding);\r\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\r\n            }\r\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\r\n                color: optsAtIndex.color,\r\n                strokeColor: optsAtIndex.textStrokeColor,\r\n                strokeWidth: optsAtIndex.textStrokeWidth\r\n            });\r\n        });\r\n        ctx.restore();\r\n    }\r\n drawTitle() {}\r\n}\r\n\r\nconst INTERVALS = {\r\n    millisecond: {\r\n        common: true,\r\n        size: 1,\r\n        steps: 1000\r\n    },\r\n    second: {\r\n        common: true,\r\n        size: 1000,\r\n        steps: 60\r\n    },\r\n    minute: {\r\n        common: true,\r\n        size: 60000,\r\n        steps: 60\r\n    },\r\n    hour: {\r\n        common: true,\r\n        size: 3600000,\r\n        steps: 24\r\n    },\r\n    day: {\r\n        common: true,\r\n        size: 86400000,\r\n        steps: 30\r\n    },\r\n    week: {\r\n        common: false,\r\n        size: 604800000,\r\n        steps: 4\r\n    },\r\n    month: {\r\n        common: true,\r\n        size: 2.628e9,\r\n        steps: 12\r\n    },\r\n    quarter: {\r\n        common: false,\r\n        size: 7.884e9,\r\n        steps: 4\r\n    },\r\n    year: {\r\n        common: true,\r\n        size: 3.154e10\r\n    }\r\n};\r\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\r\n function sorter(a, b) {\r\n    return a - b;\r\n}\r\n function parse(scale, input) {\r\n    if (isNullOrUndef(input)) {\r\n        return null;\r\n    }\r\n    const adapter = scale._adapter;\r\n    const { parser , round , isoWeekday  } = scale._parseOpts;\r\n    let value = input;\r\n    if (typeof parser === 'function') {\r\n        value = parser(value);\r\n    }\r\n    if (!isNumberFinite(value)) {\r\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\r\n    }\r\n    if (value === null) {\r\n        return null;\r\n    }\r\n    if (round) {\r\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\r\n    }\r\n    return +value;\r\n}\r\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\r\n    const ilen = UNITS.length;\r\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\r\n        const interval = INTERVALS[UNITS[i]];\r\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\r\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\r\n            return UNITS[i];\r\n        }\r\n    }\r\n    return UNITS[ilen - 1];\r\n}\r\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\r\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\r\n        const unit = UNITS[i];\r\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\r\n            return unit;\r\n        }\r\n    }\r\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\r\n}\r\n function determineMajorUnit(unit) {\r\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\r\n        if (INTERVALS[UNITS[i]].common) {\r\n            return UNITS[i];\r\n        }\r\n    }\r\n}\r\n function addTick(ticks, time, timestamps) {\r\n    if (!timestamps) {\r\n        ticks[time] = true;\r\n    } else if (timestamps.length) {\r\n        const { lo , hi  } = _lookup(timestamps, time);\r\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\r\n        ticks[timestamp] = true;\r\n    }\r\n}\r\n function setMajorTicks(scale, ticks, map, majorUnit) {\r\n    const adapter = scale._adapter;\r\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\r\n    const last = ticks[ticks.length - 1].value;\r\n    let major, index;\r\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\r\n        index = map[major];\r\n        if (index >= 0) {\r\n            ticks[index].major = true;\r\n        }\r\n    }\r\n    return ticks;\r\n}\r\n function ticksFromTimestamps(scale, values, majorUnit) {\r\n    const ticks = [];\r\n     const map = {};\r\n    const ilen = values.length;\r\n    let i, value;\r\n    for(i = 0; i < ilen; ++i){\r\n        value = values[i];\r\n        map[value] = i;\r\n        ticks.push({\r\n            value,\r\n            major: false\r\n        });\r\n    }\r\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\r\n}\r\nclass TimeScale extends Scale {\r\n    static id = 'time';\r\n static defaults = {\r\n bounds: 'data',\r\n        adapters: {},\r\n        time: {\r\n            parser: false,\r\n            unit: false,\r\n            round: false,\r\n            isoWeekday: false,\r\n            minUnit: 'millisecond',\r\n            displayFormats: {}\r\n        },\r\n        ticks: {\r\n source: 'auto',\r\n            callback: false,\r\n            major: {\r\n                enabled: false\r\n            }\r\n        }\r\n    };\r\n constructor(props){\r\n        super(props);\r\n         this._cache = {\r\n            data: [],\r\n            labels: [],\r\n            all: []\r\n        };\r\n         this._unit = 'day';\r\n         this._majorUnit = undefined;\r\n        this._offsets = {};\r\n        this._normalized = false;\r\n        this._parseOpts = undefined;\r\n    }\r\n    init(scaleOpts, opts = {}) {\r\n        const time = scaleOpts.time || (scaleOpts.time = {});\r\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\r\n        adapter.init(opts);\r\n        mergeIf(time.displayFormats, adapter.formats());\r\n        this._parseOpts = {\r\n            parser: time.parser,\r\n            round: time.round,\r\n            isoWeekday: time.isoWeekday\r\n        };\r\n        super.init(scaleOpts);\r\n        this._normalized = opts.normalized;\r\n    }\r\n parse(raw, index) {\r\n        if (raw === undefined) {\r\n            return null;\r\n        }\r\n        return parse(this, raw);\r\n    }\r\n    beforeLayout() {\r\n        super.beforeLayout();\r\n        this._cache = {\r\n            data: [],\r\n            labels: [],\r\n            all: []\r\n        };\r\n    }\r\n    determineDataLimits() {\r\n        const options = this.options;\r\n        const adapter = this._adapter;\r\n        const unit = options.time.unit || 'day';\r\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\r\n function _applyBounds(bounds) {\r\n            if (!minDefined && !isNaN(bounds.min)) {\r\n                min = Math.min(min, bounds.min);\r\n            }\r\n            if (!maxDefined && !isNaN(bounds.max)) {\r\n                max = Math.max(max, bounds.max);\r\n            }\r\n        }\r\n        if (!minDefined || !maxDefined) {\r\n            _applyBounds(this._getLabelBounds());\r\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\r\n                _applyBounds(this.getMinMax(false));\r\n            }\r\n        }\r\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\r\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\r\n        this.min = Math.min(min, max - 1);\r\n        this.max = Math.max(min + 1, max);\r\n    }\r\n _getLabelBounds() {\r\n        const arr = this.getLabelTimestamps();\r\n        let min = Number.POSITIVE_INFINITY;\r\n        let max = Number.NEGATIVE_INFINITY;\r\n        if (arr.length) {\r\n            min = arr[0];\r\n            max = arr[arr.length - 1];\r\n        }\r\n        return {\r\n            min,\r\n            max\r\n        };\r\n    }\r\n buildTicks() {\r\n        const options = this.options;\r\n        const timeOpts = options.time;\r\n        const tickOpts = options.ticks;\r\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\r\n        if (options.bounds === 'ticks' && timestamps.length) {\r\n            this.min = this._userMin || timestamps[0];\r\n            this.max = this._userMax || timestamps[timestamps.length - 1];\r\n        }\r\n        const min = this.min;\r\n        const max = this.max;\r\n        const ticks = _filterBetween(timestamps, min, max);\r\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\r\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\r\n        this.initOffsets(timestamps);\r\n        if (options.reverse) {\r\n            ticks.reverse();\r\n        }\r\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\r\n    }\r\n    afterAutoSkip() {\r\n        if (this.options.offsetAfterAutoskip) {\r\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\r\n        }\r\n    }\r\n initOffsets(timestamps = []) {\r\n        let start = 0;\r\n        let end = 0;\r\n        let first, last;\r\n        if (this.options.offset && timestamps.length) {\r\n            first = this.getDecimalForValue(timestamps[0]);\r\n            if (timestamps.length === 1) {\r\n                start = 1 - first;\r\n            } else {\r\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\r\n            }\r\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\r\n            if (timestamps.length === 1) {\r\n                end = last;\r\n            } else {\r\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\r\n            }\r\n        }\r\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\r\n        start = _limitValue(start, 0, limit);\r\n        end = _limitValue(end, 0, limit);\r\n        this._offsets = {\r\n            start,\r\n            end,\r\n            factor: 1 / (start + 1 + end)\r\n        };\r\n    }\r\n _generate() {\r\n        const adapter = this._adapter;\r\n        const min = this.min;\r\n        const max = this.max;\r\n        const options = this.options;\r\n        const timeOpts = options.time;\r\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\r\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\r\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\r\n        const hasWeekday = isNumber(weekday) || weekday === true;\r\n        const ticks = {};\r\n        let first = min;\r\n        let time, count;\r\n        if (hasWeekday) {\r\n            first = +adapter.startOf(first, 'isoWeek', weekday);\r\n        }\r\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\r\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\r\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\r\n        }\r\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\r\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\r\n            addTick(ticks, time, timestamps);\r\n        }\r\n        if (time === max || options.bounds === 'ticks' || count === 1) {\r\n            addTick(ticks, time, timestamps);\r\n        }\r\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\r\n    }\r\n getLabelForValue(value) {\r\n        const adapter = this._adapter;\r\n        const timeOpts = this.options.time;\r\n        if (timeOpts.tooltipFormat) {\r\n            return adapter.format(value, timeOpts.tooltipFormat);\r\n        }\r\n        return adapter.format(value, timeOpts.displayFormats.datetime);\r\n    }\r\n format(value, format) {\r\n        const options = this.options;\r\n        const formats = options.time.displayFormats;\r\n        const unit = this._unit;\r\n        const fmt = format || formats[unit];\r\n        return this._adapter.format(value, fmt);\r\n    }\r\n _tickFormatFunction(time, index, ticks, format) {\r\n        const options = this.options;\r\n        const formatter = options.ticks.callback;\r\n        if (formatter) {\r\n            return callback(formatter, [\r\n                time,\r\n                index,\r\n                ticks\r\n            ], this);\r\n        }\r\n        const formats = options.time.displayFormats;\r\n        const unit = this._unit;\r\n        const majorUnit = this._majorUnit;\r\n        const minorFormat = unit && formats[unit];\r\n        const majorFormat = majorUnit && formats[majorUnit];\r\n        const tick = ticks[index];\r\n        const major = majorUnit && majorFormat && tick && tick.major;\r\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\r\n    }\r\n generateTickLabels(ticks) {\r\n        let i, ilen, tick;\r\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\r\n            tick = ticks[i];\r\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\r\n        }\r\n    }\r\n getDecimalForValue(value) {\r\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\r\n    }\r\n getPixelForValue(value) {\r\n        const offsets = this._offsets;\r\n        const pos = this.getDecimalForValue(value);\r\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\r\n    }\r\n getValueForPixel(pixel) {\r\n        const offsets = this._offsets;\r\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n        return this.min + pos * (this.max - this.min);\r\n    }\r\n _getLabelSize(label) {\r\n        const ticksOpts = this.options.ticks;\r\n        const tickLabelWidth = this.ctx.measureText(label).width;\r\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\r\n        const cosRotation = Math.cos(angle);\r\n        const sinRotation = Math.sin(angle);\r\n        const tickFontSize = this._resolveTickFontOptions(0).size;\r\n        return {\r\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\r\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\r\n        };\r\n    }\r\n _getLabelCapacity(exampleTime) {\r\n        const timeOpts = this.options.time;\r\n        const displayFormats = timeOpts.displayFormats;\r\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\r\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\r\n            exampleTime\r\n        ], this._majorUnit), format);\r\n        const size = this._getLabelSize(exampleLabel);\r\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\r\n        return capacity > 0 ? capacity : 1;\r\n    }\r\n getDataTimestamps() {\r\n        let timestamps = this._cache.data || [];\r\n        let i, ilen;\r\n        if (timestamps.length) {\r\n            return timestamps;\r\n        }\r\n        const metas = this.getMatchingVisibleMetas();\r\n        if (this._normalized && metas.length) {\r\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\r\n        }\r\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\r\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\r\n        }\r\n        return this._cache.data = this.normalize(timestamps);\r\n    }\r\n getLabelTimestamps() {\r\n        const timestamps = this._cache.labels || [];\r\n        let i, ilen;\r\n        if (timestamps.length) {\r\n            return timestamps;\r\n        }\r\n        const labels = this.getLabels();\r\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\r\n            timestamps.push(parse(this, labels[i]));\r\n        }\r\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\r\n    }\r\n normalize(values) {\r\n        return _arrayUnique(values.sort(sorter));\r\n    }\r\n}\r\n\r\nfunction interpolate(table, val, reverse) {\r\n    let lo = 0;\r\n    let hi = table.length - 1;\r\n    let prevSource, nextSource, prevTarget, nextTarget;\r\n    if (reverse) {\r\n        if (val >= table[lo].pos && val <= table[hi].pos) {\r\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\r\n        }\r\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\r\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\r\n    } else {\r\n        if (val >= table[lo].time && val <= table[hi].time) {\r\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\r\n        }\r\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\r\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\r\n    }\r\n    const span = nextSource - prevSource;\r\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\r\n}\r\nclass TimeSeriesScale extends TimeScale {\r\n    static id = 'timeseries';\r\n static defaults = TimeScale.defaults;\r\n constructor(props){\r\n        super(props);\r\n         this._table = [];\r\n         this._minPos = undefined;\r\n         this._tableRange = undefined;\r\n    }\r\n initOffsets() {\r\n        const timestamps = this._getTimestampsForTable();\r\n        const table = this._table = this.buildLookupTable(timestamps);\r\n        this._minPos = interpolate(table, this.min);\r\n        this._tableRange = interpolate(table, this.max) - this._minPos;\r\n        super.initOffsets(timestamps);\r\n    }\r\n buildLookupTable(timestamps) {\r\n        const { min , max  } = this;\r\n        const items = [];\r\n        const table = [];\r\n        let i, ilen, prev, curr, next;\r\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\r\n            curr = timestamps[i];\r\n            if (curr >= min && curr <= max) {\r\n                items.push(curr);\r\n            }\r\n        }\r\n        if (items.length < 2) {\r\n            return [\r\n                {\r\n                    time: min,\r\n                    pos: 0\r\n                },\r\n                {\r\n                    time: max,\r\n                    pos: 1\r\n                }\r\n            ];\r\n        }\r\n        for(i = 0, ilen = items.length; i < ilen; ++i){\r\n            next = items[i + 1];\r\n            prev = items[i - 1];\r\n            curr = items[i];\r\n            if (Math.round((next + prev) / 2) !== curr) {\r\n                table.push({\r\n                    time: curr,\r\n                    pos: i / (ilen - 1)\r\n                });\r\n            }\r\n        }\r\n        return table;\r\n    }\r\n _generate() {\r\n        const min = this.min;\r\n        const max = this.max;\r\n        let timestamps = super.getDataTimestamps();\r\n        if (!timestamps.includes(min) || !timestamps.length) {\r\n            timestamps.splice(0, 0, min);\r\n        }\r\n        if (!timestamps.includes(max) || timestamps.length === 1) {\r\n            timestamps.push(max);\r\n        }\r\n        return timestamps.sort((a, b)=>a - b);\r\n    }\r\n _getTimestampsForTable() {\r\n        let timestamps = this._cache.all || [];\r\n        if (timestamps.length) {\r\n            return timestamps;\r\n        }\r\n        const data = this.getDataTimestamps();\r\n        const label = this.getLabelTimestamps();\r\n        if (data.length && label.length) {\r\n            timestamps = this.normalize(data.concat(label));\r\n        } else {\r\n            timestamps = data.length ? data : label;\r\n        }\r\n        timestamps = this._cache.all = timestamps;\r\n        return timestamps;\r\n    }\r\n getDecimalForValue(value) {\r\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\r\n    }\r\n getValueForPixel(pixel) {\r\n        const offsets = this._offsets;\r\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\r\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\r\n    }\r\n}\r\n\r\nvar scales = /*#__PURE__*/Object.freeze({\r\n__proto__: null,\r\nCategoryScale: CategoryScale,\r\nLinearScale: LinearScale,\r\nLogarithmicScale: LogarithmicScale,\r\nRadialLinearScale: RadialLinearScale,\r\nTimeScale: TimeScale,\r\nTimeSeriesScale: TimeSeriesScale\r\n});\r\n\r\nconst registerables = [\r\n    controllers,\r\n    elements,\r\n    plugins,\r\n    scales\r\n];\r\n\r\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\r\n\r\n", "import {Chart, registerables} from '../dist/chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nexport * from '../dist/chart.js';\r\nexport default Chart;\r\n"],
  "mappings": "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",
  "names": ["color", "clone", "index", "set", "callback", "defaults", "index", "_descriptors", "resolve", "descriptors", "set", "draw", "from", "to", "index", "scales", "elements", "names", "color", "i", "inRange", "layouts", "positions", "validIndex", "registry", "descriptors", "plugins", "set", "listener", "alpha", "skip", "fill", "map", "callback", "round", "interpolate"]
}
